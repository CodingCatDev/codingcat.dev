{
  "ajs-coding-tools": {
    "title": "AJ's Coding Tools",
    "date": "2020-09-17",
    "preview": "https://youtu.be/nIRZzMHQ1b4\n\nHey there Purr-fect Peep, so you have …",
    "content": "\n\nhttps://youtu.be/nIRZzMHQ1b4\n\nHey there Purr-fect Peep, so you have decided to start learning Web Development, that is **AWESOME**!! AJ and I will be here to guide you along in this journey. Whether you are ten, twenty or ninety years old, it is never too late to get started ????.\n\n## Main Coding Environment[](https://codingcat.dev/courses/html-for-a-10-year-old/html-coding-tools#main-coding-environment)\n\nThroughout the tutorials you will see tiny editors like below from CodeSandbox.\n\n<iframe src=\"[https://codesandbox.io/embed/html-for-a-10-year-old-basics-hello-world-vhigc?fontsize=14&hidenavigation=1&theme=dark](https://codesandbox.io/embed/html-for-a-10-year-old-basics-hello-world-vhigc?fontsize=14&hidenavigation=1&theme=dark)\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"html-for-a-10-year-old-basics-hello-world\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n\n> .\n\nIf you would like to dive a little deeper you can look at the documentation for CodeSandbox  \n[](https://codesandbox.io/docs)[https://codesandbox.io/docs](https://codesandbox.io/docs)\n\n## CodeSandbox Login[](https://codingcat.dev/courses/html-for-a-10-year-old/html-coding-tools#codesandbox-login)\n\nCodeSandbox uses an identity provider called [GitHub](https://github.com/). You can signup on GitHub using any email that you choose, just make sure you will have access to it long term. For instance if you are in school now and your email will be shutdown when you finish, consider creating an email address on [Gmail](https://www.google.com/gmail/about/#). Please see the video for reference.\n\n![GitHub Login for CodeSandbox](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/courses/codesandbox/Screen_Shot_2019-12-07_at_3.31.16_PM.png)\n\n## CodeSandbox Fork[](https://codingcat.dev/courses/html-for-a-10-year-old/html-coding-tools#codesandbox-fork)\n\nYou can think of a fork as a copy of my original code, that you can make all your own. When you get started withe the basics it might not make sense to create forks of my sandboxes because you are just learning and playing around. However, when you get into some more advanced courses you will want to start forking your own solutions and even using those in GitHub so that you can show off your work.\n\n> Pro Tip: Employers looking for coders will often look at your GitHub repo to checkout your work. This way you have something to show them.\n\n## Where are all AJonP's Sandboxes[](https://codingcat.dev/courses/html-for-a-10-year-old/html-coding-tools#where-are-all-ajonps-sandboxes)\n\nYou can find all of AJonP's sandboxes at [https://codesandbox.io/u/ajonp/sandboxes](https://codesandbox.io/u/ajonp/sandboxes). This is also where you would find a listing of all your sandboxes as well, just replace ajonp with your username.\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/image-69.png)\n\n![Sandboxes](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/courses/codesandbox/Screen_Shot_2019-12-07_at_3.27.24_PM.png)\n",
    "iso8601Date": "2020-09-17T00:00:00-04:00",
    "basename": "ajs-coding-tools"
  },
  "angular-material-dynamic-navigation-using-firestore": {
    "title": "Angular Material Dynamic Navigation using Firestore",
    "date": "2019-01-22",
    "preview": "https://youtu.be/sZoiLcq7N6Q\n\n# Angular Material Dynamic Navigation …",
    "content": "\n\nhttps://youtu.be/sZoiLcq7N6Q\n\n# Angular Material Dynamic Navigation using Firestore\n\n???? [Demo](https://ajonp-lesson-11.firebaseapp.com/books/)The goal of this lesson is to take our [Angular Material Theming](https://ajonp.com/courses/angularmaterial/angular-material-theming) and add navigational elements. The two for this lesson will include [Angular Material Tree](https://material.angular.io/components/tree/overview) and [Angular Material Expansion Panel](https://material.angular.io/components/expansion/overview)If you are well versed in Firebase and are just wondering how to get this tree to work with Firestore, you might want to jump to Tree\n\n## Lesson Steps\n\n1. Project Setup\n2. Firestore\n3. Router Updates\n4. Component Updates\n\n# Project Setup\n\n## Create Firebase Project\n\nAngular Firebase has an amazing guide for this [Beginners Guide to Firebase](https://angularfirebase.com/lessons/the-ultimate-beginners-guide-to-firebase/), so you could check that out as well.\n\n> You will need a Google Account\n\nPlease navigate to [Firebase Console](https://console.firebase.google.com/) here you can create a new project with any name that you would like. Once inside of your new project please create a firestore database, under the `Database` tab.When prompted select `locked mode`.\n\n![Firestore Locked Mode](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1548346547/ajonp-ajonp-com/11-lesson-angular-navigation-firestore/krp63uw43udiq94ndkrw.png)\n\n## GitHub Lesson 10 clone\n\nFor our starter template we will use our previes lesson repo, make sure you are in a directory you would like to place the repo locally and begin work.In your terminal, clone the repo to a new folder\n\n```\ngit clone https://github.com/AJONPLLC/lesson-10-angular-material-theming.git lesson-11 \n```\n\nRemove the old origin\n\n```\ngit remote rm origin \n```\n\nYou can then add your own git repo if you would like, or just track changes locally. Add remote\n\n```\ngit remote add origin -yourgiturl- \n```\n\n## Add firebase\n\n> If you have not yet downloaded firebase CLI please install `npm install -g firebase-tools`.\n\nAfter install\n\n```\nfirebase login \n```\n\nNow we will initialize this project\n\n```\nfirebase init \n```\n\nMake sure to select Firestore, and accept all other defaults\n\n![Firebase init](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1548346992/ajonp-ajonp-com/11-lesson-angular-navigation-firestore/x7r97se1ymusolimrtfz.png)\n\nYou will then need to add firebase to your project, again please checkout the link from above how to do this, of follow the video.\n\n# Firestore\n\n## Firestore Service Creation\n\n> If you don't have the Angular CLI `npm install -g @angular/cli`.\n\nUsing the Angular CLI we will start by creating a service.\n\n```\nng g service core/services/firestore \n```\n\nThis service will allow us to connect to Firebase Firestore.\n\n## Firestore Database Setup\n\nWe want to build this structure inside of Firestore\n\n![Firestore Hierarchy](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1548347396/ajonp-ajonp-com/11-lesson-angular-navigation-firestore/books_hierarchy.png)\n\nIn Firestore we will setup this basic structure. Remember every collection must have a document. You can find more in the [Firestore Docs Overview](https://cloud.google.com/firestore/docs/overview)\n\n## Add Angular Firebase Service\n\nThis service was somthing that was created by Jeff in [Advanced Firestore Usage Guide with Angular](https://angularfirebase.com/lessons/firestore-advanced-usage-angularfire/)\n\n```\nng g service core/services/angularfirebase \n```\n\nCode\n\n```\nimport { Injectable } from '@angular/core'; \nimport { \n    AngularFirestore, \n    AngularFirestoreDocument, \n    AngularFirestoreCollection, \n    DocumentChangeAction, \n    Action, \n    DocumentSnapshotDoesNotExist, \n    DocumentSnapshotExists \n} from '@angular/fire/firestore'; \nimport { Observable, from } from 'rxjs'; \nimport { map, tap, take, mergeMap, expand, takeWhile, finalize } from 'rxjs/operators'; \nimport * as firebase from 'firebase/app'; \nimport { AngularFireStorage } from '@angular/fire/storage'; \n\ntype CollectionPredicate<T> = string | AngularFirestoreCollection<T>; \ntype DocPredicate<T> = string | AngularFirestoreDocument<T>; \n\n@Injectable({ providedIn: 'root' }) \n\nexport class AngularfirebaseService { \n    constructor(public aFirestore: AngularFirestore, public aFireStorage: AngularFireStorage) { } \n    /// ************** /// Get a Reference /// ************** \n    col<T>(ref: CollectionPredicate<T>, queryFn?): AngularFirestoreCollection<T> { \n        return typeof ref === 'string' ? this.aFirestore.collection<T>(ref, queryFn) : ref; \n    } \n    doc<T>(ref: DocPredicate<T>): AngularFirestoreDocument<T> { \n        return typeof ref === 'string' ? this.aFirestore.doc<T>(ref) : ref; \n    } \n    /// ************** /// Get Data /// ************** \n    doc$<T>(ref: DocPredicate<T>): Observable<T> { \n        return this.doc(ref).snapshotChanges().pipe( \n            map( ( doc: Action< DocumentSnapshotDoesNotExist | DocumentSnapshotExists<T> > ) => { \n                return doc.payload.data() as T; \n            } ) \n        ); \n    } \n    col$<T>(ref: CollectionPredicate<T>, queryFn?): Observable<T[]> { \n        return this.col(ref, queryFn).snapshotChanges().pipe( \n            map((docs: DocumentChangeAction<T>[]) => { \n                return docs.map((a: DocumentChangeAction<T>) => a.payload.doc.data() ) as T[]; \n            }) \n        ); \n    } \n    /// with Ids \n    colWithIds$<T>(ref: CollectionPredicate<T>, queryFn?): Observable<any[]> { \n        return this.col(ref, queryFn).snapshotChanges().pipe( \n            map((actions: DocumentChangeAction<T>[]) => { \n                return actions.map((a: DocumentChangeAction<T>) => { \n                    const data: Object = a.payload.doc.data() as T; \n                    const id = a.payload.doc.id; return { id, ...data }; \n                }); \n            }) \n        ); \n    } \n    /// ************** /// Write Data /// ************** \n    /// Firebase Server Timestamp get \n    timestamp() { \n        return firebase.firestore.FieldValue.serverTimestamp(); \n    } \n    set<T>(ref: DocPredicate<T>, data: any): Promise<void> { \n        const timestamp = this.timestamp; \n        return this.doc(ref).set({ ...data, updatedAt: timestamp, createdAt: timestamp }); \n    } \n    update<T>(ref: DocPredicate<T>, data: any): Promise<void> { \n        return this.doc(ref).update({ ...data, updatedAt: this.timestamp }); \n    } \n    delete<T>(ref: DocPredicate<T>): Promise<void> { \n        return this.doc(ref).delete(); \n    } \n    add<T>( ref: CollectionPredicate<T>, data ): Promise<firebase.firestore.DocumentReference> { \n        const timestamp = this.timestamp; \n        return this.col(ref).add({ ...data, updatedAt: timestamp, createdAt: timestamp }); \n    } \n    geopoint(lat: number, lng: number): firebase.firestore.GeoPoint { \n        return new firebase.firestore.GeoPoint(lat, lng); \n    } \n    /// If doc exists update, otherwise set \n    upsert<T>(ref: DocPredicate<T>, data: any): Promise<void> { \n        const doc = this.doc(ref).snapshotChanges().pipe(take(1)).toPromise(); \n        return doc.then( ( snap: Action<DocumentSnapshotDoesNotExist | DocumentSnapshotExists<T>> ) => { \n            return snap.payload.exists ? this.update(ref, data) : this.set(ref, data); \n        } ); \n    } \n    /// ************** /// Inspect Data /// ************** \n    inspectDoc(ref: DocPredicate<any>): void { \n        const tick = new Date().getTime(); \n        this.doc(ref).snapshotChanges().pipe( \n            take(1), \n            tap( ( d: Action< DocumentSnapshotDoesNotExist | DocumentSnapshotExists<any> > ) => { \n                const tock = new Date().getTime() - tick; console.log(Loaded Document in ${tock}ms, d); } ) ).subscribe(); } inspectCol(ref: CollectionPredicate<any>): void { const tick = new Date().getTime(); this.col(ref).snapshotChanges().pipe( take(1), tap((c: DocumentChangeAction<any>[]) => { const tock = new Date().getTime() - tick; console.log(Loaded Collection in ${tock}ms, c); }) ).subscribe(); } /// ************** /// Create and read doc references /// ************** /// create a reference between two documents connect(host: DocPredicate<any>, key: string, doc: DocPredicate<any>) { return this.doc(host).update({ [key]: this.doc(doc).ref }); } /// returns a documents references mapped to AngularFirestoreDocument docWithRefs$<T>(ref: DocPredicate<T>) { return this.doc$(ref).pipe( map((doc: T) => { for (const k of Object.keys(doc)) { if (doc[k] instanceof firebase.firestore.DocumentReference) { doc[k] = this.doc(doc[k].path); } } return doc; }) ); } /// ************** /// Atomic batch example /// ************** /// Just an example, you will need to customize this method. atomic() { const batch = firebase.firestore().batch(); /// add your operations here const itemDoc = firebase.firestore().doc('items/myCoolItem'); const userDoc = firebase.firestore().doc('users/userId'); const currentTime = this.timestamp; batch.update(itemDoc, { timestamp: currentTime }); batch.update(userDoc, { timestamp: currentTime }); /// commit operations return batch.commit(); } /** * Delete a collection, in batches of batchSize. Note that this does * * not recursively delete subcollections of documents in the collection * * from: https://github.com/AngularFirebase/80-delete-firestore-collections/blob/master/src/app/firestore.service.ts */ deleteCollection(path: string, batchSize: number): Observable<any> { const source = this.deleteBatch(path, batchSize); // expand will call deleteBatch recursively until the collection is deleted return source.pipe( expand(val => this.deleteBatch(path, batchSize)), takeWhile(val => val > 0) ); } // Detetes documents as batched transaction private deleteBatch(path: string, batchSize: number): Observable<any> { const colRef = this.aFirestore.collection(path, ref => ref.orderBy('__name__').limit(batchSize) ); return colRef.snapshotChanges().pipe( take(1), mergeMap((snapshot: DocumentChangeAction<{}>[]) => { // Delete documents in a batch const batch = this.aFirestore.firestore.batch(); snapshot.forEach(doc => { batch.delete(doc.payload.doc.ref); }); return from(batch.commit()).pipe(map(() => snapshot.length)); }) ); } } \n```\n\n## Update Firstore Service\n\n```\nimport { Author } from './../models/author'; \nimport { Injectable } from '@angular/core'; \nimport { AngularFirestore } from '@angular/fire/firestore'; \nimport { Observable } from 'rxjs'; \nimport { Book } from '../models/book'; \nimport { switchMap } from 'rxjs/operators'; \nimport { AngularfirebaseService } from './angularfirebase.service'; \nimport { Chapter } from '../models/chapter'; \nimport { Section } from '../models/section'; \nimport { Graphicnovel } from '../models/graphicnovel'; \n\n@Injectable({ providedIn: 'root' }) \n\nexport class FirestoreService { \n    constructor(private afb: AngularfirebaseService) {} \n    // Books \n    getBooks(): Observable<Book[]> { \n        // Start Using AngularFirebase Service!! \n        return this.afb.colWithIds$<Book[]>('books'); \n    } \n    getBook(bookId: string): Observable<Book> { \n        // Start Using AngularFirebase Service!! \n        return this.afb.doc$<Book>(books/${bookId}); } // Chapters getBookChapters(bookId: string): Observable<Chapter[]> { return this.afb.colWithIds$<Chapter[]>(books/${bookId}/chapters); } getBookChapter(bookId: string, chapterId: string): Observable<Chapter> { // Start Using AngularFirebase Service!! return this.afb.doc$<Chapter>(books/${bookId}/chapters/${chapterId}); } // Sections getBookSections(bookId: string, chapterId: string): Observable<Section[]> { // return this.fs.collection('books').doc(bookId).collection('chapters').doc(chapterId).collection('sections').valueChanges(); // or you can use string template return this.afb.colWithIds$<Section[]>( books/${bookId}/chapters/${chapterId}/sections ); } getBookSection( bookId: string, chapterId: string, sectionId: string ): Observable<Section> { // Start Using AngularFirebase Service!! return this.afb.doc$<Section>( books/${bookId}/chapters/${chapterId}/sections/${sectionId} ); } // Get Authors getAuthors(): Observable<Author[]> { // Start Using AngularFirebase Service!! return this.afb.colWithIds$<Author[]>('authors'); } // Graphic Novels getGraphicNovels(): Observable<Graphicnovel[]> { // Start Using AngularFirebase Service!! return this.afb.colWithIds$<Graphicnovel[]>('graphicnovels'); } } \n```\n\n# Router Updates\n\nThe following routes are setup in order of which they will lazy load and be traversed to display the books path.\n\n## App Router\n\nNeed to update the main router to reference booksapp-routing.module.ts\n\n```\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n    {\n        path: 'welcome',\n        loadChildren: './modules/welcome/welcome.module#WelcomeModule'\n    },\n    {\n        path: 'books',\n        loadChildren: './modules/books/books.module#BooksModule'\n    },\n    { path: 'kitchensink', loadChildren: './modules/kitchensink/kitchensink.module#KitchensinkModule' }, \n    { path: '', redirectTo: '/books', pathMatch: 'full' }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)], exports: [RouterModule]\n})\nexport class AppRoutingModule { } \n```\n\n## Book Top Level Router\n\nIn our updated setup for our book router we need to lazy load the book list (for all of our books), as well as the book detail (for a single book).books-routing.modules.ts\n\n```\nimport { BooksComponent } from './books.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: BooksComponent,\n        children: [\n            { path: '', loadChildren: './book-list/book-list.module#BookListModule' },\n            { path: ':bookId', loadChildren: './book-detail/book-detail.module#BookDetailModule' }\n        ]\n    }];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class BooksRoutingModule { } \n```\n\n## Book Detail Router\n\nRemember this is where we added the named outlet in the last lesson `book-drawer`. This component is where we will focus on loading our new tree.\n\n```\nimport { BookDrawerComponent } from './../book-drawer/book-drawer.component';\nimport { BookDetailComponent } from './book-detail.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n    { path: '', component: BookDetailComponent },\n    { path: '', component: BookDrawerComponent, outlet: 'book-drawer' }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\n\nexport class BookDetailRoutingModule { } \n```\n\n# Component Updates\n\nNow that we have all the plumbing set we can add a new component to our `book-drawer` component.\n\n## Create book-list\n\nWe need to first be able to select a book before navigating to the book detail. For this we will create a book-list module.\n\n```\nng g m modules/books/book-list && ng g c modules/books/book-list \n```\n\n### Expansion Panel for book-list\n\n```\n<mat-accordion [displayMode]=\"'flat'\">\n    <mat-expansion-panel [expanded]=\"rlaBooks.isActive\">\n        <mat-expansion-panel-header>\n            <mat-panel-title routerLink=\"/books\" routerLinkActive=\"active-link\" (click)=\"$event.stopPropagation()\"\n                #rlaBooks=\"routerLinkActive\">Books</mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-nav-list class=\"nav-links\"> <a mat-list-item [routerLink]=\"['/books', book.id]\"\n                routerLinkActive=\"active-link\" *ngFor=\"let book of (bookList | async)\">\n                <h4 matLine>{{ book.title }}</h4>\n            </a> </mat-nav-list>\n    </mat-expansion-panel>\n    <mat-expansion-panel>\n        <mat-expansion-panel-header>\n            <mat-panel-title>Graphic Novels</mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-nav-list class=\"nav-links\"> <a mat-list-item [routerLink]=\"['/graphicnovels', gn.id]\"\n                routerLinkActive=\"active-link\" *ngFor=\"let gn of (graphicNovelList | async)\">\n                <h4 matLine>{{ gn.title }}</h4>\n            </a> </mat-nav-list>\n    </mat-expansion-panel>\n    <mat-expansion-panel>\n        <mat-expansion-panel-header>\n            <mat-panel-title (click)=\"$event.stopPropagation()\">Authors</mat-panel-title>\n        </mat-expansion-panel-header>\n        <mat-nav-list class=\"nav-links\"> <a mat-list-item [routerLink]=\"['/authors', author.id]\"\n                routerLinkActive=\"active-link\" *ngFor=\"let author of (authorList | async)\">\n                <h4 matLine>{{ author.name }}</h4>\n            </a> </mat-nav-list>\n    </mat-expansion-panel>\n</mat-accordion>\n```\n\n### Populating the expansion panel\n\nUse the firestore service to populate the Observables for each book.\n\n```\n@Component({\n    selector: 'app-book-list',\n    templateUrl: './book-list.component.html',\n    styleUrls: ['./book-list.component.scss']\n})\n\nexport class BookListComponent implements OnInit { \n    bookList: Observable<Book[]>; \n    graphicNovelList: Observable<Graphicnovel[]>; \n    authorList: Observable<Author[]>; \n\n    constructor(private fs: FirestoreService, private router: Router) { } \n\n    ngOnInit() { \n        this.bookList = this.fs.getBooks(); \n        this.graphicNovelList = this.fs.getGraphicNovels(); \n        this.authorList = this.fs.getAuthors(); \n    } \n} \n```\n\n## Create book-tree\n\n```\nng g m modules/books/book-tree && ng g c modules/books/book-tree \n```\n\n```\n<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n    <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding> <button mat-icon-button disabled></button> <button\n            mat-button (click)=\"section(node)\">{{ node.item }}</button> </mat-tree-node>\n    <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding> <button mat-icon-button\n            [attr.aria-label]=\"'toggle ' + node.filename\" matTreeNodeToggle>\n            <mat-icon class=\"mat-icon-rtl-mirror\"> {{ treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right' }}\n            </mat-icon>\n        </button> {{ node.item }} <mat-progress-bar *ngIf=\"node.isLoading\" mode=\"indeterminate\"\n            class=\"example-tree-progress-bar\"></mat-progress-bar>\n    </mat-tree-node>\n</mat-tree>\n```\n\nI will break down this entire comopnent in further detail below, for now here is the code.\n\n```\nimport { Book } from 'src/app/core/models/book';\nimport { Injectable, Component, OnInit, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, Observable, merge, Subscription } from 'rxjs';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { FirestoreService } from 'src/app/core/services/firestore.service';\nimport { CollectionViewer, SelectionChange } from '@angular/cdk/collections';\nimport { map, tap, take } from 'rxjs/operators';\nimport { Chapter } from 'src/app/core/models/chapter';\nimport { Section } from 'src/app/core/models/section';\n/** Flat node with expandable and level information */\n\nexport class DynamicFlatNode {\n    constructor(\n        public item: string,\n        public level = 1,\n        public expandable = false,\n        public isLoading = false,\n        public book?: Book,\n        public chapter?: Chapter,\n        public section?: Section\n    ) { }\n}\n\n@Injectable() export class DynamicDataSource {\n    dataChange = new BehaviorSubject<DynamicFlatNode[]>([]); bookTree = {};\n    subscriptions: Subscription[] = [];\n    get data(): DynamicFlatNode[] {\n        return this.dataChange.value;\n    }\n    set data(value: DynamicFlatNode[]) {\n        this.treeControl.dataNodes = value;\n        this.dataChange.next(value);\n    }\n\n    constructor(\n        private treeControl: FlatTreeControl<DynamicFlatNode>,\n        private route: ActivatedRoute,\n        private fs: FirestoreService,\n        private router: Router) {\n\n        /** Initial data from database */\n        this.subscriptions.push(\n            this.route.queryParams.subscribe(params => { console.log(params); })\n        );\n        this.subscriptions.push(\n            this.route.paramMap.subscribe(paramMap => {\n                const bookId = paramMap.get('bookId');\n                this.fs.getBookChapters(bookId).subscribe(chapters => {\n                    const nodes: DynamicFlatNode[] = [];\n                    chapters.sort((a, b) => (a.sort < b.sort ? -1 : 1));\n                    chapters.forEach(chapter => nodes.push(\n                        new DynamicFlatNode(chapter.title, 0, true, false, { id: bookId }, chapter)\n                    ));\n                    this.data = nodes;\n                });\n            })\n        );\n    }\n    connect(collectionViewer: CollectionViewer): Observable<DynamicFlatNode[]> {\n        this.treeControl.expansionModel.onChange.subscribe(change => {\n            if ((change as SelectionChange<DynamicFlatNode>).added || (change as SelectionChange<DynamicFlatNode>).removed) {\n                this.handleTreeControl(change as SelectionChange<DynamicFlatNode>);\n            }\n        });\n        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n    }\n    /** Handle expand/collapse behaviors */\n    handleTreeControl(change: SelectionChange<DynamicFlatNode>) {\n        if (change.added) { change.added.forEach(node => this.toggleNode(node, true)); }\n        if (change.removed) {\n            change.removed.slice().reverse().forEach(node =>\n                this.toggleNode(node, false)\n            );\n        }\n    }\n    /** * Toggle the node, remove from display list */\n    toggleNode(node: DynamicFlatNode, expand: boolean) {\n        const index = this.data.indexOf(node);\n        node.isLoading = true;\n        if (expand) {\n            this.subscriptions.push(\n                this.fs.getBookSections(node.book.id, node.chapter.id).subscribe(async sections => {\n                    console.log(sections);\n                    const nodes: DynamicFlatNode[] = [];\n                    sections.sort((a, b) => (a.sort < b.sort ? -1 : 1));\n                    sections.forEach(section => nodes.push(new DynamicFlatNode(section.title, 1, false, false, node.book, node.chapter, section)));\n                    this.data.splice(index + 1, 0, ...nodes);\n                    this.dataChange.next(this.data);\n\n                    // Update query params on current chapter \n                    await this.router.navigate([], { relativeTo: this.route, queryParams: { chapterId: node.chapter.id }, queryParamsHandling: 'merge' });\n\n                    // Remove any left over section params \n                    await this.router.navigate([], { relativeTo: this.route, queryParams: { sectionId: '' }, queryParamsHandling: 'merge' });\n                    node.isLoading = false;\n                }));\n        }\n        else {\n            let count = 0; for (let i = index + 1; i < this.data.length && this.data[i].level > node.level; i++ , count++) { } this.data.splice(index + 1, count);\n            // notify the change \n            this.dataChange.next(this.data); node.isLoading = false;\n        }\n    }\n}\n\n@Component({\n    selector: 'app-book-tree',\n    templateUrl: './book-tree.component.html',\n    styleUrls: ['./book-tree.component.scss']\n})\n\nexport class BookTreeComponent implements OnInit, OnDestroy {\n    treeControl: FlatTreeControl<DynamicFlatNode>;\n    dataSource: DynamicDataSource;\n\n    constructor(\n        private route: ActivatedRoute,\n        private fs: FirestoreService,\n        private router: Router) {\n        this.treeControl = new FlatTreeControl<DynamicFlatNode>(\n            this.getLevel, this.isExpandable\n        );\n        this.dataSource = new DynamicDataSource(\n            this.treeControl,\n            this.route,\n            this.fs,\n            this.router\n        );\n    }\n\n    ngOnInit() { }\n    ngOnDestroy() {\n        this.dataSource.subscriptions.forEach(s => { s.unsubscribe(); });\n    }\n    section(node: DynamicFlatNode) {\n        // Update query params on current chapter \n        this.router.navigate([], { relativeTo: this.route, queryParams: { sectionId: node.section.id }, queryParamsHandling: 'merge' });\n    }\n    getLevel = (node: DynamicFlatNode) => node.level;\n    isExpandable = (node: DynamicFlatNode) => node.expandable;\n    hasChild = (_: number, _nodeData: DynamicFlatNode) => _nodeData.expandable;\n} \n```\n\n### Reference book-tree inside book-drawer\n\nWe can now update `book-drawer`.book-drawer.component.html\n\n```\n<app-book-tree></app-book-tree> \n```\n\nPlease make sure to also import `BookTreeModule` in `book-drawer.module.ts`.\n\n```\n... imports: [CommonModule, BookTreeModule], ... \n```\n\n# Tree\n\n[Angular Material Tree](https://material.angular.io/components/tree/overview)\n\n## Breaking down the dynamic Tree\n\nThere are two key directives that drive the dynamic tree `dataSource` and `treeControl`.\n\n- dataSource: Provides a stream containing the latest data array to render. Influenced by the tree's stream of view window (what dataNodes are currently on screen). Data source can be an observable of data array, or a data array to render.\n- treeControl: Controls layout and functionality of the visual tree.\n\nbook-tree.comopnent.html\n\n```\n<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\"> \n```\n\n### dataSource\n\nIn our example we assign dataSource to a new object from class `DynamicDataSource`. This class is passed off the necessary dependency injected classes that we will need from our `BookTreeComponent`.\n\n```\n this.dataSource = new DynamicDataSource( this.treeControl, this.route, this.fs, this.router ); \n```\n\n### DynamicDataSource\n\nThe `DynamicDataSource's` main job is to get initial data for the setup of the tree, control the flow of any additional data, and react when the tree is toggled.The data type that we are using in our tree is defined by class `DynamicFlatNode`, this class holds the data that we use throughout our tree as an array. Maybe better put our Tree is made up of an Array of `DynamicFlatNode`.\n\n```\nexport class DynamicFlatNode { \n    constructor( \n        public item: string, \n        public level = 1, \n        public expandable = false, \n        public isLoading = false, \n        public book?: Book, \n        public chapter?: Chapter, \n        public section?: Section \n    ) {} \n} \n```\n\nYou can see in the first line of `DynamicDataSource` that we create a new BehaviorSubject for the array. This makes essentially an empty array for the tree's `dataSource`.\n\n```\nexport class DynamicDataSource { dataChange = new BehaviorSubject<DynamicFlatNode[]>([]); \n```\n\nFor our example we set the initial data for this by subscribing to our `bookId` and getting the corresponding book's chapters. You will notice that we create a `DynamicFlatNode` Object and add that to the array `nodes`. We then assign `DynamicDataSource`'s `data` property the array that we have created.\n\n```\n/** Initial data from database */\nthis.subscriptions.push(\n    this.route.paramMap.subscribe(paramMap => {\n        const bookId = paramMap.get('bookId');\n        this.fs.getBookChapters(bookId).subscribe(chapters => {\n            const nodes: DynamicFlatNode[] = [];\n            chapters.sort((a, b) => (a.sort < b.sort ? -1 : 1));\n            chapters.forEach(chapter => nodes.push(\n                new DynamicFlatNode(\n                    chapter.title,\n                    // chapter \n                    title 0,\n                    // Tree Level \n                    true,\n                    // Expandable \n                    false,\n                    // Is Loading \n                    { id: bookId },\n                    // Object representing book \n                    chapter\n                    // Object for our current Chapter from firestore \n                ))); \n            this.data = nodes;\n        });\n    })); \n```\n",
    "iso8601Date": "2019-01-22T00:00:00-05:00",
    "basename": "angular-material-dynamic-navigation-using-firestore"
  },
  "angular-material-forms-from-firestore": {
    "title": "Angular Material Forms from Firestore",
    "date": "2019-01-22",
    "preview": "https://youtu.be/LLupkLEszdY\n\n# Angular Material Forms from …",
    "content": "\n\nhttps://youtu.be/LLupkLEszdY\n\n# Angular Material Forms from Firestore\n\n???? [Demo](https://ajonp-lesson-12.firebaseapp.com/books/FirstBook/edit)This lesson will cover how to create all of the [Angular Material Form Components](https://material.angular.io/components/categories/forms), the data behind many of them will be coming from [Cloud Firestore](https://firebase.google.com/docs/firestore/).\n\n# Setup\n\nWe will start this lesson from where we left off on [Angular Navigation Firestore](https://ajonp.com/courses/angularmaterial/angular-material-dynamic-navigation-using-firestore)\n\n## Source from Prior lesson[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#source-from-prior-lesson)\n\nClone\n\n```\ngit clone https://github.com/AJONPLLC/lesson11-angular-navigation-firestore.git lesson12-angular-material-forms-firestore \n```\n\nRemove Origin, just always easier up front if you want to add this to your own repo (or again you can fork and just clone.)\n\n```\ngit remote rm origin \n```\n\n## Install Dependencies[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#install-dependencies)\n\nMake sure you are in the correct directory `cd lesson12-angular-material-forms-firestore`.\n\n```\nnpm install \n```\n\n# Book Edit Module\n\n## Create[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#create)\n\nUsing the Angular CLI create the module with routing and corresponding component.\n\n```\nng g m modules/books/book-edit --routing && ng g c modules/books/book-edit \n```\n\n# Router updates\n\n## books-routing.module.ts[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#books-routingmodulets)\n\nAdd new lazy loaded path so that our main books-routing knows where to send requests for edit.\n\n```\n... { path: ':bookId/edit', loadChildren: './book-edit/book-edit.module#BookEditModule' } ... \n```\n\n## book-edit-routing.module.ts[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#book-edit-routingmodulets)\n\nNow that we are in the book-edit module make sure it has a path to the book-edit Component.\n\n```\n... const routes: Routes = [ { path: '', component: BookEditComponent } ]; ... \n```\n\n## Serve the edit path[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#serve-the-edit-path)\n\nStartup the server\n\n```\nng serve \n```\n\nNow that our router is all setup we should start to see the book-edit.component.html. Because we don't have a way to navigate to this path yet just type it in the url bar manually `localhost:4200/books/FirstBook/edit`.You should see\n\n### book-edit works![](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#book-edit-works)\n\n# Update Book Edit\n\n## Structure[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#structure)\n\nTo give our form some structure we can now add Flex Layout and Material Card centered at 75% to give a nice look to our form.book-edit.component.html\n\n```\n<div fxLayout=\"column\" fxLayoutAlign=\"space-around center\"> \n    <mat-card style=\"width: 75%; margin-bottom: 100px;\"> \n        <mat-card-content> </mat-card-content> \n        <mat-card-actions> \n            <button mat-button>Ok</button> \n        </mat-card-actions> \n    </mat-card> \n</div> \n```\n\nBecause these are new Elements we need to import them into our Book Edit module. book-edit.module.ts\n\n```\nimport { FlexLayoutModule } from '@angular/flex-layout'; \nimport {MatCardModule} from '@angular/material'; \n\n... \n\n@NgModule({ declarations: [BookEditComponent], imports: [ CommonModule, BookEditRoutingModule, FlexLayoutModule, MatCardModule, ] }) \n\n... \n```\n\n## Getting Firestore Data for Book Edit[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#getting-firestore-data-for-book-edit)\n\nBecause we are now navigating to an area that uses Angular router and part of the path contains a specified paramter id `:bookId/edit` we can get this `bookId` from the currently Activated Route. In order to do this we need to use dependency injection and provide this in our constructor. To then fetch that data from our `FirestoreService` we can then inject this service as well.\n\n```\nsubs: Subscription[] = []; \nbook$: Observable<Book>; \n\nconstructor(private router: ActivatedRoute, private fs: FirestoreService) {} \nngOnInit() { \n    // Get bookId for book document selection from Firestore \n    this.subs.push( \n        this.router.paramMap.subscribe(params => { \n            const bookId = params.get('bookId'); \n            this.book$ = this.fs.getBook(bookId); \n        }) \n    );\n}\n```\n\nBy calling the firestore `getBook` function and passing in the current parameter `bookId` we now have an Observable reference to the Firestore data.firestore.service.ts\n\n```\ngetBook(bookId: string): Observable<Book> { \n    // Start Using AngularFirebase Service!! \n    return this.afb.doc$<Book>(books/${bookId}); \n} \n```\n\n> This is a cool wrapper that Jeff over at [fireship.io](https://angularfirebase.com/lessons/firestore-advanced-usage-angularfire/) created. Feel free to copy this service and use it as a nice wrapper for all of your projects, I won't include the two calls as we move forward angularfirebase.service.ts\n\n```\n doc$<T>(ref: DocPredicate<T>): Observable<T> { return this.doc(ref) .snapshotChanges() .pipe( map( ( doc: Action< DocumentSnapshotDoesNotExist | DocumentSnapshotExists<T> > ) => { return doc.payload.data() as T; } ) ); } \n```\n\nExample of Book Data in Firestore Console:\n\n![Book Data](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1548959741/ajonp-ajonp-com/11-lesson-angular-navigation-firestore/yep4ngt60x0ki8jocisx.png)\n\nIn the snippet above we are also pushing our RxJs Subscription into an array so that we can then loop through any subscriptions during the destroy method and unsubscribe. This is a pattern I often use when I cannot use `pipe(take(1))` or `| async`.\n\n```\nngOnDestroy() { \n    this.subs.forEach(sub => { \n        sub.unsubscribe(); \n    }); \n} \n```\n\n## Using Firestore Data Inside of Template[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#using-firestore-data-inside-of-template)\n\nWe can not use our new `book$` Observable in our template to show any of the current data. We can update our card to show only when the book data is available, otherwise show a Material Spinner. You can read more on how the [NgIf](https://angular.io/api/common/NgIf) directive works in the Angular docs if you are unfamiliar.\n\n```\n<mat-card *ngIf=\"(book$ | async); let book; else: spin\" style=\"width: 75%; margin-bottom: 100px;\"> \n    <mat-card-title>{{book.title}}</mat-card-title> \n    ... \n    <ng-template #spin>\n        <mat-spinner></mat-spinner>\n    </ng-template> \n```\n\nCurrent title:\n\n![Title View](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1548960658/ajonp-ajonp-com/11-lesson-angular-navigation-firestore/oclrlecxgwgbhbooidhg.png)\n\n## Adding Form Input[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#adding-form-input)\n\n> Just a warning here, if you want to see detailed [Angular Reactive Form](https://angular.io/guide/reactive-forms) usage this will be done in the next lesson.\n\nNow that we know our Observable is working successfully we can now change the card title out and start switching our card into several form inputs.For this we will need to include `FormsModule`, `ReactiveFormsModule`, `MatFormFieldModule`, and `MatInputModule` into our Book Edit Module.book-edit.module.ts\n\n```\n imports: [ CommonModule, BookEditRoutingModule, FlexLayoutModule, MatCardModule, FormsModule, ReactiveFormsModule, MatFormFieldModule, MatInputModule, \n```\n\n### Title Input[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#title-input)\n\n![Title Input](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1548961254/ajonp-ajonp-com/12-angular-material-from-firestore/bvls9ivndkkacihjr2hp.png)\n\nThe entire Material Card should now look like below, the new div surrounding the card is just to allow each section to flow in its own row of the column. If you have not used [Flex Layout](https://github.com/angular/flex-layout/wiki/fxFlex-API) check out the details.book-edit.component.html\n\n```\n <mat-card *ngIf=\"(book$ | async); let book; else: spin\" style=\"width: 75%; margin-bottom: 100px;\" > <mat-card-content> <div fxLayout=\"column\" fxLayoutAlign=\"space-around stretch\"> <section> <mat-form-field style=\"width: 100%\"> <input matInput placeholder=\"Title\" [(ngModel)]=\"book.title\" /> </mat-form-field> </section> </div> </mat-card-content> <mat-card-actions> <button mat-button>Ok</button> </mat-card-actions> </mat-card> \n```\n\nAbove we have our first two components-[Form Field](https://material.angular.io/components/form-field/overview) which you can think of as a wrapper to all of our components allowing for styling of the other form fields.-[Input](https://material.angular.io/components/input/overview) the key with this is the directive `matInput`, this will allow you to use a native `<input>` or `<textarea>` correctly styled within `<mat-form-field>`.\n\n> If you see any issues at this point, make sure you have imported all the modules into `book-edit.module.ts`\n\nFor an extra you can checkout the textarea example too.\n\n```\n<mat-card *ngIf=\"(book$ | async); let book; else: spin\" style=\"width: 75%; margin-bottom: 100px;\"> \n    <mat-card-content> \n        <div fxLayout=\"column\" fxLayoutAlign=\"space-around stretch\"> \n            <section> \n                <mat-form-field style=\"width: 100%\"> \n                    <input matInput placeholder=\"Title\" [(ngModel)]=\"book.title\" /> \n                </mat-form-field> \n            </section> \n        </div> \n    </mat-card-content> \n    <mat-card-actions> \n        <button mat-button>\n            Ok\n        </button> \n    </mat-card-actions> \n</mat-card> \n```\n\n### Slide Toggle[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#slide-toggle)\n\n![Slide Toggle](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1548961935/ajonp-ajonp-com/11-lesson-angular-navigation-firestore/m2ox1ibaek2ybrj9wdsr.png)\n\n\\-[Slide Toggle](https://material.angular.io/components/slide-toggle/overview) is a very simple comoponent that is either on or off (binary).book-edit.module.ts\n\n```\n imports: [ ... MatSlideToggleModule, \n```\n\nFor our requirement we are going to use this to determine whether a book is Fiction or non-fiction.We will set the default `fictionSelected = true;` so that Fiction is set first.book-edit.component.ts\n\n```\nexport class BookEditComponent implements OnInit, OnDestroy { \n    subs: Subscription[] = []; \n    book$: Observable<Book>; \n    fictionSelected = true; \n}\n```\n\nbook-edit.component.html\n\n```\n<section> \n    <mat-slide-toggle [checked]=\"fictionSelected\" (change)=\"fictionChange($event)\" #ficToggle > \n        <p *ngIf=\"ficToggle.checked; else nonFic\">Fiction</p> \n    </mat-slide-toggle> \n</section>\n```\n\nYou can see that our input directive `checked` (denoted by `[]`), will now take the value of `fictionSelected` and every time the toggle is changed we will use the output directive `change` (denoted by `()`) to trigger function `fictionChange` passing in the current components instance of the event `$event`. You can read more about [DOM event payloads](https://angular.io/guide/user-input#get-user-input-from-the-event-object).book-edit.component.ts\n\n```\n fictionChange(e) { this.fictionSelected = e.checked; this.genreControl.reset(); } \n```\n\n### Autocomplete[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#autocomplete)\n\n- [Autocomplete](https://material.angular.io/components/autocomplete/overview) is just another input type in our case for text. However it also has a Panel that is associated to provide a list of options. For our use case it will list out two different lists based on our Slide Toggle. So we will either filter the Genere Fiction list of values, or a Non-Fiction list of values.\n\nbook-edit.module.ts\n\n```\n imports: [ ... MatAutocompleteModule, \n```\n\nThese two lists will be contained in a new collection at the base of our Firestore Database called `config`. Within our `config` collection we will create a document called `book`, which will hold many of our different configurations. For these two specifically they will be arrays that are on the `book` object.\n\n![Firestore Fiction/Non-Fiction](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1548964455/ajonp-ajonp-com/11-lesson-angular-navigation-firestore/vnxbzg5fnpnuoevun1nu.png)\n\nFirst we will create our Observable to the Config Book object. book-edit.component.ts\n\n```\nbookConfig$: Observable<ConfigBook>; \n... \n\n// Set Book Config \n\nthis.bookConfig$ = this.fs.getConfigBook(); \n```\n\nCreate the `ConfigBook` Interface for our type.\n\n```\nng g i core/models/config-book \n```\n\nconfig-book.ts\n\n```\nexport interface ConfigBook { \n    ageCategory?: Array<string>; \n    fiction?: Array<string>; \n    nonFiction?: Array<string>; \n}\n```\n\nThen we can will grab the first set of values emitted from Firestore and send those out as a [BehaviorSubject](http://reactivex.io/rxjs/manual/overview.html#behaviorsubject) with type `ConfigBook`. Our toggle has set `this.fictionSelected` so we can determine what list should be emitted in `this.genereList$`.book-edit.component.ts\n\n```\nexport class BookEditComponent implements OnInit, OnDestroy { \n    ...\n    genreControl = new FormControl(); \n    ...\n    // Set default Genere \n    this.bookConfig$.pipe(take(1)).subscribe(bookConfig => {\n        this.subs.push(\n            this.genreControl.valueChanges.pipe(startWith('')).subscribe(value => {\n                const filterValue = value ? value.toLowerCase() : '';\n                if (this.fictionSelected) {\n                    this.genreList$.next(\n                        bookConfig.fiction.filter(option => option.toLowerCase().includes(filterValue))\n                    );\n                }\n                else {\n                    this.genreList$.next(\n                        bookConfig.nonFiction.filter(option => option.toLowerCase().includes(filterValue))\n                    );\n                }\n            })\n        );\n    }); \n}\n```\n\nYou will also notice above the we have subscribed to any of the `valueChanges` that are happening on our new `genreControl`. Below you will see that `formControl` input directive is passed our class parameter `genreControl` which is an instance of `FormControl`. We will dive into all of the `@angular/forms` in more detail in the next lesson. For our sake here just know that this allows us to check all of the changing values as you type. When we start to type it uses the arrays that we have passed in from Firestore and filters them based on the string we are inputing using either `bookConfig.fiction.filter` or `bookConfig.nonFiction.filter`.\n\n```\n<section> \n    <mat-form-field style=\"width: 100%\"> \n        <input \n            name=\"genre\" \n            type=\"text\" \n            matInput \n            [formControl]=\"genreControl\" \n            [matAutocomplete]=\"auto\" \n            placeholder=\"Genre\" \n            aria-label=\"Genre\" \n        /> \n    </mat-form-field> \n    <mat-autocomplete #auto=\"matAutocomplete\"> \n        <mat-option *ngFor=\"let genre of (genreList$ | async)\" [value]=\"genre\" > \n            {{ genre }} \n        </mat-option> \n    </mat-autocomplete> \n</section> \n```\n\nAbove we are listening to the updates from `genreList$` BehaviorSubject to create our `<mat-option>` list of values. Our input has an input directive `[matAutocomplete]=\"auto\"` to attach this `<mat-autocomplete>` by assigning the instance variable `#auto` to the input using `matAutocomplete`.\n\n### Checkbox[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#checkbox)\n\n![Checkbox](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1548966370/ajonp-ajonp-com/11-lesson-angular-navigation-firestore/hhk37heauwmp6ns7minw.png)\n\n> Take a deep breath there was a lot going on with the Autocomplete, the rest get a lot easier ????\n\n- [Checkbox](https://material.angular.io/components/checkbox/overview) is again providing the same functionality as the native `<input type=\"checkbox\">` enhanced with Material Design.\n\nbook-edit.module.ts\n\n```\n imports: [ ... MatCheckboxModule, \n```\n\n![Firestore Config](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1548966831/ajonp-ajonp-com/11-lesson-angular-navigation-firestore/caewhsmpkrkxdo1dcj2d.png)\n\nFor us this contains some more of the configuration items from our book, because we already have an Observable created in `bookConfig$` we can just tell Angular to listen for this and assign it to our local template variable `bookConfig`. We then are just assigning these to the directive [NgModel](https://angular.io/api/forms/NgModel). This is a two way binding, for our example doesn't mean much, but again we will drive these things home further in the next lesson.\n\n```\n<section *ngIf=\"(bookConfig$ | async); let bookConfig\">\n    <h3>Options</h3> \n    <div fxLayout=\"column\"> \n        <mat-checkbox [(ngModel)]=\"bookConfig.options.hasAudio\"> \n            Audio \n        </mat-checkbox> \n        <mat-checkbox [(ngModel)]=\"bookConfig.options.hasPhotos\"> \n            Photos \n        </mat-checkbox> \n        <mat-checkbox [(ngModel)]=\"bookConfig.options.hasVideos\"> \n            Videos \n        </mat-checkbox> \n    </div> \n</section> \n```\n\n### Datepicker[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#datepicker)\n\n![Date Picker](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1548967267/ajonp-ajonp-com/11-lesson-angular-navigation-firestore/eaz6tqu7haioisymv83l.png)\n\n- [Datepicker](https://material.angular.io/components/datepicker/overview) The datepicker allows users to enter a date either through text input, or by choosing a date from the calendar. It is made up of several components and directives that work together.\n\n> Special note here you need `MatNativeDateModule` in addition to the `MatDatepickerModule`.\n\nbook-edit.module.ts\n\n```\n imports: [ ... MatDatepickerModule, MatNativeDateModule \n```\n\nThis is just creating the pre canned datepicker. We don't have any data that will will bring in currently to update this field. We will cover this in the next lesson.book-edit.component.html\n\n```\n<section> \n    <mat-form-field> \n        <input matInput [matDatepicker]=\"picker\" placeholder=\"Publish Date\" /> \n        <mat-datepicker-toggle matSuffix [for]=\"picker\" ></mat-datepicker-toggle>\n        <mat-datepicker #picker></mat-datepicker> \n    </mat-form-field> \n</section> \n```\n\n### Select[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#select)\n\n![Select](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1548967053/ajonp-ajonp-com/11-lesson-angular-navigation-firestore/wos1r5ksaofipa6fbmhb.png)\n\n- [Select](https://material.angular.io/components/select/overview) you can use either the Material Select, or the native select within the `<mat-form-field>`. The native control has several performance advantages...but I really like the style of using the Material Design.\n\nbook-edit.module.ts\n\n```\n imports: [ ... MatSelectModule, \n```\n\n> It would probably be better to unwrap our `bookConfig$` once in our template, but I wanted to keep each of these as seperate units.\n\nFor our book component we are once again going to get all of the age categories from our Config Book in Firestore and use those values for our select.\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/image-35.png)\n\n![Mat Select](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1548967697/ajonp-ajonp-com/11-lesson-angular-navigation-firestore/rxghw62n7jkgwdilxh80.png)\n\nbook-edit.component.html\n\n```\n<section> \n    <mat-form-field style=\"width: 100%\"> \n        <mat-select placeholder=\"Age Category\"> \n            <mat-option \n                *ngFor=\"let ageCategory of (bookConfig$ | async)?.ageCategory\" \n                [value]=\"ageCategory\" > \n                {{ ageCategory }} \n            </mat-option> \n        </mat-select> \n    </mat-form-field> \n</section> \n```\n\n### Slider[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#slider)\n\n![Slider](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1548967734/ajonp-ajonp-com/11-lesson-angular-navigation-firestore/j0hmgry94kxytkpaws0a.png)\n\n- [Slider](https://material.angular.io/components/slider/overview)`<mat-slider>` allows for the selection of a value from a range via mouse, touch, or keyboard, similar to `<input type=\"range\">`.\n\nbook-edit.module.ts\n\n```\n imports: [ ... MatSliderModule, \n```\n\nWe once again will not be doing anything with this value, but I did want to show you how to default the value on creation. Later we will tie this directly to the Firestore value for our book.book-edit.component.ts\n\n```\n bookRating = 3; \n```\n\nbook-edit.component.html\n\n```\n<section> \n    <h3>Rating</h3> \n    <mat-slider min=\"1\" max=\"5\" step=\"0.5\" value=\"1.5\" [(ngModel)]=\"bookRating\" >\n    </mat-slider> \n</section> \n```\n\n### Radio button[](https://codingcat.dev/courses/angularmaterial/angular-material-forms-from-firestore#radio-button)\n\n![Radio Button](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1548968040/ajonp-ajonp-com/11-lesson-angular-navigation-firestore/edkb9mkpmr46tkfjthr4.png)\n\n- [Radio button](https://material.angular.io/components/radio/overview)`<mat-radio-button>` provides the same functionality as a native `<input type=\"radio\">` enhanced with Material Design styling and animations.\n\nbook-edit.module.ts\n\n```\n imports: [ ... MatRadioModule, \n```\n\nFor us this will again in the future refer directly to a status on our Book, we could create these from a Firestore config, but I don't see us changing these options very often. If you want you could do the same loop as we did with the select option and add the config. In the next lesson we will add that config and show how to do a validation of sorts.book-edit-component.html\n\n```\n<section> \n    <h3>Status</h3> \n    <mat-radio-group [(ngModel)]=\"bookStatus\" fxLayout=\"column\"> \n        <mat-radio-button value=\"Draft\">Draft</mat-radio-button> \n        <mat-radio-button value=\"Published\">Published</mat-radio-button> \n    </mat-radio-group> \n</section> \n```\n\n# Wrap Up\n\nHere we have created all of the Angular Material Form Components, many of them with data being pulled from Firestore. Next is to make our form more Reactive.\n\n![Kitchen Sink](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1548968315/ajonp-ajonp-com/11-lesson-angular-navigation-firestore/dwg3vmpnxdsam560rvhr.png)\n",
    "iso8601Date": "2019-01-22T00:00:00-05:00",
    "basename": "angular-material-forms-from-firestore"
  },
  "angular-material-reactive-forms-update-firestore": {
    "title": "Angular Material Reactive Forms Update Firestore",
    "date": "2019-01-22",
    "preview": "https://youtu.be/92hYB6jivvQ\n\n## …",
    "content": "\n\nhttps://youtu.be/92hYB6jivvQ\n\n## Setup[](https://codingcat.dev/courses/angularmaterial/angular-material-reactive-forms-update-firestore#setup)\n\nWe can start from the previous lesson and build out our reactive forms. Previous Lesson: [Angular Material Forms Firestore](https://github.com/AJONPLLC/lesson12-angular-material-forms-firestore)\n\n```\ngit clone https://github.com/AJONPLLC/lesson12-angular-material-forms-firestore \n```\n\nThis will give us a solid base to start working from, however if you are creating a new firebase project you should change the environment/environment.ts file to match your firebase details. If you have never done this please see [Angular Navigation Firestore](https://ajonp.com/courses/angularmaterial/angular-material-dynamic-navigation-using-firestore) as this will provide more details on how to update.Make sure you update your npm packages\n\n```\nnpm install \n```\n\n# Update Book Model\n\nNavigate to src/app/core/models/book.ts so that we can update more details about the books that we will be adding and editing in the tutorial.You will notice a big change instead of using this as an interface which only allows for typing, using the class will allow us to create new objects based on our definition of Book. I really enjoy Todd Moto's description of this the most in [Classes vs Interfaces in Typescript](https://ultimatecourses.com/blog/classes-vs-interfaces-in-typescript).You can see here that we have also provided a constructor that allows for a Partial Book type to be provided that assigns this as a new book, without requiring a full object. You can read more about Partial [here](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-1.html). The Object assign will copy the values of all of the enumerable own properties from one or more source objects to a target object and returns the target object, which in our case will return a Book object.src/app/core/models/book.ts\n\n```\nimport { Timestamp } from '@firebase/firestore-types'; \n\nexport class Book { \n    ageCategory?: string; \n    description?: string; \n    fiction?: boolean; \n    genre?: string; \n    hasAudio?: boolean; \n    hasPhotos?: boolean; \n    hasVideos?: boolean; \n    id?: string; \n    publishDate?: Timestamp | Date; \n    rating?: number; \n    status?: string; \n    title?: string; \n\n    public constructor(init?: Partial<Book>) { \n        Object.assign(this, init); \n    } \n} \n```\n\n# Firestore Current Book Value to Form\n\n## Subscribing to book from Id[](https://codingcat.dev/courses/angularmaterial/angular-material-reactive-forms-update-firestore#subscribing-to-book-from-id)\n\n> Please note later I have updated the array push method of unsubscribing to a Subject and used `takeUntil(this.unsubscribe$)`.\n\nWhat we are doing here in the first part of the ngOnInit is subscribing to the router and getting our specified `bookId` and setting the global variable to store this off so that we can use this ID to fetch data about the current book.src/app/modules/books/book-edit/book-edit.component.ts\n\n```\nbookId: string; \n... \n\nngOnInit() { \n    // Get bookId for book document selection from Firestore \n    this.subs.push( this.route.paramMap.subscribe(params => { \n        this.bookId = params.get('bookId'); \n        this.rebuildForm(); \n    }));\n}\n```\n\n## Building (or rebuilding) Angular Form[](https://codingcat.dev/courses/angularmaterial/angular-material-reactive-forms-update-firestore#building-or-rebuilding-angular-form)\n\nWe can then use this to call the method `rebuildForm()` which will update any of the required bindings on our Angular Form. If we break down this method we can see that there is a line that sets the blobal `book$` variable Observable. Don't be confused by the `this.subs.push` you could even leave this out just for sake of the learning exercise (I would leave something to unsubsribe for a production app though).Next we have `this.book$.pipe(map(book` in which we are changing the `book.publishDate` which is a `Timestamp` over to a Javascript DateTime. This is necessary as our Angular Component is expecting this format.src/app/modules/books/book-edit/book-edit.component.ts\n\n```\nbookForm: FormGroup; \nbook$: Observable<Book>; \n\n... \n\nrebuildForm() { \n    if (this.bookForm) { \n        this.bookForm.reset(); \n    } \n\n    this.book$ = this.fs.getBook(this.bookId); \n    this.subs.push( \n        this.book$.pipe( \n            map(book => { \n                console.log(book.publishDate); \n                if (book.publishDate) { \n                    const timestamp = book.publishDate as Timestamp; \n                    book.publishDate = timestamp.toDate(); \n                } \n                return book; \n            }) \n        ).subscribe(book => { \n            this.bookForm = this.fb.group({ \n                ageCategory: [book.ageCategory, Validators.required], \n                description: [ book.description, [Validators.required, Validators.maxLength(500)] ], \n                fiction: [book.fiction || false, Validators.required], \n                genre: [book.genre, Validators.required], \n                asAudio: [book.hasAudio], \n                hasPhotos: [book.hasPhotos], \n                hasVideos: [book.hasVideos], \n                id: [book.id], \n                publishDate: [book.publishDate], \n                rating: [book.rating, Validators.required], \n                status: [book.status, Validators.required], \n                title: [book.title, [Validators.required, Validators.maxLength(50)]] \n            }); \n        }) \n    ); \n} \n```\n\n### Form Control using Form Builder[](https://codingcat.dev/courses/angularmaterial/angular-material-reactive-forms-update-firestore#form-control-using-form-builder)\n\nWe also subscribe to the Observable coming from Firestore using `this.book$.subscribe(book` in which we setup the global variable `bookForm` with the values coming from Firestore. We use the dependency injected [Form Builder](https://angular.io/guide/form-validation#adding-to-reactive-forms)`private fb: FormBuilder` or `fb` to create a form group with all of the necessary form controls.In our form we can then reference these controls, for instance `ageCategory: [book.ageCategory, Validators.required],` ageCategory is now a FormControl that has a default value from Firestore of `book.ageCategory` and it is also a required field based on `Validators.required`.You can see here that we then use `formControlName=\"ageCategory\"` in order to link that form control based on the name.\n\n```\n<mat-select placeholder=\"Age Category\" formControlName=\"ageCategory\" > \n```\n\nSome of the more interesting use cases for FormControl validation is with something like `title: [book.title, [Validators.required, Validators.maxLength(50)]]` which says our title cannot be longer than 50. Just a reminder this is all front end based, so someone could maliciously still add a longer book.title, so you need to make sure if this is a hard requirement that you adjust your firestore.rules accordingly.\n\n```\n<input matInput placeholder=\"Title\" formControlName=\"title\" /> \n```\n\n### Form Field Errors[](https://codingcat.dev/courses/angularmaterial/angular-material-reactive-forms-update-firestore#form-field-errors)\n\nLike magic (okay programming), if a fields validation is incorrect you will see an error appear.\n\n![Form Field](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/12-angular-material-from-firestore/sr7u3gojyeztganortmm.png)\n\nThis is handled via html with component `mat-error` this must be inside of `mat-form-field` like all of the Angular Material Form components. In our case we are showing two messages for title it is blank we show required, then if it is in error and not currently required we show that max length of 50.\n\n```\n<mat-form-field style=\"width: 100%\"> \n    <input matInput placeholder=\"Title\" formControlName=\"title\" /> \n    <mat-error *ngIf=\"!bookForm.get('title').hasError('required')\"> \n        Title has a max length of 50. \n    </mat-error>\n    <mat-error *ngIf=\"bookForm.get('title').hasError('required')\"> \n        Title is <strong>required</strong> \n    </mat-error> \n</mat-form-field> \n```\n\n### Form Submit Only Pristine[](https://codingcat.dev/courses/angularmaterial/angular-material-reactive-forms-update-firestore#form-submit-only-pristine)\n\nSome of the logic here looks a little backwards but because we are disabling the buttons everything is applied in reverse. For cancel we only care if data was changed so we check for `pristine` (entered data), for the submit button data must be pristine and also valid. Meaning none of the Validators can be false, like required and length.Before Data Entered, we only have option to cancel.\n\n![No Data](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/12-angular-material-from-firestore/u2cngx79xvpu9h1hfybp.png)\n\nAfter Data Entered if invalid we can only revert.\n\n![Bad Data](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/12-angular-material-from-firestore/jafwiibebcbqn7digvhe.png)\n\nFinally good data we can save.\n\n![Good Data](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/12-angular-material-from-firestore/fqqrn4hsnytvcadwag51.png)\n\n## Submit and Save data[](https://codingcat.dev/courses/angularmaterial/angular-material-reactive-forms-update-firestore#submit-and-save-data)\n\nOnce all the data is pristine and valid we can then push SAVE.\n\n```\n<button \n    mat-raised-button \n    color=\"primary\" \n    type=\"submit\" \n    [disabled]=\"bookForm.pristine || !bookForm.valid\" \n    aria-label=\"Save\" \n> \nSave \n</button> \n```\n\nThis button is within the form component and has this method being called `(ngSubmit)=\"saveBookChanges()\"`.\n\n```\n<form *ngIf=\"bookForm\" [formGroup]=\"bookForm\" (ngSubmit)=\"saveBookChanges()\" fxLayout=\"column\" > \n```\n\nWhen this calls the method `saveBookChanges` it will call the firestore updateBook `await this.fs.updateBook(book);` in which it waits before navigating back to the main books list. This is also where you could throw up a saving dialog before the await statement.You will notice the first thing that we did was create the `Book` class, this is where it becomes hugely valuable. We can directly pass the `bookForm.value` and it will create a new `Book` Object to make the update!\n\n```\nasync saveBookChanges() { \n    const book = new Book(this.bookForm.value); \n    await this.fs.updateBook(book); \n    this.router.navigate(['/books', this.bookId]); \n} \n```\n\n# Video\n\nI think the [video](https://youtu.be/92hYB6jivvQ) for this lesson is the best guide, don't forget to put those breakpoints in to see what is happening in all the calls, and open up Firestore to watch it auto update.\n",
    "iso8601Date": "2019-01-22T00:00:00-05:00",
    "basename": "angular-material-reactive-forms-update-firestore"
  },
  "angular-material-router-awareness": {
    "title": "Angular Material Router Awareness",
    "date": "2019-01-22",
    "preview": "https://youtu.be/3roNVbp3RPg\n\n##    …",
    "content": "\n\nhttps://youtu.be/3roNVbp3RPg\n\n##   \nSetup[](https://codingcat.dev/courses/angularmaterial/angular-material-router-awareness#setup)\n\nWe can start from the previous lesson and build out our material router. Previous Lesson: [Angular Material Reactive Forms Update Firestore](https://ajonp.com/courses/angularmaterial/angular-material-reactive-forms-update-firestore)\n\n```\ngit clone https://github.com/AJONPLLC/lesson13-angular-material-reactive-forms.git \n```\n\nThis will give us a solid base to start working from, however if you are creating a new firebase project you should change the environment/environment.ts file to match your firebase details. If you have never done this please see [Angular Navigation Firestore](https://ajonp.com/courses/angularmaterial/angular-material-dynamic-navigation-using-firestore) as this will provide more details on how to update.Make sure you update your npm packages\n\n```\nnpm install \n```\n\n## Open/Close Books Drawer[](https://codingcat.dev/courses/angularmaterial/angular-material-router-awareness#openclose-books-drawer)\n\nIf you are not familiar with Angular [Input and Output Properties](https://angular.io/guide/template-syntax#input-and-output-properties), please do give it a good read so you can understand why we are using the syntax. For the visual learner out there `( )` looks like the letter O in Output and `[ ]` kinda looks like the N for iNput. That is how I try to remember it ????.\n\n### Template[](https://codingcat.dev/courses/angularmaterial/angular-material-router-awareness#template)\n\n- `[opened]=\"showBooksDrawer$ | async\"` will take an observable as input with a true/false value, which will open or close the drawer.\n- `(activate)=\"onBooksDrawerActivate($event)\"` will output the event observable when the drawer is activated\n- `(deactivate)=\"onBooksDrawerDeactivate($event)\"` will output the event observable when the drawer is deactivated\n\nsrc/app/modules/books/\n\n```\n<mat-drawer-container>\n    <mat-drawer [opened]=\"showBooksDrawer$ | async\" mode=\"side\">\n        <router-outlet name=\"book-drawer\" (activate)=\"onBooksDrawerActivate($event)\"\n            (deactivate)=\"onBooksDrawerDeactivate($event)\"> </router-outlet>\n    </mat-drawer>\n    <mat-drawer-content>\n        <router-outlet></router-outlet>\n    </mat-drawer-content>\n</mat-drawer-container>\n```\n\n### Component[](https://codingcat.dev/courses/angularmaterial/angular-material-router-awareness#component)\n\nNow that we can pass observables into the `mat-drawer` and receive events out from `router-outlet`, we need to act upon these movements.We can use [RxJS's BehaviorSubject](https://rxjs.dev/api/index/class/BehaviorSubject) to provide an initial value and a stream for observing changes to that value.`showBooksDrawer$ = new BehaviorSubject(false);` will now show a closed drawer upon creation because we are defaulting to a false value./src/app/modules/books/book-drawer/\n\n```\nshowBooksDrawer$ = new BehaviorSubject(false); \n```\n\nThe below methods will handle the output that is emmited by the `router-outlet`. You can find more details in the [Angular docs](https://angular.io/api/router/RouterOutlet).\n\n/src/app/modules/books/book-drawer/\n\n```\nonBooksDrawerActivate(e) { \n    this.showBooksDrawer$.next(true); \n} \nonBooksDrawerDeactivate(e) { \n    this.showBooksDrawer$.next(false); \n} \n```\n\n## Material Fab Button for book add[](https://codingcat.dev/courses/angularmaterial/angular-material-router-awareness#material-fab-button-for-book-add)\n\nIf you have never heard of a fab button it stands for [Floating Action Button](https://material.io/design/components/buttons-floating-action-button.html). You can see many different [material examples](https://material.angular.io/components/button/examples) to compare what you think might work best for your situation.Below you will see that we are going to create a pink button (our accent color). So that we can add books to our book list only when we are **verified** user and in the **correct** view.\n\n![fab button](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/14-angular-material-router-awareness/Screen_Shot_2019-02-11_at_12.19.40_PM.png)\n\n### Adding Required Modules[](https://codingcat.dev/courses/angularmaterial/angular-material-router-awareness#adding-required-modules)\n\nWe need to import both the `MatButtonModule` for the FAB button, as well as the `MatIconModule` for the plus sign.\n\n/src/app/modules/books/\n\n```\nimport { MatButtonModule, MatIconModule, MatSidenavModule } from '@angular/material'; \n...\nimports: [...MatIconModule, MatButtonModule] \n```\n\n### Positioning FAB[](https://codingcat.dev/courses/angularmaterial/angular-material-router-awareness#positioning-fab)\n\nWe will now need to update the styles so that we can correctly position this new button. Other platforms are good about placing this very specifically and then allowing you to override. If you forget to do this in Angular Material it does not have a default.[/src/app/modules/books/](https://github.com/AJONPLLC/lesson14-angular-material-router-awareness/blob/master/src/app/modules/books/books.component.scss#L19)\n\n```\n.app-fab--absolute { \n    position: fixed; bottom: 1rem; right: 1rem; \n} \n@media (min-width: 1024px) { \n    .app-fab--absolute { \n        bottom: 2rem; right: 2rem; \n    } \n} \n```\n\n### Adding FAB to template[](https://codingcat.dev/courses/angularmaterial/angular-material-router-awareness#adding-fab-to-template)\n\nAlthough this is using a `button` html tag, you then add attributes (technically directives):\n\n- `mat-fab` to provide the rounded shape in our directive.\n- `color=\"accent\"` to give this our pink color Check [Material Theming](https://ajonp.com/courses/angularmaterial/angular-material-theming/) for more details.\n- `class=\"app-fab-absolute` is setting up our class that we defined above in our styles\n- `routerLink=\"/books/new\"` this is the directive for the Angular router to take action when the button is clicked, see [Angular docs](https://angular.io/api/router/RouterLink)\n- `aria-label=\"Add\"` allows for accessiblity features [ARIA](https://developers.google.com/web/fundamentals/accessibility/semantics-aria/)\n- `<mat-icon aria-label=\"Add Book\">add</mat-icon>` is the entire component required for the [add](https://material.angular.io/components/icon/overview) type icon.\n\n/src/app/modules/books/\n\n```\n<button mat-fab color=\"accent\" class=\"app-fab--absolute\" routerLink=\"/books/new\" aria-label=\"Add\">\n    <mat-icon aria-label=\"Add Book\">add</mat-icon>\n</button>\n```\n\n## Unsubscribing from Subscriptions[](https://codingcat.dev/courses/angularmaterial/angular-material-router-awareness#unsubscribing-from-subscriptions)\n\n> Please note I have since learned an easier way using a seperate Subject and it is used in the next chapter of this course, [here](https://github.com/AJONPLLC/lesson15-firebase-AuthZ-AuthN/blob/master/src/app/modules/books/books.component.ts#L35) is the source.\n\nIf we don't remove subscription from the Observables, we have the chance of memory leaks in our application. So a bit of refactoring our subscriptions allows us to add them all together in an array of type Subscription.\n\n- `subs: Array<Subscription> = [];` array for subscriptions.\n- `OnDestroy` you must add the implementation for [OnDestroy](https://angular.io/guide/lifecycle-hooks#ondestroy), so we can remove the subscriptions prior to removing the component (aka directive).\n\n/src/app/modules/books/\n\n```\n ngOnDestroy(): void { this.subs.forEach(sub => sub.unsubscribe()); } \n```\n\n## Router Events Subscription[](https://codingcat.dev/courses/angularmaterial/angular-material-router-awareness#router-events-subscription)\n\nIn our constructor we can now subscribe to events that happen on the Angular Router instance. We actually only care about the [NavigationEnd](https://angular.io/guide/router#router-events), and also make sure that we are at the `/books` level. At this point we can properly add a true value to the `showBooksAdd$` BehaviorSubject and the UI will react accordingly and update to show the button.\n\n/src/app/modules/books/\n\n```\nconstructor(private router: Router) { \n    /* Only add Book Add Fab on /books */ \n    this.subs.push(this.router.events.subscribe(e => { \n        if (e instanceof NavigationEnd && e.urlAfterRedirects === '/books') { \n            this.showBooksAdd$.next(true); \n        } else { \n            this.showBooksAdd$.next(false); \n        } \n    }));\n} \n```\n\n### Hide FAB Button[](https://codingcat.dev/courses/angularmaterial/angular-material-router-awareness#hide-fab-button)\n\nNow that we are correctly passing the boolean (true/false) value to our BehaviorSubject we can observe this within the Angular UI and react. This is as simple as adding the [NgIf](https://angular.io/api/common/NgIf) directive. The easiest way to accomplish this is by usig the [async pipe](https://angular.io/guide/observables-in-angular#async-pipe) which will automatically subscribe and unsubscribe from our `showBooksAdd$` observable.\n\n- `*ngIf=\"(showBooksAdd$ | async)\"` allows for hiding or showing our button determined by the router position.\n\n/src/app/modules/books/\n\n```\n<button \n    mat-fab color=\"accent\" \n    class=\"app-fab--absolute\" \n    routerLink=\"/books/new\" \n    aria-label=\"Add\" \n    *ngIf=\"(showBooksAdd$ | async)\" \n> \n    <mat-icon aria-label=\"Add Book\">add</mat-icon> \n</button> \n```\n\n## Summary[](https://codingcat.dev/courses/angularmaterial/angular-material-router-awareness#summary)\n\nWhen we are on the `/books` path we want to see the button.\n\n![books path](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/14-angular-material-router-awareness/Screen_Shot_2019-02-11_at_12.19.40_PM.png)\n\nWhen we are on any other subpath of `/books/*` we want to hide the button, for example the chapter section.\n\n![chapter path](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/14-angular-material-router-awareness/Screen_Shot_2019-02-11_at_12.19.51_PM.png)\n",
    "iso8601Date": "2019-01-22T00:00:00-05:00",
    "basename": "angular-material-router-awareness"
  },
  "angular-material-router-outlet": {
    "title": "Angular Material Router Outlet",
    "date": "2019-01-09",
    "preview": "https://youtu.be/niJrSNQ1KwI\n\n# Angular Material Router Outlet\n\nThis …",
    "content": "\n\nhttps://youtu.be/niJrSNQ1KwI\n\n# Angular Material Router Outlet\n\nThis lesson will start from a new Angular Project and walk through how to use Angular Material [Sidenav](https://material.angular.io/components/sidenav/overview) using the Angular [Router](https://angular.io/guide/router) with [Named Outlets](https://angular.io/guide/router#displaying-multiple-routes-in-named-outlets). This will be the begining of building a app for publishing book reviews.???? Demo: [https://ajonp-lesson-9.firebaseapp.com/](https://ajonp-lesson-9.firebaseapp.com/)\n\n# Create Angular Project\n\nIf you have never used the [Angular CLI](https://cli.angular.io/) you will want to checkout the main page to get started.\n\n```\nng new angular-material-router-outlet \n```\n\nPlease choose Yes for routing and SCSS.\n\n![NG Choices](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto//v1547496414/ajonp-ajonp-com/9-lesson-angular-material-router-outlet/ukc1dpxppxkumbid4aql.png)\n\n## Add Material to Angular Project[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#add-material-to-angular-project)\n\n> Make sure you have changed to the correct directory `cd angular-material-router-outlet`\n\nWe will now run an Angular schematic command, you can think of this as a workflow to help get your project up and running quicker. There are several schematics available and I would recommend reading [Angular Blog](https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2) about schematics and [Angular Console](https://angularconsole.com/).\n\n```\nng add @angular/material \n```\n\nFor the selections please choose custom, as we will add these in our next lesson.\n\n![Angular Material Selections](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto//v1547499455/ajonp-ajonp-com/9-lesson-angular-material-router-outlet/rcbcfajzbwkjlptbhk08.png)\n\n## Open Project[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#open-project)\n\nNow you can open your new Angular project, if using VSCode\n\n```\ncd angular-material-router-outlet && code . \n```\n\nYou should see the base angular structure, including a routing module `app-routing.module.ts`\n\n![Structure for Angular Project](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto//v1547499630/ajonp-ajonp-com/9-lesson-angular-material-router-outlet/wds1pzbwihb4p6efpnks.png)\n\npackage.json\n\n```\n{\n  \"name\": \"angular-material-router-outlet\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"~7.1.0\",\n    \"@angular/cdk\": \"~7.2.1\",\n    \"@angular/common\": \"~7.1.0\",\n    \"@angular/compiler\": \"~7.1.0\",\n    \"@angular/core\": \"~7.1.0\",\n    \"@angular/forms\": \"~7.1.0\",\n    \"@angular/material\": \"^7.2.1\",\n    \"@angular/platform-browser\": \"~7.1.0\",\n    \"@angular/platform-browser-dynamic\": \"~7.1.0\",\n    \"@angular/router\": \"~7.1.0\",\n    \"core-js\": \"^2.5.4\",\n    \"hammerjs\": \"^2.0.8\",\n    \"rxjs\": \"~6.3.3\",\n    \"tslib\": \"^1.9.0\",\n    \"zone.js\": \"~0.8.26\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"~0.11.0\",\n    \"@angular/cli\": \"~7.1.3\",\n    \"@angular/compiler-cli\": \"~7.1.0\",\n    \"@angular/language-service\": \"~7.1.0\",\n    \"@types/node\": \"~8.9.4\",\n    \"@types/jasmine\": \"~2.8.8\",\n    \"@types/jasminewd2\": \"~2.0.3\",\n    \"codelyzer\": \"~4.5.0\",\n    \"jasmine-core\": \"~2.99.1\",\n    \"jasmine-spec-reporter\": \"~4.2.1\",\n    \"karma\": \"~3.1.1\",\n    \"karma-chrome-launcher\": \"~2.2.0\",\n    \"karma-coverage-istanbul-reporter\": \"~2.0.1\",\n    \"karma-jasmine\": \"~1.1.2\",\n    \"karma-jasmine-html-reporter\": \"^0.2.2\",\n    \"protractor\": \"~5.4.0\",\n    \"ts-node\": \"~7.0.0\",\n    \"tslint\": \"~5.11.0\",\n    \"typescript\": \"~3.1.6\"\n  }\n}\n\n```\n\nindex.html\n\n```\n<!doctype html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> <title>AngularMaterialRouterOutlet</title> <base href=\"/\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"> <link href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\" rel=\"stylesheet\"> <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\"> </head> <body> <app-root></app-root> </body> </html> \n```\n\n# Serve Angular Project\n\nIn order to preview this base setup you will need to run the angular serve command.\n\n```\nng serve \n```\n\nNow on [http://localhost:4200](http://localhost:4200/) you will see the default Angular page displayed.\n\n![Angular Base page](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto//v1547499873/ajonp-ajonp-com/9-lesson-angular-material-router-outlet/cq7rdkftk6km9kmtism0.png)\n\n# Angular Modules\n\nIn general a module is a way of packaging up several Angular based files that logically belong together. Direct from Angular's [docs](https://angular.io/guide/architecture-modules), \"NgModules are containers for a cohesive block of code dedicated to an application domain, a workflow, or a closely related set of capabilities.\"We will use both [NgModule](https://angular.io/api/core/NgModule) and [Component](https://angular.io/api/core/Component) extensively through this lesson (and any Angular project).Many tutorials will have you start putting everything into app.component\\*, I like to keep the main app clean and load as much as possible after lazy loading. Creating a modules folder keeps things a little more concise, but do what you prefer most.\n\n# Angular Material Sidenav\n\nThe Sidenav consists of three main html elements `<mat-sidenav-container>`, `<mat-sidenav>`, and `<mat-sidenav-content>`. Visually these can be represented like\n\n![Material Sidenav Layout](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto//v1547500528/ajonp-ajonp-com/9-lesson-angular-material-router-outlet/mat-sidenav-content.png)\n\n## Creating Sidenav Module[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#creating-sidenav-module)\n\nTo create a module we can leverage the Angular CLI and run\n\n```\nng g m modules/sidenav \n```\n\nThen we will need a component to display the Angular Material Sidenav.\n\n```\nng g c modules/sidenav \n```\n\nThe output of these commands should give you this structure.\n\n![Sidenav Module Structure](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto//v1547500863/ajonp-ajonp-com/9-lesson-angular-material-router-outlet/dbap7swjuk06qig0jtg2.png)\n\nYou can then replace any contents in `app.component.html` with\n\n```\n<app-sidenav></app-sidenav> \n```\n\nSidenav will be the main entrypoint for the entire application, so it will need to reside directly in app.component. If you are asking yourself where did `app-sidenav` come from, Great question! This is defined in `sidenav.component.ts` in the `@Component` decorator, in the property `selector: app-sidenav`. Now at this point `app.component.ts` still does not now how to find `sidenav.component.ts` so we must export it from `sidenav.module.ts` and import it into `app.module.ts`.sidenav.module.ts\n\n```\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SidenavComponent } from './sidenav.component';\nimport { MatSidenavModule, MatToolbarModule, MatIconModule, MatButtonModule, MatListModule } from '@angular/material';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n    declarations: [SidenavComponent],\n    imports: [\n        CommonModule,\n        MatSidenavModule,\n        MatToolbarModule,\n        MatIconModule,\n        MatButtonModule,\n        RouterModule,\n        MatListModule\n    ],\n    exports: [SidenavComponent]\n})\n\nexport class SidenavModule { } \n```\n\napp.module.ts\n\n```\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { SidenavModule } from './modules/sidenav/sidenav.module';\nimport { OverlayContainer } from '@angular/cdk/overlay';\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [BrowserModule, AppRoutingModule, BrowserAnimationsModule, SidenavModule],\n    providers: [], bootstrap: [AppComponent]\n})\n\nexport class AppModule {\n    constructor(overlayContainer: OverlayContainer) {\n        overlayContainer.getContainerElement().classList.add('angular-material-router-app-theme');\n    }\n} \n```\n\nNow our app can find the Sidenav module and can use it to show any of the exported components. If you open the preview again [http://localhost:4200](http://localhost:4200/), you should now see \"sidenav works!\"I would recommend committing at this point.\n\n```\ngit add . && git commit -m \"Initial sidenav\" \n```\n\n## Update sidenav.component\\*[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#update-sidenavcomponent)\n\nNow that we know our component can be seen as plain text lets start using the Angular Material Sidenav component for styling our app. First we will need to tell `sidenav.module.ts` that we need to include this new component, by adding it to our imports from `@angular/material`.\n\n```\nimport { MatSidenavModule} from '@angular/material'; \n\n... \n\nimports: [ CommonModule, MatSidenavModule, ... \n```\n\nNow we can will update sidenav.component.html to include the sidenav elements.\n\n```\n<mat-sidenav-container>\n    <mat-sidenav>drawer</mat-sidenav>\n    <mat-sidenav-content>content</mat-sidenav-content>\n</mat-sidenav-container>\n```\n\n> If you were to preview the page now you will only see \"content\" as the drawer is automatically hidden.\n\nUpdate `mat-sidenav` element to have the drawer open and beside content.\n\n```\n<mat-sidenav opened=false mode=\"over\"> ... \n```\n\nNow you can preview again [http://localhost:4200](http://localhost:4200/).\n\n## Add MatToolbar[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#add-mattoolbar)\n\nWe can make our site look like most by adding a toolbar to the top\n\n```\n<mat-sidenav-container>\n    <mat-sidenav opened=false mode=\"over\" #snav> drawer </mat-sidenav>\n    <mat-sidenav-content>\n        <mat-toolbar color=\"primary\"> <button type=\"button\" aria-label=\"Toggle sidenav\" mat-icon-button\n                (click)=\"snavToggle(snav)\">\n                <mat-icon>menu</mat-icon>\n            </button> content\n    </mat-sidenav-content>\n</mat-sidenav-container>\n```\n\nBecause we have added three new Angular Material elements `mat-toolbar`, `mat-icon-button` and `mat-icon` to our component, we will need to let `sidenav.component.ts` know where they are defined, so you need to import them in `sidenav.module.ts`.\n\n```\n@NgModule({ declarations: [SidenavComponent], imports: [ CommonModule, MatSidenavModule, MatToolbarModule, MatIconModule, MatButtonModule, \n... \n```\n\n## Add Angular Router Outlet[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#add-angular-router-outlet)\n\nThe main content of our app needs a place to end up, this is what Angular's `router-outlet` accompishes. It is a placeholder that takes the markup from another component and places it on the page. For our app this will be the main outlet that other child outlets will nest under.\n\n```\n... <router-outlet></router-outlet> </mat-sidenav-content> </mat-sidenav-container> \n```\n\nAlso remember to add RouterModule to `sidenav.module` so that Angular understands the element `<router-outlet>`.\n\n```\n@NgModule({ declarations: [SidenavComponent], imports: [ CommonModule, MatSidenavModule, MatToolbarModule, MatIconModule, MatButtonModule, RouterModule, MatListModule ], exports: [SidenavComponent] }) \n```\n\nThis is a visual representation of what is happening in our code so far, mat-sidenav-content->router-outlet is where the reaminder of our app will live.\n\n![Sidenav with Toolbar](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto//v1547502835/ajonp-ajonp-com/9-lesson-angular-material-router-outlet/main-router-outlet.png)\n\n# Lazy Loading Books Feature Module\n\nThe first child route that we will setup is a book route. This will require us to create a new module and component. This time we will use an optional parameter `--routing` which will also create a routing module.Create Book Modules\n\n```\nng g m modules/books --routing \n```\n\nCreate Book Component\n\n```\nng g c modules/books \n```\n\n## Update App routing[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#update-app-routing)\n\nWe now need to configure the router so that the books feature module can be accessed. So we will go back to `app-routing.module.ts` and add a new route with path `books`. There is a special way to load modules in a lazy fashion, meaning they were not downloaded when first accessing the app but when first accessing the route. You can read more about Lazy Loading Modules in the [Angular Guide](https://angular.io/guide/lazy-loading-ngmodules).\n\n```\nconst routes: Routes = [ { path: 'books', loadChildren: './modules/books/books.module#BooksModule' } ]; \n```\n\n## App Routing Default Route[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#app-routing-default-route)\n\nIf someone enters the app without a specified path we need to redirect that request over to books so that content will show up correctly.Add to constant routes.\n\n```\n { path: '', redirectTo: '/books', pathMatch: 'full' } \n```\n\n## Update Books Feature Module Route[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#update-books-feature-module-route)\n\nNow that we have told the app router about a feature module we need to make sure that feature module knows which component it should load, so we will add an empty path.\n\n```\nconst routes: Routes = [ { path: '', component: BooksComponent, } ] \n```\n\nYou should now see in the live preview [http://localhost/books](http://localhost/books) a message that says \"books works!\".\n\n# Lazy Loading Welcome Feature Module\n\nMany sites will often have a welcome or home module that you will route your traffic to incase there are notifications, logins, or basic info requirements. So we will switch our base path over to this new feature module and leave books on a seperate path. This will be the same setup as our Books Module.Create Welcome Modules\n\n```\nng g m modules/welcome --routing \n```\n\nCreate Welcome Component\n\n```\nng g c modules/welcome \n```\n\n## Update App routing[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#update-app-routing)\n\n```\nconst routes: Routes = [ { path: 'welcome', loadChildren: './modules/books/books.module#BooksModule' } ]; \n```\n\n## App Routing Default Route[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#app-routing-default-route)\n\nChange this redirect from books to Welcome.app-routing.module.ts\n\n```\nconst routes: Routes = [ { path: 'welcome', loadChildren: './modules/welcome/welcome.module#WelcomeModule' }, { path: 'books', loadChildren: './modules/books/books.module#BooksModule' }, { path: '', redirectTo: '/welcome', pathMatch: 'full' } ]; \n```\n\n## Update Welcome Feature Module Route[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#update-welcome-feature-module-route)\n\nwelcome-routing.module.ts\n\n```\nconst routes: Routes = [ { path: '', component: WelcomeComponent, } ] \n```\n\n# Using Router Link for Navigation\n\nIn order for us to navigate the site we need to add some navigational elements. Using an [Angular Material List](https://material.angular.io/components/list/overview#navigation-lists) with a specific `mat-nav-list` element type is just what we need for our sidenav drawer.\n\n```\n... \n<mat-sidenav opened=false mode=\"over\">\n    <mat-nav-list>\n        <mat-list-item>\n            <h4 matLine routerLink=\"/welcome\" [routerLinkActiveOptions]=\"{exact:true}\" routerLinkActive=\"active-link\">\n                Home</h4>\n        </mat-list-item>\n        <mat-list-item>\n            <h4 matLine routerLink=\"/books\" routerLinkActive=\"active-link\">Books</h4>\n        </mat-list-item>\n    </mat-nav-list>\n</mat-sidenav> \n...\n```\n\nDon't forget that you will now need to add `RouterModule` and `MatListModule` in your `sidenav.module.ts` imports.sidenav.module.ts\n\n```\n@NgModule({ \n    declarations: [SidenavComponent], \n    imports: [ \n        CommonModule, \n        MatSidenavModule, \n        MatToolbarModule, \n        MatIconModule, \n        MatButtonModule, \n        RouterModule, \n        MatListModule \n    ], \n    ... \n```\n\nIf you now preview [http://localhost:4200](http://localhost:4200/) you will see in the sidenav you can click on Home or Books and the content will change to \"welcome works!\" and books works!\" respectively.\n\n## Active Router Link[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#active-router-link)\n\nYou can style your link to know which link you are currently using by adding the attribute `routerLinkActive` and passing a class. We have already assigned ours to `active-link`.We can then add our style to `sidenav.component.scss` so that the active link changes to a bold blue.\n\n```\n.active-link { color: blue; font-weight: bold !important; border: none; } \n```\n\nBecause we have our home (welcome) route path assigned to '/' if you preview now both Books and Home would be highlighed. By changing our routerlink to `/welcome` this issue will be resolved. In later lessons we will also discuss routerLinkOptions such as `[routerLinkActiveOptions]=\"{exact:true}\"`.\n\n# Toolbar Updates\n\nIn our `mat-toolbar` we placed a button that currently calls a function that has not yet been defined. We need to assign a variable called snav by using `#snav` in the element `mat-sidenav`.\n\n## Sidenav Toggle[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#sidenav-toggle)\n\nsidenav.component.html\n\n```\n<mat-sidenav opened=false mode=\"over\" #snav> \n```\n\nWe can then use this new variable and pass it on the button click output `(click)=\"snavToggle(snav)\"`sidenav.component.html\n\n```\n<button type=\"button\" aria-label=\"Toggle sidenav\" mat-icon-button (click)=\"snavToggle(snav)\" > \n```\n\n## Function for Toggle[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#function-for-toggle)\n\nUsing our new snav reference we can just call the method that exists on this object, it will open or close the sidenav drawer.sidenav.component.ts\n\n```\nsnavToggle(snav) { snav.toggle(); } \n```\n\nIf you now preview [http://localhost:4200](http://localhost:4200/) you will see that the toolbar hamburger (three horizontal lines) button will open and close the sidenav drawer.\n\n## Toolbar Title[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#toolbar-title)\n\nWe can also specify a title to allow our home routerlink to return home.\n\n```\n<a class=\"home-link\" routerLink=\".\">{{ title }}</a> \n```\n\nsidenav.component.ts\n\n```\n title = 'Lesson 9 - Angular Material Router Outlet'; \n```\n\n# Book Drawer as Named Outlet\n\nNow that we have our book feature module all setup with working navigation and toolbar, we are going to add a named outlet for a drawer on this page.Visually it will look like this\n\n![Drawer Layout](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto//v1547511788/ajonp-ajonp-com/9-lesson-angular-material-router-outlet/book-drawer.png)\n\nWe will change our `books.component.html` from having text to including an Angular Material Drawer (mat-drawer). Remember now we have `one` router-outlet in our `sidenav.component` and `two` router-outlets in `books.component`, one named for the drawer and one for content.\n\n## Create Drawer Component[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#create-drawer-component)\n\nNo routing needed for this module as it will be used only inside of our books module and not as a feature module.module\n\n```\nng g m modules/books/book-drawer \n```\n\ncomponent\n\n```\nng g c modules/books/book-drawer \n```\n\n> Don't forget to export this component as it will be used in book-detail.\n\nbook-drawer.module.ts\n\n```\n... @NgModule({ declarations: [BookDrawerComponent], imports: [ CommonModule ], exports: [ BookDrawerComponent ] ... \n```\n\n## Add mat-drawer to Books[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#add-mat-drawer-to-books)\n\nThere are three parts to the drawer just like sidenav, this is because they are the same with sidenav having a few additional structural features.Having attributes opened=\"true\" will show the drawer on screen and having mode=\"side\" will push the content to beside the drawer.modules/books/books.component.html\n\n```\n<mat-drawer-container>\n    <mat-drawer opened=\"true\" mode=\"side\">\n        <router-outlet name=\"book-drawer\"></router-outlet>\n    </mat-drawer>\n    <mat-drawer-content>\n        <router-outlet></router-outlet>\n    </mat-drawer-content>\n</mat-drawer-container>\n```\n\nRemember to add MatSidenavModule to `books.module.ts`, or the `mat-drawer` element will not be recognized.\n\n```\n@NgModule({ declarations: [BooksComponent], imports: [ CommonModule, BooksRoutingModule, MatSidenavModule ] }) \n```\n\n## Create Book Detail Component[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#create-book-detail-component)\n\nWe will use this as an additional child feature route of books, so we need the router module.module\n\n```\nng g m modules/books/book-detail --routing \n```\n\ncomponent\n\n```\nng g c modules/books/book-detail \n```\n\n## Update Books Routing[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#update-books-routing)\n\nWe no longer want just the BookComponent to load when the `/books` route is hit, we want it to load its children as well. We do this the same as we did with our `app-routing.module.ts` and we will lazy load it with `loadChildren`.\n\n```\nconst routes: Routes = [\n    { \n        path: '', \n        component: BooksComponent, \n        children: [\n            { \n                path: '', \n                loadChildren: './book-detail/book-detail.module#BookDetailModule' \n            }\n        ] \n    }\n]; \n```\n\n## Update Book-Detail Routing with Named Outlet[](https://codingcat.dev/courses/angularmaterial/angular-material-router-outlet#update-book-detail-routing-with-named-outlet)\n\nNow that the books module knows to lazy load the book-detail module on its base path we need to update the route in book-detail to load its own component. This however will have a special route with an `outlet` for the drawer as well, this tells the router that it must use only this named route for its component.So the router will load:  \nbook-detail -> `<router-outlet>`  \nbook-drawer -> `<router-outlet name=\"book-drawer\">`\n\n```\nconst routes: Routes = [ \n    { \n        path: '', \n        component: BookDetailComponent \n    }, \n    { \n        path: '', \n        component: BookDrawerComponent, \n        outlet: 'book-drawer' \n    } \n]; \n```\n\nIf you now preview [http://localhost:4200/books](http://localhost:4200/books) you will see in a drawer \"book-drawer works!\" and in the content area \"book-detail works!\".\n\n# Final Thoughts\n\nThe Angular Router is amazingly powerful, you can create sever nested routes, named routes, guarded routes...If you cloned the final GitHub repo you will see some additional style updates, I will be covering those in the next Angular Material Themeing lesson.\n",
    "iso8601Date": "2019-01-09T00:00:00-05:00",
    "basename": "angular-material-router-outlet"
  },
  "angular-material-theming": {
    "title": "Angular Material Theming",
    "date": "2019-01-22",
    "preview": "https://youtu.be/V3WiBs-igaY\n\n# Angular Material Theming\n\n???? Demo: …",
    "content": "\n\nhttps://youtu.be/V3WiBs-igaY\n\n# Angular Material Theming\n\n???? Demo: [https://ajonp-lesson-10.firebaseapp.com/kitchensink](https://ajonp-lesson-10.firebaseapp.com/kitchensink)Angular Material is the officially supported components for implementing Google's Material Design System within Angular. There are 4 pre-built themes that come with Angular Material\n\n- deeppurple-amber\n- indigo-pink\n- pink-bluegrey\n- purple-green We are going to take a look at creating our own theme and including this in with our default style, then using this to provide mixins for each of our components styles.\n\n> Probably the biggest complaint that I hear about Themes in Angular Material is the requirement for building an entire new set of css using the sass function, which bloats your style.css files. Please checkout [Ionic CSS Variables](https://beta.ionicframework.com/docs/theming/color-generator) to see a comparison of how this can be accomplished. As of writing this still remains an [open issue on GitHub](https://github.com/angular/material2/issues/4352)\n\n## Lesson Steps[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#lesson-steps)\n\n1. Kitchen Sink Component\n2. Angular Flex-Layout\n3. Angular Material Theme Creation\n4. Theme Selection Angular Service\n5. Sass Mixins\n6. Tools\n\n# Kitchen Sink Component\n\nIn English (maybe just USA) we say \"Everythign but the kitchen sink\", in programming we often will use the \"Kitchensink\" to refer to everything we can possible use on a site. For our example we will pull from the [Angular Material Kitchensink](https://github.com/angular/material2/blob/b21cfb73261e5c334280a185762ffcc475348b76/src/universal-app/kitchen-sink/kitchen-sink.ts) so that we can highlight all of the possible components and what the theme does to them.The components can be found on [material.angular.io/components](https://material.angular.io/components/categories) there are a few from the Component Dev Kit (CDK) as well.\n\n## Clone Repo[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#clone-repo)\n\nUsually I would offer up a guide to build this entire thing out (and I show this in the video if you want to follow along) but to simplify things I am recommend you just clone the Lesson 10 repo (or fork it and clone yours) and check it out for this walk through.\n\n```\ngit clone https://github.com/AJONPLLC/lesson-10-angular-material-theming \n```\n\nIf you would like to follow along you can snage the Lesson 9 and work with me through the updates.\n\n```\ngit clone https://github.com/AJONPLLC/lesson-9-angular-material-router-outlet \n```\n\n# Angular Flex-Layout\n\nAngular FLex-Layout or fxLayout, offeres a great alternative to creating all the css for a flexlayout by hand. It is very similar to [Bootstrap's Flex](https://getbootstrap.com/docs/4.2/utilities/flex/) but I feel as though it is even more powerful.This is a great example by tburleson:\n\n## Toolbar[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#toolbar)\n\nFor our example we used the `nogrow` option in the toolbar so that the material icon would stay shifted off to the right using `fxFlex=\"nogrow\"`.sidenav.component.html\n\n```\n<mat-sidenav-container>\n  <mat-sidenav opened=\"false\" mode=\"over\" #snav>\n    <mat-nav-list>\n      <mat-list-item>\n        <h4\n          matLine\n          routerLink=\"/welcome\"\n          [routerLinkActiveOptions]=\"{ exact: true }\"\n          routerLinkActive=\"active-link\"\n        >\n          Home\n        </h4>\n      </mat-list-item>\n      <mat-list-item>\n        <h4\n          matLine\n          routerLink=\"/kitchensink\"\n          [routerLinkActiveOptions]=\"{ exact: true }\"\n          routerLinkActive=\"active-link\"\n        >\n          Kitchen Sink\n        </h4>\n      </mat-list-item>\n      <mat-list-item>\n        <h4 matLine routerLink=\"/books\" routerLinkActive=\"active-link\">\n          Books\n        </h4>\n      </mat-list-item>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\">\n      <button\n        type=\"button\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        (click)=\"snavToggle(snav)\"\n      >\n        <mat-icon>menu</mat-icon>\n      </button>\n      <span fxFlex>\n        <a class=\"home-link\" routerLink=\".\">{{ title }}</a>\n      </span>\n      <span fxFlex=\"nogrow\">\n        <button mat-icon-button [matMenuTriggerFor]=\"menu\">\n          <mat-icon>format_color_fill</mat-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\">\n          <button mat-menu-item (click)=\"pickColor('')\">\n            <div class=\"color-swatch color-swatch-primary\" mat-menu-item></div>\n          </button>\n          <button mat-menu-item (click)=\"pickColor('green')\">\n            <div class=\"color-swatch color-swatch-green\" mat-menu-item></div>\n          </button>\n          <button mat-menu-item (click)=\"pickColor('pink')\">\n            <div class=\"color-swatch color-swatch-pink\" mat-menu-item></div>\n          </button>\n          <button mat-menu-item (click)=\"pickColor('purple')\">\n            <div class=\"color-swatch color-swatch-purple\" mat-menu-item></div>\n          </button>\n          <button mat-menu-item (click)=\"pickColor('yellow')\">\n            <div class=\"color-swatch color-swatch-yellow\" mat-menu-item></div>\n          </button>\n          <button mat-menu-item (click)=\"pickColor('warn')\">\n            <div class=\"color-swatch color-swatch-warn\" mat-menu-item></div>\n          </button>\n        </mat-menu>\n      </span>\n    </mat-toolbar>\n    <router-outlet></router-outlet>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n\n```\n\n## Kitchensink[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#kitchensink)\n\nIn our kitchensink example we wrapped every component with a `<span fxFlex>`, then wrapped the entire component in `<div style=\"max-width: 80%\" fxLayout=\"column\" fxLayoutAlign=\"center center\">` which will allow everything to stay in the center and each of the `fxFlex` items to be within a flexbox. You can see that each span will have the style `flex: 1 1 1e-09px;box-sizing: border-box;` when rendered in the html.\n\n# Angular Material Theme Creation\n\nYou could use the 4 prebuilt themes that come with the @angular/material package, by just importing them into your style.css`@import \"~@angular/material/prebuilt-themes/indigo-pink.css\";``@import \"~@angular/material/prebuilt-themes/deeppurple-amber.css\";``@import \"~@angular/material/prebuilt-themes/pink-bluegrey.css\";``@import \"~@angular/material/prebuilt-themes/purple-green.css\";`\n\n## Custom Theme[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#custom-theme)\n\nI prefer to add them directly so that you can create your own branding colors. You can't make a new unique site if you don't allow for your Brand's identity to show through (you know what I am talking about Marketing!).The best site I have found for this is [Material Design Palette Generator](http://mcg.mbitson.com/) unlike [Google's Material Color Tool](https://material.io/tools/color/), the DPG allows you to export direct to sass variables which is exactly what we need when creating an Angular Material Theme.Make sure when you choose download (the down arrow), you then choose ANGULAR JS 2 (MATERIAL 2).\n\n![Download Design Palette Generator](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1547730945/ajonp-ajonp-com/10-lesson-angular-material-theming/Screen_Shot_2019-01-17_at_8.14.48_AM.png)\n\n## Update theme file[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#update-theme-file)\n\nYou can then use all of these custom variables to create new themes. The sass variable should define the full spectrum along with contrast of each color in the palette.Please make sure you include all of the material sass theming functions by adding this to the top of any theme file. You should only have this once in any project, so if this makes more sense in your style file using various `mixins` and `include` features please do this in a way that makes sense for your project.\n\n```\n@import '~@angular/material/theming'; @include mat-core(); \n```\n\n### SASS Variables[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#sass-variables)\n\nangular-material-router-theme.scss\n\n```\n$md-purple: (\n  50: #ffffff,\n  100: #d3cbe7,\n  200: #b2a5d5,\n  300: #8974be,\n  400: #775fb4,\n  500: #674ea7,\n  600: #5a4492,\n  700: #4d3b7d,\n  800: #403168,\n  900: #342754,\n  A100: #f9f7fd,\n  A200: #b7a2ec,\n  A400: #7c5dcb,\n  A700: #7256b9,\n  contrast: (\n    50: #000000,\n    100: #000000,\n    200: #000000,\n    300: #000000,\n    400: #ffffff,\n    500: #ffffff,\n    600: #ffffff,\n    700: #ffffff,\n    800: #ffffff,\n    900: #ffffff,\n    A100: #000000,\n    A200: #000000,\n    A400: #ffffff,\n    A700: #ffffff\n  )\n);\n\n```\n\nCreation of the Sass variable for our new palette, here the mat-palette function is returning the color information and mappings and assigning it to `$angular-material-router-app-purple`.\n\n```\n$angular-material-router-app-purple: mat-palette($md-purple); \n```\n\n### New Material Theme[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#new-material-theme)\n\nOnce you have a new palette it is finally time to create a new Sass variable `$angular-material-router-app-theme-purple` that hosts your full theme information.\n\n```\n$angular-material-router-app-theme-purple: mat-dark-theme(\n  $angular-material-router-app-purple,\n  $angular-material-router-app-accent,\n  $angular-material-router-app-warn\n);\n```\n\nPlease note I have used the default accent and warn, but you can make these any color that you would like as well. Then whenever you use `color=\"warn\"` it could be purple or gray instead of red, please aroudnd with switching out the variables in any theme.\n\n## Style Class Update[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#style-class-update)\n\nAt this point we have only created a bunch of Sass variables that are not included in our app anywhere. In order to do this we will include them in a surrounding class, this can be done in the `style.scss` file, this should have been generated by the Angular CLI, or it is already in the `styles` folder if you cloned the repo.\n\n### Import SCSS Theme File[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#import-scss-theme-file)\n\nFirst make sure you are including the new theme file that holds all of our variables, by importing the scss `@import 'angular-material-router-theme.scss';`.You can do this in any component to use the Sass variables.\n\n### Include Theme into class variable[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#include-theme-into-class-variable)\n\nNow we will include inside this class the entire theme (css) for our app.\n\n```\n... \n.angular-material-router-app-theme-purple { \n  $theme: $angular-material-router-app-theme-purple; \n  @include angular-material-theme($theme); \n} \n... \n```\n\n## Sidenav Color Selector[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#sidenav-color-selector)\n\nNow that we have all of our theme colors defined we can update the sidenav button clicks styles to include the correct background color, this assigns each menu item the color and with a `border-radius` of 50% makes it a circle.sidenav.component.scss\n\n```\n.color-swatch {\n  position: relative;\n  width: 36px;\n  height: 36px;\n  margin: 6px;\n  border-radius: 50%;\n  overflow: hidden;\n}\n.color-swatch-primary {\n  background-color: mat-color($angular-material-router-app-primary, 500);\n}\n.color-swatch-primary:hover {\n  background-color: mat-color(\n    $angular-material-router-app-primary,\n    500\n  ) !important;\n}\n.color-swatch-green {\n  background-color: mat-color($angular-material-router-app-green, 500);\n}\n.color-swatch-green:hover {\n  background-color: mat-color(\n    $angular-material-router-app-green,\n    500\n  ) !important;\n}\n.color-swatch-pink {\n  background-color: mat-color($angular-material-router-app-pink, 500);\n}\n.color-swatch-pink:hover {\n  background-color: mat-color(\n    $angular-material-router-app-pink,\n    500\n  ) !important;\n}\n.color-swatch-purple {\n  background-color: mat-color($angular-material-router-app-purple, 500);\n}\n.color-swatch-purple:hover {\n  background-color: mat-color(\n    $angular-material-router-app-purple,\n    500\n  ) !important;\n}\n.color-swatch-yellow {\n  background-color: mat-color($angular-material-router-app-yellow, 500);\n}\n.color-swatch-yellow:hover {\n  background-color: mat-color(\n    $angular-material-router-app-yellow,\n    500\n  ) !important;\n}\n.color-swatch-warn {\n  background-color: mat-color($angular-material-router-app-warn, 500);\n}\n.color-swatch-warn:hover {\n  background-color: mat-color(\n    $angular-material-router-app-warn,\n    500\n  ) !important;\n}\n\n```\n\n# Theme Selection Angular Service\n\nYou can read up on [Angular Services](https://angular.io/tutorial/toh-pt4) and why you should use them.\n\n## Create color-picker Service[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#create-color-picker-service)\n\nI like to create all of my services in a folder called `core`, I will often put other things like models in this folder as well.\n\n```\nng g s core/services/color-picker.service \n```\n\nIn this service we need to have an initial class set for the app in variable `initialClass`, if you follow the lesson video it shows how this works with local storage in the browser. This allows a person to set the theme and not need to select on refresh. So we look there first and if we cannot fild it we just add the initial class, which is what is also set to our `BehaviorSubject`. You will also notice we are updating something called `OverlayContainer`, this comes from the [Material CDK](https://material.angular.io/cdk/overlay/overview) and allows many of the floating panels to have style.color-picker.service.ts\n\n```\nimport { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { OverlayContainer } from \"@angular/cdk/overlay\";\n@Injectable({ providedIn: \"root\" })\nexport class ColorPickerService {\n  initialClass = \"angular-material-router-app-theme\";\n  colorClass$: BehaviorSubject<string> = new BehaviorSubject(this.initialClass);\n  constructor(private overlayContainer: OverlayContainer) {\n    const storageClass = localStorage.getItem(\"color-picker\");\n    console.log(storageClass);\n    if (storageClass) {\n      overlayContainer.getContainerElement().classList.add(storageClass);\n      this.colorClass$.next(storageClass);\n    } else {\n      overlayContainer.getContainerElement().classList.add(this.initialClass);\n    }\n  }\n  getColorClass() {\n    return this.colorClass$;\n  }\n  setColorClass(className: string) {\n    this.overlayContainer.getContainerElement().classList.forEach(css => {\n      this.overlayContainer.getContainerElement().classList.remove(css);\n    });\n    this.overlayContainer.getContainerElement().classList.add(className);\n    this.colorClass$.next(className);\n    localStorage.setItem(\"color-picker\", className);\n  }\n}\n\n```\n\n## Update App for Theme Class[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#update-app-for-theme-class)\n\nNow that we have all the underling items taken care of we need to actually update the app's class on the fly. This is again why I like to create everything in Modules away from the app component, because it makes this part look very clean.You will add the behavior subject to the entire app just by adding `[ngClass]=\"themeClass | async\"`. This will take the last Observable string for the class name and assign in when the service broadcasts.app.component.html\n\n```\n<div [ngClass]=\"themeClass | async\"><app-sidenav></app-sidenav></div> \n```\n\nWe of course need to tell our html where this came from by updating our `app.component.ts` file by using dependency injection to add our new `color-service`.app.component.ts\n\n```\nimport { ColorPickerService } from \"./core/services/color-picker.service\";\nimport { Component, OnInit } from \"@angular/core\";\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.scss\"]\n})\nexport class AppComponent implements OnInit {\n  title = \"angular-material-router-outlet\";\n  themeClass;\n  constructor(private colorPicker: ColorPickerService) {\n    this.themeClass = this.colorPicker.getColorClass();\n  }\n  ngOnInit(): void {}\n}\n\n```\n\n# Sass Mixins\n\nThe easiest way to create color on those items that dont allow the `color` directive, is to create a mixin based on our current theme's color. For instance in our kitchensink `mat-grid-list` does not offer color, but we can add it to the background by providing a mixin.\n\n## Add Mixin to Theme[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#add-mixin-to-theme)\n\nangular-material-router-theme.scss\n\n```\n@mixin mat-grid-mixin($theme) {\n  $primary: map-get(\n    $map: $theme,\n    $key: primary\n  );\n  mat-grid-tile {\n    background-color: mat-color($primary, 500);\n    color: mat-contrast($primary, 500);\n  }\n}\n\n```\n\nInclude the mixin `@include mat-grid-mixin($theme);` update when each theme class is selected. Now anything with mat-grid-tile will receive the background color of the current primary theme color. You can get any key that you want from the sass function `map-get` and use it in the `mat-color` and `mat-contrast` functions.\n\n```\n.angular-material-router-app-theme-purple {\n  $theme: $angular-material-router-app-theme-purple;\n  @include angular-material-theme($theme);\n  @include mat-grid-mixin($theme);\n}\n```\n\n## Create Mixin outside of Theme[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#create-mixin-outside-of-theme)\n\nLets say that just in our kitchensink example we want to make all the buttons switch from a standard radius\n\n![normal radius button](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/tools/notRound.png)\n\nto a more rounded radius\n\n![45px radius](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/tools/round.png)\n\nWe can add a new mixin fileangular-button-large-radius.scss\n\n```\n@mixin angular-button-large-radius {\n  .mat-raised-button,\n  .mat-stroked-button,\n  .mat-flat-button {\n    border-radius: 45px;\n  }\n}\n\n```\n\nThen just include this into our kitchensink sass.\n\n```\n@import '../../../styles/angular-button-large-radius.scss'; \n@include angular-button-large-radius; \n```\n\n# Tools\n\n## Tools Used In Lesson[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#tools-used-in-lesson)\n\n- [Angular Flex-Layout](https://github.com/angular/flex-layout)\n- [Material Design Palette Generator](http://mcg.mbitson.com/)\n- [Sass Guide](https://sass-lang.com/guide)\n- [Angular Material Theming](https://material.angular.io/guide/theming)\n- [Angular Material Kitchensink](https://github.com/angular/material2/blob/b21cfb73261e5c334280a185762ffcc475348b76/src/universal-app/kitchen-sink/kitchen-sink.ts)\n\n## Additional Tools[](https://codingcat.dev/courses/angularmaterial/angular-material-theming#additional-tools)\n\n- [tburleson Layout Demos](https://tburleson-layouts-demos.firebaseapp.com/#/docs)\n- [Material IO](https://material.io/)\n- [SketchApp](https://www.sketchapp.com/)\n- [Material Sketch Plugin](https://material.io/tools/theme-editor/)\n- [Ionic CSS Variables](https://beta.ionicframework.com/docs/theming/color-generator)\n",
    "iso8601Date": "2019-01-22T00:00:00-05:00",
    "basename": "angular-material-theming"
  },
  "firebase-authentication-and-authorization": {
    "title": "Firebase Authentication and Authorization",
    "date": "2019-01-09",
    "preview": "https://youtu.be/II6TAjPWg54\n\n> ⚠️ Notice: I may need to reshoot this …",
    "content": "\n\nhttps://youtu.be/II6TAjPWg54\n\n> ⚠️ Notice: I may need to reshoot this video as FirebaseUI is up to [v4.1.0](https://github.com/firebase/firebaseui-web/releases/tag/v4.1.0)  \n> [v4.0.0](https://github.com/firebase/firebaseui-web/releases/tag/v4.0.0) Removed all FirebaseUI underlying dependencies on deprecated and removed APIs in Firebase version 6.0.0. \n> FirebaseUI no longer supports versions older than 6.0.0.\n\nWe will continue building out our app to Authorize users and then add Firestore rules to Authenticate within our Angular application. One of my favorite full time authentication companies is [Auth0](https://auth0.com/). Auth0 has many great articles, the one I refer to when trying to teach others about AuthN vs. AuthZ is [Authentication and Authorization](https://auth0.com/docs/authorization/concepts/authz-and-authn).The biggest takeaway is this:\n\n- `Autentication (AuthN)` Determines whether users are who they claim to be\n- `Authorization (AuthZ)` Determines what users can and cannot access\n\n## Setup[](https://codingcat.dev/courses/angularmaterial/firebase-authentication-and-authorization#setup)\n\nWe can start from the previous lesson and build upon it by adding AuthN and AuthZ. Previous Lesson: [Angular Material Router Awareness](https://github.com/AJONPLLC/lesson14-angular-material-router-awareness)\n\n```\ngit clone https://github.com/AJONPLLC/lesson14-angular-material-router-awareness.git \n```\n\nThis will give us a solid base to start working from, however if you are creating a new firebase project you should change the environment/environment.ts file to match your firebase details. If you have never done this please see [Angular Navigation Firestore](https://ajonp.com/courses/angularmaterial/angular-material-dynamic-navigation-using-firestore) as this will provide more details on how to update.Make sure you update your npm packages\n\n```\nnpm install \n```\n\n## Firebase Authentication (AuthN)[](https://codingcat.dev/courses/angularmaterial/firebase-authentication-and-authorization#firebase-authentication-authn)\n\nThe [Firebase Authentication](https://firebase.google.com/docs/auth/) docs have a great amount of detail on how exactly this works for each of their SDKs that they support. When I originally made this video I don't believe that [FirebaseUI](https://firebase.google.com/docs/auth/web/firebaseui) was fully supported and added to the documentation, but it is now. You can still find the main [github repo](https://github.com/firebase/firebaseui-web), which has several issues, but Authentication is the baine of my existence!Thankfully Firebase makes this super simple and I am going to show you how.\n\n### FirebaseUI install[](https://codingcat.dev/courses/angularmaterial/firebase-authentication-and-authorization#firebaseui-install)\n\nFirebaseUI was always a seperate project but it gained huge amounts of popularity. It is a simple drop in solution for authentication that was much needed for Web based authentication with Firebase.First we will need to add `firebaseui` to our npm package dependencies.\n\n```\nnpm i firebaseui@3.5.2 \n```\n\n### Create User Module[](https://codingcat.dev/courses/angularmaterial/firebase-authentication-and-authorization#create-user-module)\n\nUsing the [Angular CLI](https://angular.io/cli) to create modules and components. You can find specific details about this schematic in the [ng generate CLI section](https://angular.io/cli/generate).\n\n- `ng g m` is a sort hand for `ng generate module`, more can be found [here](https://angular.io/cli/generate#module)\n- `modules/user` is the directory from `src/app` where the module will be located.\n- `--routing` adds the routing module\n\n```\nng g m modules/user --routing \n```\n\n### Create User Signin Component[](https://codingcat.dev/courses/angularmaterial/firebase-authentication-and-authorization#create-user-signin-component)\n\nUsing the [Angular CLI](https://angular.io/cli) to create modules and components. You can find specific details about this schematic in the [ng generate CLI section](https://angular.io/cli/generate).\n\n- `ng g c` is a sort hand for `ng generate component`, more can be found [here](https://angular.io/cli/generate#component)\n- `modules/user-signin` is the directory from `src/app` where the module will be located, this command will also understand that we want to add this component to the already generated module.\n\n```\nng g c modules/user-signin \n```\n\nYou should see an output similar to below: Loading image...\n\n### Update User Signin Template[](https://codingcat.dev/courses/angularmaterial/firebase-authentication-and-authorization#update-user-signin-template)\n\nWe just need a very simple div so that firebaseUI can locate the ID and then inject itself.[/src/app/modules/user/user-signin/user-signin.component.html](https://github.com/AJONPLLC/lesson15-firebase-AuthZ-AuthN/blob/47f8096c133371ac5d9116c0622abc01d553f100/src/app/modules/user/user-signin/user-signin.component.html#L1)\n\n```\n<div id=\"firebaseui-auth-container\"></div> \n```\n\n## Firestore Authorization (AuthZ)[](https://codingcat.dev/courses/angularmaterial/firebase-authentication-and-authorization#firestore-authorization-authz)\n\n> ⏸ Continuing to update...\n",
    "iso8601Date": "2019-01-09T00:00:00-05:00",
    "basename": "firebase-authentication-and-authorization"
  },
  "firebase-project-hosting": {
    "title": "Firebase Project Hosting",
    "date": "2018-11-26",
    "preview": "https://youtu.be/sOn3YMdpYR4\n\n## Firebase Console\n\nGo to the …",
    "content": "\n\nhttps://youtu.be/sOn3YMdpYR4\n\n## Firebase Console\n\nGo to the [Firebase Console](https://console.firebase.google.com/)If this is your first firebase project you will need to Sign in to Google\n\n![Google Login](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1543272442/ajonp-ajonp-com/1-lesson/Screen_Shot_2018-11-26_at_5.44.44_PM.png)\n\n## Create Project\n\nNow you can click the button to add a new Project\n\n![Create Project](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1543272442/ajonp-ajonp-com/1-lesson/Screen_Shot_2018-11-26_at_5.46.16_PM.png)\n\n## Hosting\n\nAt this point many if the blogs will start talking about setting up the database, but I want to keep this really simple \"Hello World\" style.You can now navigate over to the hosting area within firebase.\n\n![Firebase Hosting](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1543452867/ajonp-ajonp-com/1-lesson/Screen_Shot_2018-11-28_at_7.49.10_PM.png)\n\nIf you take a look at [Firebase hosting quickstart](https://firebase.google.com/docs/hosting/) it also has a great guide.If you are all new to programming you may not have installed [Node or NPM](https://nodejs.org/en/) yet, just follow this link and install the LTS version.\n\n![NodeJs with NPM](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1543691205/ajonp-ajonp-com/1-lesson/node_download.png)\n\n## Hosting Deploy\n\nNow you can select \"Get started\" to walkthrough the guided tips from Firebase - Hosting.\n\n![Hosting Get Started](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1543691320/ajonp-ajonp-com/1-lesson/Screen_Shot_2018-12-01_at_2.08.17_PM.png)\n\n### Install Firebase Tools\n\n```\nnpm install -g firebase-tools \n```\n\n### Login with firebase\n\n```\nfirebase login \n```\n\n### Make a new directory\n\n```\nmkdir ~/Downloads/lesson-1-firebase-project cd ~/Downloads/lesson-1-firebase-project \n```\n\n### Initialize firebase\n\n```\nfirebase init \n```\n\n#### Selections\n\n1. Up/Down key to move to Hosting\n2. Hit spacebar to make selection\n3. Enter to continue to next setup\n4. Navigate to your newly created firebase project\n5. Hit enter to accept public as location to serve files\n6. Key n, Enter for not making this a single page app.\n7. Firebase initialization complete!\n\n#### Firebase project file\n\n.firebaserc\n\n```\n{\n  \"projects\": {\n    \"default\": \"ajonp-lesson-1\"\n  }\n}\n\n```\n\n#### Firebase hosting file\n\nfirebase.json\n\n```\n{\n  \"hosting\": {\n    \"public\": \"public\",\n    \"ignore\": [\n      \"firebase.json\",\n      \"**/.*\",\n      \"**/node_modules/**\"\n    ]\n  }\n}\n\n```\n\n### Deploy firebase\n\nBecause you are logged into the CLI, the two files above tell firebase the project to use, and how they will be served on nginx. Now you just need to run the deploy command.\n\n```\nfirebase deploy \n```\n\nNow back inside the firebase console you should see that hosting has now been completed.\n\n![Firebase Hosting Files](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1543784444/ajonp-ajonp-com/1-lesson/hosting_after_deploy.png)\n",
    "iso8601Date": "2018-11-26T00:00:00-05:00",
    "basename": "firebase-project-hosting"
  },
  "firestore-modeling": {
    "title": "Firestore Modeling",
    "date": "2020-09-16",
    "preview": "https://youtu.be/XfOaUonBTsk?t=4048\n\n> You must have …",
    "content": "\n\nhttps://youtu.be/XfOaUonBTsk?t=4048\n\n> You must have [Node](https://nodejs.org/en/download/) installed so you can leverage npm.  \n> This module is part of a series if you would like to start from here please execute\n\n```\ngit clone https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs.git && cd ajonp-ajsbooks-nextjs && git checkout 04-Navigation && npm i && code .\n```\n\n> If you notice any issues please submit a [pull request](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/pulls)\n\n# Next.js Firebase Firestore\n\nJust a warning up front there is a lot in this module, I would recommend doing it in two parts. I gave a lot of thought into breaking it up into another module but ultimately decided that the material was too tightly coupled to break apart.\n\n## Firestore[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#firestore)\n\nCloud Firestore is a NoSQL, document-oriented database. Unlike a SQL database, there are no tables or rows. Instead, you store data in documents, which are organized into collections. Each document contains a set of key-value pairs. Cloud Firestore is optimized for storing large collections of small documents. All documents must be stored in collections. Documents can contain subcollections and nested objects, both of which can include primitive fields like strings or complex objects like lists. Collections and documents are created implicitly in Cloud Firestore. Simply assign data to a document within a collection. If either the collection or document does not exist, Cloud Firestore creates it.If this is a new concept for you please read through [Cloud Firestore Data model](https://firebase.google.com/docs/firestore/data-model).\n\n### Firestore Data Model[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#firestore-data-model)\n\nThis is how I typically think of the data model, it is very similar (if not the same) as how Firebase's Firestore guide shows.\n\n![Firestore Model](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/5-Firebase/Firestore_Model.png)\n\n### AJ's Data Model[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#ajs-data-model)\n\nSpecifically for AJ's Books application we will have a structure that seems like this (although there are no folders):\n\n![AJ's Books Model](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/5-Firebase/Base-Model.png)\n\n### Firestore Example Book[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#firestore-example-book)\n\n![AJ Book Model](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/5-Firebase/Book-Data-Model.png)\n\n### Firestore Example Author[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#firestore-example-author)\n\n![AJ Author Model](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/5-Firebase/Author-Data-Model.png)\n\n### Create Firestore Database[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#create-firestore-database)\n\nOn the side menu under Develop, select Database. You will then be presented with a screen to `Create Database`.\n\n![Create Firestore DB](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/5-Firebase/Screen_Shot_2019-08-29_at_3.23.38_PM.png)\n\nPlease leave your Firestore Database in Locked mode. This prevents any security concerns.\n\n![Locked Mode](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/5-Firebase/Screen_Shot_2019-08-29_at_3.23.46_PM.png)\n\n### Firebase Admin SDK Private Key[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#firebase-admin-sdk-private-key)\n\nIn order to use this tool you will need to add your own firebase credentials, you can find this in your project settings under service accounts `https://console.firebase.google.com/project/ajonp-ajs-books/settings/serviceaccounts/adminsdk`.\n\n![Firebase SDK Private Key](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/5-Firebase/Firebase_Private_Key.png)\n\nYou will get a warning, this is fine and why I put in our `.gitignore` the file we are creating `firebase_credentials.json`.\n\n![Private Key Generate](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/5-Firebase/Screen_Shot_2019-08-29_at_3.20.56_PM.png)\n\n### Adding Firestore Sample Data[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#adding-firestore-sample-data)\n\nYou are going to create sample data for the books collection in Firestore by using the Firebase Admin API. There is probably more efficent ways to do this but I really like using the [Faker API](https://github.com/Marak/faker.js).Please clone this repo locally and install the dependencies.\n\n```\ngit clone https://github.com/AJONPLLC/ajonp-ajsbooks-db-example.git && cd ajonp-ajsbooks-db-example && npm i \n```\n\nMake sure you rename any file you download to `firebase_credentials.json` then place that file into the root of our project.\n\n![root of project](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/5-Firebase/Screen_Shot_2019-08-29_at_3.28.51_PM.png)\n\nIf you forget this you will get this error:\n\n![Firestore Error](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/5-Firebase/Screen_Shot_2019-08-29_at_3.49.05_PM.png)\n\nNow you can run the config script:\n\n```\nnpm run config \n```\n\nThis adds dropdown based data that we will use later.\n\n```\nmodule.exports = { ageCategory: { board: 'Age 0-2', earlyReader: 'Age 6-8', middleGrade: 'Age 9-12', picture: 'Age 3-5', youngAdult: 'Age 13-18' }, fiction: [ 'Classic', 'Comics/Graphic novel', 'Crime/detective', 'Fable', 'Fairy tale', 'Fan fiction', 'Fantasy', 'Folklore', 'Historical Fiction', 'Horror', 'Humor', 'Legend', 'Magical Realism', 'Meta Fiction', 'Mystery', 'Mythology', 'Mythopoeia', 'Picture Book', 'Realistic Fiction', 'Science Fiction', 'Short Story', 'Suspense/thriller', 'Swashbuckler', 'Tall Tale', 'Western' ], nonFiction: [ 'Biography', 'Essay', 'Owners Manual', 'Journalism', 'Lab Report', 'Memoir', 'Narrative', 'Reference Book', 'Self-Help Book', 'Speech', 'Text Book' ], options: { hasAudio: false, hasPhotos: false, hasVideo: false }, status: ['Published', 'Working Copy'] }; \n```\n\nNow (finally), we can add all the important book data.\n\n```\nnpm run start \n```\n\nYou should see an output like:\n\n![book script output](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/5-Firebase/Screen_Shot_2019-08-29_at_3.44.59_PM.png)\n\nYou can also open your Firebase console and take a look at all the books, with subcollection of chapters, with subcollection of pages. There should be 5 books, with 5 chapters, and 50 pages, each time your run the program.\n\n> Okay you made it! We are half way there, go grab a ☕️ or maybe a ????.\n\n## Add Firebase Frontend Config[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#add-firebase-frontend-config)\n\nIf you are new to Firebase you could be asking yourself right now why is he splashing his keys all over the place?You must remember that this is front end coding and it will be public anyways. So this is where I will mention in order to have a secure app, you must put solid security rules into your database.\n\n### Full code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#full-code)\n\n/lib/firebase.ts\n\n```\nconst firebaseConfig = { apiKey: 'AIzaSyCXLldoMUB_AxaLpvG4pQ9Pzg9bEqpMgTA', authDomain: 'ajonp-ajs-books.firebaseapp.com', databaseURL: 'https://ajonp-ajs-books.firebaseio.com', projectId: 'ajonp-ajs-books', storageBucket: 'ajonp-ajs-books.appspot.com', messagingSenderId: '936263241017', appId: '1:936263241017:web:5faee456c1ed2da8' }; export default async function loadFirebase() { const firebase = await import('firebase/app'); await import('firebase/firestore'); try { const app = firebase.initializeApp(firebaseConfig); firebase.firestore(app); } catch (err) { // we skip the \"already exists\" message which is // not an actual error when we're hot-reloading console.log(err); if (!/already exists/.test(err.message)) { console.error('Firebase initialization error', err.stack); } } return firebase; } \n```\n\n## Firestore rules[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#firestore-rules)\n\nFor now we are going to manually update our rules (later we will use the Firebase CLI) to match below:\n\n### Full Code (rules)[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#full-code-rules)\n\n```\nservice cloud.firestore { match /databases/{database}/documents { match /{document=**} { allow read, write: if false; } // This function allows us to look at AuthZ (Authorization) roles within our database, to see who is allowed for activities. function getRole(role) { return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles[role] } // Users match /users/{userId} { allow read: if request.auth.uid != null; allow create: if request.resource.data.roles.keys().hasAny(['admin', 'editor']) == false; allow update: if request.resource.data.roles.keys().hasAny(['admin', 'editor']) == false || resource.data.roles.keys().hasAny(['admin', 'editor']) == true; } match /config/{configId}{ allow read: if true; } match /books/{bookId}{ allow create: if getRole('admin') == true; allow read: if true; allow update: if getRole('editor') == true || getRole('admin') == true; allow delete: if getRole('admin') == true; match /chapters/{chapterId}{ allow create: if getRole('admin') == true; allow read: if true; allow update: if getRole('editor') == true || getRole('admin') == true; allow delete: if getRole('admin') == true; match /pages/{pageId}{ allow create: if getRole('admin') == true; allow read: if true; allow update: if getRole('editor') == true || getRole('admin') == true; allow delete: if getRole('admin') == true; } } } match /authors/{authorId}{ allow create: if getRole('admin') == true; allow read: if true; allow update: if getRole('editor') == true || getRole('admin') == true; allow delete: if getRole('admin') == true; } match /graphicnovels/{gnId}{ allow create: if getRole('admin') == true; allow read: if true; allow update: if getRole('editor') == true || getRole('admin') == true; allow delete: if getRole('admin') == true; } } } \n```\n\n### Staying Locked[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#staying-locked)\n\nThis snippet should always remain, you will see errors in your console that will help you to determine if you should update your rules further.\n\n```\n match /{document=**} { allow read, write: if false; } \n```\n\n### Custom Rule Functions[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#custom-rule-functions)\n\n[Custom Rule Functions](https://firebase.google.com/docs/firestore/security/rules-conditions#custom_functions) help us easily address how secure we want to lock down our app. For now we don't want anyone but a user who has `admin` rights to create/update/delete our data.The function below returns a boolean value based on the currently signedin user.\n\n```\n // This function allows us to look at AuthZ (Authorization) roles within our database, to see who is allowed for activities. function getRole(role) { return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles[role] } \n```\n\nWe can then easily check for this value by calling the function `getRole()`, which will lookup the currently signed in user and see if they have the role `admin` set to true in our roles `map`. You can find all the data types available in [Firestore Data Types](https://firebase.google.com/docs/firestore/manage-data/data-types).\n\n```\nallow create: if getRole('admin') == true; \n```\n\nHere you can see that I have set my `admin@ajonp.com` user to be an `admin`. Note: all users in our application get the role `subscriber`.\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/image-62.png)\n\n![user admin](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/5-Firebase/Screen_Shot_2019-09-03_at_12.56.44_PM.png)\n\n### Books rules[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#books-rules)\n\nNow if you remember from our [Model Diagram](https://ajonp.com/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling/#aj-s-data-model), we will be adding a `books` main collection with `chapters` subcollection then within `chapters` you will have a `pages` subcollection.\n\n```\n match /books/{bookId}{ allow create: if getRole('admin') == true; allow read: if true; allow update: if getRole('editor') == true || getRole('admin') == true; allow delete: if getRole('admin') == true; match /chapters/{chapterId}{ allow create: if getRole('admin') == true; allow read: if true; allow update: if getRole('editor') == true || getRole('admin') == true; allow delete: if getRole('admin') == true; match /pages/{pageId}{ allow create: if getRole('admin') == true; allow read: if true; allow update: if getRole('editor') == true || getRole('admin') == true; allow delete: if getRole('admin') == true; } } } \n```\n\n### Manual upload[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#manual-upload)\n\nNavigate to the firebase console -> Database -> Rules tab. Then copy and paste all of the code from above, you should then be able to publish.\n\n![Rules Publish](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/6-firebase-project/Screen_Shot_2019-09-03_at_1.05.36_PM.png)\n\n### Lazy Loading Modules[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#lazy-loading-modules)\n\nThis example of loading firebase is based on the [Next.js Lazy Loading Modules Tutorial](https://nextjs.org/learn/excel/lazy-loading-modules). This is the best way to add firebase into your project. If you have a requirement to switch between multiple environments, you can check for the Node Env variables and also set this up.\n\n## Add Models[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#add-models)\n\nYes models take time to setup and make you fight ever instinct you have to be lazy, this is JS right? Well no you are in TS land now, you need to have well defined objects so that you don't miss any data, and can also utilize things like creating a new class for data. You will also recognize the file types are typescript, since you are not using JSX at this time only TypeScript.\n\n### AjonpUser Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#ajonpuser-full-code)\n\n/models/AjonpUser.ts\n\n```\nexport default class AjonpUser { aboutYou?: string; created?: number; displayName?: string; email?: string; emailVerified?: boolean; favoriteColor?: string; lastActive?: number; phoneNumber?: string; photoURL?: string; roles?: AjonpRoles; token?: string; uid?: string; untappd?: { access_token?: string; }; website?: string; public constructor(init?: Partial<AjonpUser>) { Object.assign(this, init); } } export class AjonpRoles { admin?: boolean; editor?: boolean; subscriber?: boolean; } \n```\n\n### Book Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#book-full-code)\n\n/models/Book.ts\n\n```\nimport { Timestamp } from '@firebase/firestore-types'; export default class Book { ageCategory?: string; authorDisplayName?: string; authorId?: string; description?: string; fiction?: boolean; genre?: string; hasAudio?: boolean; hasPhotos?: boolean; hasVideos?: boolean; id?: string; image?: string; publishDate?: Timestamp | Date; rating?: number; status?: string; title?: string; updatedAt?: Timestamp | Date; public constructor(init?: Partial<Book>) { Object.assign(this, init); } } \n```\n\n### Author Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#author-full-code)\n\nAuthor is one of those special cases where you want to know all the books that this Author has written. Maybe not the full object but a number of key fields.\n\n```\nimport Book from './Book'; export default class Author { books?: Book[]; displayName?: string; email?: string; id?: string; name?: string; profileImage?: string; social?: Map<string, string>; summary?: string; uid?: string; website?: string; public constructor(init?: Partial<Author>) { Object.assign(this, init); } } \n```\n\n### Chapter Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#chapter-full-code)\n\n/models/Chapter.ts\n\n```\nexport default class Chapter { id?: string; sort?: number; title?: string; numOfSections?: number; public constructor(init?: Partial<Chapter>) { Object.assign(this, init); } } \n```\n\n### ConfigBook Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#configbook-full-code)\n\n/models/ConfigBook.ts\n\n```\nexport default class ConfigBook { ageCategory?: Map<string, string>; fiction?: Array<string>; nonFiction?: Array<string>; options?: Map<string, string>; public constructor(init?: Partial<ConfigBook>) { Object.assign(this, init); } } \n```\n\n### GraphicNovel Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#graphicnovel-full-code)\n\n/models/GraphicNovel.ts\n\n```\nimport { Timestamp } from '@firebase/firestore-types'; export default class GraphicNovel { ageCategory?: string; description?: string; fiction?: boolean; genre?: string; hasAudio?: boolean; hasPhotos?: boolean; hasVideos?: boolean; id?: string; image?: string; publishDate?: Timestamp | Date; rating?: number; status?: string; title?: string; updatedAt?: Timestamp | Date; public constructor(init?: Partial<GraphicNovel>) { Object.assign(this, init); } } \n```\n\n### Page Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#page-full-code)\n\n/models/Page.ts\n\n```\nexport default class Page { draft?: boolean; id?: string; number?: number; numOfWords?: number; version?: number; public constructor(init?: Partial<Page>) { Object.assign(this, init); } } \n```\n\n### Section Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#section-full-code)\n\n/models/Section.ts\n\n```\nexport default class Section { description?: string; id?: string; sort?: number; title?: string; numOfPages?: number; public constructor(init?: Partial<Section>) { Object.assign(this, init); } } \n```\n\n## Update BookCard[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#update-bookcard)\n\n### Key MaterialUI Components[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#key-materialui-components)\n\n- CardActionArea: [https://material-ui.com/api/card-action-area/](https://material-ui.com/api/card-action-area/)\n- Card: [https://material-ui.com/api/card/](https://material-ui.com/api/card/)\n- CardActions: [https://material-ui.com/api/card-actions/](https://material-ui.com/api/card-actions/)\n- CardContent: [https://material-ui.com/api/card-content/](https://material-ui.com/api/card-content/)\n- CardMedia: [https://material-ui.com/api/card-media/](https://material-ui.com/api/card-media/)\n- Collapse: [https://material-ui.com/api/collapse/](https://material-ui.com/api/collapse/)\n\n> Not technically MaterialUI Component but it helps a lot clsx: [https://github.com/lukeed/clsx](https://github.com/lukeed/clsx)\n\n### Key Next.js Components[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#key-nextjs-components)\n\n- Link: [https://nextjs.org/docs#with-link](https://nextjs.org/docs#with-link)\n\n> Please note I chose to use the name NextLink, as it was confusing with other link components at the time.\n\n### Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#full-code)\n\nThere is a lot of code here to digest, please take the time to click the links above and dive into those components so you know why they are used.\n\n```\nimport { CardActionArea } from '@material-ui/core'; import Card from '@material-ui/core/Card'; import CardActions from '@material-ui/core/CardActions'; import CardContent from '@material-ui/core/CardContent'; import CardMedia from '@material-ui/core/CardMedia'; import Collapse from '@material-ui/core/Collapse'; import IconButton from '@material-ui/core/IconButton'; import { makeStyles } from '@material-ui/core/styles'; import Typography from '@material-ui/core/Typography'; import ExpandMoreIcon from '@material-ui/icons/ExpandMore'; import clsx from 'clsx'; import NextLink from 'next/link'; import React from 'react'; const useStyles = makeStyles(theme => ({ card: { minWidth: 400, margin: 5, display: 'flex', flexDirection: 'column' }, cardContent: { display: 'flex', flex: '1 0 auto', flexDirection: 'column' }, cardMedia: { height: 0, paddingTop: '65%', backgroundRepeat: 'no-repeat', backgroundSize: 'auto', cursor: 'pointer' }, cardDescription: { width: 368, height: 190, overflow: 'auto' }, cardActions: { display: 'flex', alignItems: 'center', justifyContent: 'space-between' }, expand: { transform: 'rotate(0deg)', marginLeft: 'auto', transition: theme.transitions.create('transform', { duration: theme.transitions.duration.shortest }) }, expandOpen: { transform: 'rotate(180deg)' } })); const BookCard = ({ book }: any) => { const classes = useStyles(); const [expanded, setExpanded] = React.useState(false); const handleExpandClick = () => { setExpanded(!expanded); }; return ( <Card className={classes.card}> <NextLink href=\"/\"> <CardActionArea> <CardMedia className={classes.cardMedia} image=\"/static/images/cards/book.webp\" title={book.title} /> <CardContent className={classes.cardContent}> <Typography variant=\"h3\" component=\"h1\"> {book.title} </Typography> <Typography component=\"p\"> Author: { ${book.authorDisplayName}} </Typography> </CardContent> </CardActionArea> </NextLink> <CardActions className={classes.cardActions}> Summary: <IconButton className={clsx(classes.expand, { [classes.expandOpen]: expanded })} onClick={handleExpandClick} aria-expanded={expanded} aria-label=\"Show more\" > <ExpandMoreIcon /> </IconButton>{' '} </CardActions> <Collapse in={expanded} timeout=\"auto\" unmountOnExit> <CardContent className={classes.cardContent}> <Typography paragraph className={classes.cardDescription}> {book.description} </Typography> </CardContent> </Collapse> </Card> );- }; export default BookCard; \n```\n\nNotice how the `<CardActionArea>` is surrounded by the `<NextLink>`, this makes a very nice clickable section at the top of our Book Card. MaterialUI does a really nice job with subtle touches like this, I am really digging it!!\n\n![Action Area Highlight](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/5-Firebase/Screen_Shot_2019-08-29_at_4.05.40_PM.png)\n\nThere are some downsides (mostly from my inexperience), with things like the CardAction and how the Flexbox is working. Notice in this video that when expanded all cards grow, but only the one you select shows text.\n\n## Update books Page[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#update-books-page)\n\n### What is RxFire[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#what-is-rxfire)\n\n[RxFire Intro Blog](https://firebase.googleblog.com/2018/09/introducing-rxfire-easy-async-firebase.html) I have two demos currently on how you can use this wonderful javascript package to get streams from Firestore. I have heard that their is an RxFire specific to ReactJS that is coming out soon too.\n\n1. [RxFire in Svelte 3](https://ajonp.com/lessons/rxfire-in-svelte-3-using-firebase-firestore-and-authentication/)\n2. [RxFire in ReactJS](https://ajonp.com/lessons/rxfire-in-reactjs-using-firebase-firestore-and-authentication/)\n\n`collectionData` Returns a stream of documents mapped to their data payload, and optionally the document ID. You provide `bookId` so that it does return the ID. Now anytime the books collection in Firestore is updated the observable streams this to our application.\n\n### Key RxFire Components[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#key-rxfire-components)\n\n- collectionDate: [https://github.com/firebase/firebase-js-sdk/blob/master/packages/rxfire/README.md#example-use](https://github.com/firebase/firebase-js-sdk/blob/master/packages/rxfire/README.md#example-use)\n\n### Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#full-code)\n\nYou are going to finally add some \"real\" logic to one of our pages. The key here is the introduction of Firebase.\n\n1. Use `await loadFirebase();` so that we wait for the firebase package to finish loading.\n2. Then aquire a reference to the collections in Firestore `const booksRef = firebase.firestore().collection('books');`.\n3. Setup an [Observable](https://rxjs-dev.firebaseapp.com/guide/observable) that a [Subscription](https://rxjs-dev.firebaseapp.com/api/index/class/Subscription) can be setup to listen to any changes. This is where the power of RxFire shines. Any time we see an update coming we will simple update the current state with an array of books.\n4. For each of the books we will then use the BookCard Component and populate the data to show on the screen.\n\n```\n<Grid container direction=\"row\" justify=\"center\"> {this.state.books.map((book: Book) => { return <BookCard book={book} key={book.id} />; })} </Grid> \n```\n\n/pages/books.tsx\n\n```\nimport Grid from '@material-ui/core/Grid'; import React, { Component } from 'react'; import { collectionData } from 'rxfire/firestore'; import BookCard from '../components/BookCard'; import loadFirebase from '../lib/firebase'; import Book from '../models/Book'; export default class Books extends Component { state: { books: Book[] } = { books: [] }; async componentDidMount() { const firebase = await loadFirebase(); const booksRef = firebase.firestore().collection('books'); collectionData(booksRef, 'bookId').subscribe(books => { this.setState({ books }); }); } render() { return ( <Grid container direction=\"row\" justify=\"center\"> {this.state.books.map((book: Book) => { return <BookCard book={book} key={book.id} />; })} </Grid> ); } } \n```\n\n## Theme Update(optional)[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#theme-updateoptional)\n\nI decided my eyes were hurting at this point so I switched the theme file to have a dark type and included deepPurple as primary and pink as secondary. Feel free to change as much or as little as you want! I could probably do a full course on [MaterialUI Theming](https://material-ui.com/customization/theming/), and who knows maybe I will ????.\n\n### Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#full-code)\n\n```\nimport deepPurple from '@material-ui/core/colors/deepPurple'; import pink from '@material-ui/core/colors/pink'; import red from '@material-ui/core/colors/red'; import { createMuiTheme } from '@material-ui/core/styles'; // Create a theme instance. const theme = createMuiTheme({ palette: { type: 'dark', primary: deepPurple, secondary: pink, error: { main: red.A400 } } }); export default theme; \n```\n\n### Analyze Bundle(optional)[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling#analyze-bundleoptional)\n\nPlease take the time to checkout why it is important that we load Firebase using an `await import` statement instead of just declaring it as a `const`;\n\n> If you get to the end and something is broken just grab the full branch\n\n```\ngit checkout 05-Firebase -f && npm i\n```\n",
    "iso8601Date": "2020-09-16T00:00:00-04:00",
    "basename": "firestore-modeling"
  },
  "how-to-sign-in-on-codingcatdev": {
    "title": "How to Sign In on CodingCatDev",
    "date": "2020-10-30",
    "preview": "",
    "content": "\n\n\n",
    "iso8601Date": "2020-10-30T00:00:00-04:00",
    "basename": "how-to-sign-in-on-codingcatdev"
  },
  "html-basics": {
    "title": "HTML Basics",
    "date": "2020-09-17",
    "preview": "![](https://codingcat.dev/wp-content/uploads/2020/09/ForA10YearOldHT …",
    "content": "\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/ForA10YearOldHTMLBasics-1024x576.png)\n\nHey there Purr-fect Peep, so you have decided to start learning Web Development. That is AWESOME! In HTML Basics we will cover some of the history of the Web and many of the basiscs you will need to get started. We are continuously looking for feedback on how to improve the page so please feel free to jump on our [slack workspace](https://link.ajonp.com/slack) for any help or suggestions.\n\n## History of the Web[](https://codingcat.dev/courses/html-for-a-10-year-old/html-basic#history-of-the-web)\n\nIn the very begining the Web did not require as much interactiveness as it has today. When Tim Berners-Lee created it in 1989 working at CERN it was to help link together several disparate systems that did not \"talk\" with each other. You can still see the original design [here](http://info.cern.ch/Proposal.html).\n\n> By October of 1990, Tim had written the three fundamental technologies that remain the foundation of today’s web:HTML:\n> \n> 1\\. HyperText Markup Language. The markup (formatting) language for the web.\n> \n> 2\\. URI: Uniform Resource Identifier. A kind of “address” that is unique and used to identify to each resource on the web. It is also commonly called a URL.\n> \n> 3\\. HTTP: Hypertext Transfer Protocol. Allows for the retrieval of linked resources from across the web.\n> \n> [https://webfoundation.org/about/vision/history-of-the-web/](https://webfoundation.org/about/vision/history-of-the-web/)\n\nEven today you can write web pages with only these 3 basic technologies. Often people will jump right into learning CSS, JavaScript or a large Framework. It is best to know what those technologies do by building up your level of understanding \"block by block\"!\n\n## HTML Documents[](https://codingcat.dev/courses/html-for-a-10-year-old/html-basic#html-documents)\n\nThere are three key items that make up an HTML Document.\n\n1. All HTML documents must start with a document type declaration: `<!DOCTYPE html>`.\n2. The HTML document itself begins with `<html>` and ends with `</html>`.\n3. The visible part of the HTML document is between `<body>` and `</body>`.\n\nThe simplest page you can write is the most legendary \"Hello World\" example. As you can see in this below sample it just has the worlds within the body of a document.\n\n<iframe src=\"https://codesandbox.io/embed/html-for-a-10-year-old-basics-hello-world-vhigc?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"html-for-a-10-year-old-basics-hello-world\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n### Syntax[](https://codingcat.dev/courses/html-for-a-10-year-old/html-basic#syntax)\n\n#### Tags[](https://codingcat.dev/courses/html-for-a-10-year-old/html-basic#tags)\n\nIn order for the browser to understand and process the markup we need to place what we call opening `<>` and closing `</>` tags around content. Anything between the two tags will be represented by that markup. So in the case of our \"Hello World\" example there is no styling the browser just knows it belongs within the body, which belongs to the html. It does not however belong to the head, because as you can see in the code above the head was already closed with `</head>`.\n\n#### Element[](https://codingcat.dev/courses/html-for-a-10-year-old/html-basic#element)\n\nWhen you use a tag with the content in the middle like `<h1>Hello World</h1>`, this represents an entire html element. You can also nest elements, for example we would place this h1 tag into our body element.\n\n```\n<body>\n  <h1>Hello</h1>\n</body>\n```\n\n#### Attributes[](https://codingcat.dev/courses/html-for-a-10-year-old/html-basic#attributes)\n\nAnything that exists within the starting tag name is what we call an attribute like `<h1 id='hello'>Hello</h1>`. Attributes allow for us to place additional information into and about the tag. There are two types of Some of the most popular global HTML attributes are `id`, `css`, and `style`. In the link section below you will begin to see how we can use id. In our CSS for a 10 year old we will dive further into the css and style attribute.\n\n## HTML Headings[](https://codingcat.dev/courses/html-for-a-10-year-old/html-basic#html-headings)\n\nHTML headings are defined with the `<h1>` to `<h6>` tags.`<h1>` defines the most important heading. `<h6>` defines the least important heading.In the example below you will notice that the text is between our opening and closing tag which makes the text look differently. Browsers come with predefined styles which allow for the difference visually, otherwise this would only be represented in the markup.\n\n<iframe src=\"https://codesandbox.io/embed/html-for-a-10-year-old-basics-jfej6?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"html-for-a-10-year-old-basics\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n## HTML Paragraphs[](https://codingcat.dev/courses/html-for-a-10-year-old/html-basic#html-paragraphs)\n\nThinking back to the time when Tim created the first version of HTML, he was trying to link up documents between computers. So the paragraph was pretty important and is still one of the most commonly used html tags today. Paragraphs represent a change in the text, but again don't be fooled each browser can implement the styling differently.\n\n<iframe src=\"https://codesandbox.io/embed/html-for-a-10-year-old-basics-hello-world-paragraphs-kmdgh?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"html-for-a-10-year-old-basics-hello-world-paragraphs\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n## HTML Links[](https://codingcat.dev/courses/html-for-a-10-year-old/html-basic#html-links)\n\nThe first example of using a link is something called an anchor tag to reference within themselves. In order to do this we give a `div` and identifier using `id=` this way a link can be used so that the browser can reference the location of that id within the current page. This anchor is used in the a tag's attribute href by placing a `#` (for you young kids a hashtag) in front of the identifier. See below where we use `<a href=\"#divBtm\">Link to Bottom Div</a>` to anchor to the div with id divBtm `<div id=\"divBtm\">Bottom Div</div>`.You can think of links as the webs version of house addresses. URI (Uniform Resource Identifier) is one of Tim's best ideas and unbelieveably forward thinking. Instead of just having a set of random numbers like `104.198.14.52` you can specify an address that has meaning like [https://ajonp.com](https://ajonp.com/), this is used in the a tag's attribute href. The ajonp.com version is called a URL (Uniform Resource Locator) and is more commonly known as a web address. This allows us to say AJ's house instead of the number.\n\n<iframe src=\"https://codesandbox.io/embed/html-for-a-10-year-old-links-b1nzd?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"html-for-a-10-year-old-links\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n## HTML Images[](https://codingcat.dev/courses/html-for-a-10-year-old/html-basic#html-images)\n\nImages make up a large portion of the web and have had significant updates in more modern browsers. Keeping things very simple to start you only need the tag `<img>` and a single attribute `src`.\n\n<iframe src=\"https://codesandbox.io/embed/html-for-a-10-year-old-basics-img-glnek?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"html-for-a-10-year-old-basics-img\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n## HTML Buttons[](https://codingcat.dev/courses/html-for-a-10-year-old/html-basic#html-buttons)\n\nButton tags are fairly simple but yet very powerful. They can be combined with forms (something we will cover in another module) which take user input data and then the button will submit this data. This is done through the button attribute `type.` The type attribute will allow the button to represent `button`, `submit`, and `reset`.\n\n<iframe src=\"https://codesandbox.io/embed/html-for-a-10-year-old-basics-button-kjgj0?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"html-for-a-10-year-old-basics-button\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n## HTML Lists[](https://codingcat.dev/courses/html-for-a-10-year-old/html-basic#html-lists)\n\nWhen you are writing you often will want to use lists of items. HTML5 offers us two different types of lists **u**nordered list `<ul>` and **o**rdered list `<ol>`. You can use many different styles for both of these lists using css. For ordered lists you have an HTML attribute `type` that can be used. For unordered lists you must use styles only to change the look, for example `style=\"list-style-type:circle;\"` will create an item with a circle at the front.For both list types you will have items that exist in that list represented with the tag `<li>`. This tag will have the actual content for each item in the list.\n\n<iframe src=\"https://codesandbox.io/embed/html-for-a-10-year-old-basics-lists-rqnq6?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"html-for-a-10-year-old-basics-lists\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n> Please see [https://www.w3schools.com/html/html\\_basic.asp](https://www.w3schools.com/html/html_basic.asp) as I used that as a reference for much of this tutorial.\n",
    "iso8601Date": "2020-09-17T00:00:00-04:00",
    "basename": "html-basics"
  },
  "html-table": {
    "title": "HTML Table",
    "date": "2020-09-17",
    "preview": "![HTML for a 10 Year Old …",
    "content": "\n\n![HTML for a 10 Year Old Tables](https://codingcat.dev/wp-content/uploads/2020/09/ForA10YearOldHTMLTable-1024x576.png)\n\n> Please note if you are new to web development do not use tables for laying out pages. This was something that happened 20 years ago but we have come a long way since then ;)\n\n## Full Table Example[](https://codingcat.dev/courses/html-for-a-10-year-old/html-table#full-table-example)\n\nBelow is an example of the entire table, we will walk through each part and how to create this table.\n\n- <table> Defines a table\n- <th> Defines a header cell in a table\n- <tr> Defines a row in a table\n- <td> Defines a cell in a table\n- <caption> Defines a table caption\n- <colgroup> Specifies a group of one or more columns in a table for formatting\n- <col> Specifies column properties for each column within a <colgroup> element\n- <thead> Groups the header content in a table\n- <tbody> Groups the body content in a table\n- <tfoot> Groups the footer content in a table\n\n<iframe src=\"https://codesandbox.io/embed/html-for-a-10-year-old-table-complete-wif2m?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%;height:500px;border:0;border-radius: 4px;overflow:hidden\"></iframe>\n\n## Basic Tables[](https://codingcat.dev/courses/html-for-a-10-year-old/html-table#basic-tables)\n\nIn the most basic example of a table you only need the `<table>`, `<tr>`, `<td>` tags. In this example you have a table with a single row (horizontal) and 6 columns (vertical), to show our peeps in a 1x6 configuration.\n\n```\n<table>\n  <tr>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n  </tr>\n</table>\n```\n\nIf we want a basic table to show our peeps in one column (vertical) with six rows (horizontal) you need to add a `<tr>` to surround each `<td>`, to show a 6x1 configuration\n\n```\n<table>\n  <tr>\n    <td>????</td>\n  </tr>\n  <tr>\n    <td>????</td>\n  </tr>\n  <tr>\n    <td>????</td>\n  </tr>\n  <tr>\n    <td>????</td>\n  </tr>\n  <tr>\n    <td>????</td>\n  </tr>\n  <tr>\n    <td>????</td>\n  </tr>\n</table>\n```\n\nFinally if we need a table with all six columns (vertical) and all six rows (horizontal) it would need to include six `<td>` tags inside of six `<tr>` tags.\n\n```\n<table>\n  <tr>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n  </tr>\n  <tr>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n  </tr>\n  <tr>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n  </tr>\n  <tr>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n  </tr>\n  <tr>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n  </tr>\n  <tr>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n    <td>????</td>\n  </tr>\n</table>\n```\n\nBecause we are using every cell in the table examples above it makes setting them up very easy. There could be times when you have empty cells requirements. Now you might think that would be easy if you just need two blank cells you remove two of the `<td>` tags. However, the issue is that the browser moves every column to the left (or right if you are in RTL), causing you to actually leave a blank, therefore you need to put in an empty <td></td> element to take up a column worth of space with nothing in it.\n\n```\n    <table>\n      <tr>\n        <td></td>\n        <td>????</td>\n        <td>????</td>\n        <td>????</td>\n        <td>????</td>\n        <td>????</td>\n      </tr>\n      <tr>\n        <td>????</td>\n        <td></td>\n        <td>????</td>\n        <td>????</td>\n        <td>????</td>\n        <td>????</td>\n      </tr>\n      <tr>\n        <td>????</td>\n        <td>????</td>\n        <td></td>\n        <td>????</td>\n        <td>????</td>\n        <td>????</td>\n      </tr>\n      <tr>\n        <td>????</td>\n        <td>????</td>\n        <td>????</td>\n        <td></td>\n        <td>????</td>\n        <td>????</td>\n      </tr>\n      <tr>\n        <td>????</td>\n        <td>????</td>\n        <td>????</td>\n        <td>????</td>\n        <td></td>\n        <td>????</td>\n      </tr>\n      <tr>\n        <td>????</td>\n        <td>????</td>\n        <td>????</td>\n        <td>????</td>\n        <td>????</td>\n        <td></td>\n      </tr>\n    </table>\n```\n\n### Live Basic Examples[](https://codingcat.dev/courses/html-for-a-10-year-old/html-table#live-basic-examples)\n\n<iframe src=\"https://codesandbox.io/embed/html-for-a-10-year-old-table-1-wqev6?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%;height:500px;border:0;border-radius: 4px;overflow:hidden\"></iframe>\n\n## The Header[](https://codingcat.dev/courses/html-for-a-10-year-old/html-table#the-header)\n\nWhen you see tables in action you often have data that needs to be labeled. The best way to make this happen is by adding a `<thead>` element to your table and adding header cells `<th>` to the element to help in labeling this data.\n\n```\n<table>\n  <thead>\n    <tr>\n      <!-- Normal Header Cell -->\n      <th>Name</th>\n      <!-- Column Span Header Cell -->\n      <th>Purrfect Peeps</th>\n    </tr>\n  </thead>\n  <tbody>\n    <!-- Row 1 -->\n    <tr>\n      <!-- Normal Cells -->\n      <td>Nick</td>\n      <td>????</td>\n    </tr>\n    <!-- Row 2 -->\n    <tr>\n      <!-- Normal Cell -->\n      <td>AJ</td>\n      <td>????</td>\n      <td>????</td>\n      <td>????</td>\n      <td>????</td>\n      <td>????</td>\n      <td>????</td>\n    </tr>\n  </tbody>\n</table>\n```\n\nNow this simple table setup will work great with a single cell for each column in the first row. But if we add the next row and it has 6 purrfect peeps, we really want to show that the header cell \"Purrfect Peeps\" is meant for all cells that have emojis.Below you can see the difference between the top table without colspan and with colspan in the second table. Without the colspan the \"Purrfect Peeps\" cell is taken up by only the cat in the second row, and it does not cover the dog, unicorn, bear, zebra, or otter. In the second table we use \"colspan\" `<th colspan=\"6\">Purrfect Peeps</th>` to tell the browser that this header should span all 6 columns, notice how all the cells center under the heading.\n\n<iframe src=\"https://codesandbox.io/embed/html-for-a-10-year-old-table-columnspan-jdp9q?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%;height:500px;border:0;border-radius: 4px;overflow:hidden\"></iframe>\n\n## Nested Table[](https://codingcat.dev/courses/html-for-a-10-year-old/html-table#nested-table)\n\nThere is a great deal of power ????that you can add to your tables by nesting an entire table into a cell. I often forget to wrap this with a <table> tag so please don't just try to add rows <tr> within a <td> tag and think this will work, it needs to be represented by an entire table. As you can see below we have added social links as an entire table within a cell.\n\n```\n <!-- Nested Table Inside of cell -->\n  <td>\n    <table>\n      <tr>\n        <td>\n          <a href=\"https://link.ajonp.com/twitter\">Twitter</a>\n        </td>\n      </tr>\n      <tr>\n        <td>\n          <a href=\"https://link.ajonp.com/linkedin\">LinkedIn</a>\n        </td>\n      </tr>\n    </table>\n  </td>\n```\n\nBelow you can start to see that the parent header row \"Socials\" still represents all data in the cell, even the nested table in the second row with a 4x4 table.\n\n<iframe src=\"https://codesandbox.io/embed/html-for-a-10-year-old-table-colgroup-wlspl?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%;height:500px;border:0;border-radius: 4px;overflow:hidden\"></iframe>\n\n## Column Group[](https://codingcat.dev/courses/html-for-a-10-year-old/html-table#column-group)\n\nThe column group tag `<colgroup>` can be used for styling entire columns at a time, instead of having to update each cell individually. Something that you will often see is a single column highlighted. This provides a valuable tool that is a commun use case for highlighting an entire column. By this simple code snippet we can highlight the socials to include a background of pink.\n\n```\n  <colgroup>\n    <col />\n    <col style=\"background-color:pink\" />\n  </colgroup>\n```\n\n## Footer[](https://codingcat.dev/courses/html-for-a-10-year-old/html-table#footer)\n\nA very commun use case for a footer and the reason for calling it out seperately is to include Totals or Aggregations (fancy math like word for adding stuff). In this example we just add some text with fun phrase.\n\n```\n      <tfoot style=\"background-color:purple; color: white;\">\n        <tr>\n          <td colspan=\"8\">\n            AJ's Peep List! This is an example of a unique footer area.\n          </td>\n        </tr>\n      </tfoot>\n```\n\n<iframe src=\"https://codesandbox.io/embed/html-for-a-10-year-old-table-footer-npnt7?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%;height:500px;border:0;border-radius: 4px;overflow:hidden\"></iframe>\n\n> Pro Tip: by keeping a seperate header and footer tag it allows large table body content to be easily scrolled while the header and footer maintain in place.\n\n## Caption[](https://codingcat.dev/courses/html-for-a-10-year-old/html-table#caption)\n\n> By default, a table caption will be center-aligned above a table. However, the CSS properties [text-align](https://www.w3schools.com/cssref/pr_text_text-align.asp) and [caption-side](https://www.w3schools.com/cssref/pr_tab_caption-side.asp) can be used to align and place the caption. -W3 Schools\n\nI find myself using caption less and less over other methods, but I thought it would be a nice complete example. Adding the below snippet with an attribute text-align=\"bottom\" will place example text below our table. This could explain some of the figures or label your table.\n\n```\n      <caption align=\"bottom\">\n        This is an example caption for our table.\n      </caption>\n```\n\n<iframe src=\"https://codesandbox.io/embed/html-for-a-10-year-old-table-caption-w1qql?fontsize=14&amp;hidenavigation=1&amp;theme=dark\" style=\"width:100%;height:500px;border:0;border-radius: 4px;overflow:hidden\"></iframe>\n\n## Problem Solving[](https://codingcat.dev/courses/html-for-a-10-year-old/html-table#problem-solving)\n\nWe broke down each piece of the table in the original \"Full Table\" Example. See if you can change that table so that it has a blue background. Take a snapshot and post it on our [discord](https://link.ajonp.com/slack) channel with @ajonp and I will hook you up with some free stickers!\n",
    "iso8601Date": "2020-09-17T00:00:00-04:00",
    "basename": "html-table"
  },
  "intro": {
    "title": "Intro",
    "date": "2019-08-28",
    "preview": "https://youtu.be/TRdWWR5XsFY\n\n> You must have …",
    "content": "\n\nhttps://youtu.be/TRdWWR5XsFY\n\n> You must have [Node](https://nodejs.org/en/download/) installed so you can leverage npm.  \n> If you notice any issues please submit a [pull request](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/pulls).\n\n# Next.js Introduction\n\nThis is a sample application showcasing the power of Next.js. We will be building out a simple book listing site, it could be any type of site really the idea what the technology provides. In reality my son really wants this for [https://oliversbooks.com](https://oliversbooks.com/) so I figured might as well kill two birds with one stone!\n\n## Key Components[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-intro#key-components)\n\n### What is Next.js[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-intro#what-is-nextjs)\n\n[Next.js](https://nextjs.org/) - Production grade React applications that scale.\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/image-46.png)\n\n![NextJS Logo](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/Screen_Shot_2019-08-13_at_8.32.02_AM.png)\n\n### React[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-intro#react)\n\n[ReactJs](https://reactjs.org/) - A JavaScript library for building user interfaces\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/image-49.png)\n\n![ReactJS Logo](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/Screen_Shot_2019-08-13_at_8.32.27_AM.png)\n\n### What is MaterialUI[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-intro#what-is-materialui)\n\n[MaterialUI](https://material-ui.com/) - React Components that Implement Google's Material Design.\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/image-48.png)\n\n![MaterialUI Logo](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/Screen_Shot_2019-08-13_at_8.32.35_AM.png)\n\n### What is Firebase[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-intro#what-is-firebase)\n\n[Firebase](https://firebase.google.com/) - Firebase is a mobile and web application development platform.Loading image...\n\n### RxJS[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-intro#rxjs)\n\n[RxJS](https://rxjs.dev/) - RxJS is a library for reactive programming using Observables, to make it easier to compose asynchronous or callback-based code.\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/image-50.png)\n\n![RxJS Logo](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/Screen_Shot_2019-08-13_at_8.36.15_AM.png)\n\n### What is RxFire[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-intro#what-is-rxfire)\n\n[RxFire](https://firebase.googleblog.com/2018/09/introducing-rxfire-easy-async-firebase.html) - RxFire provides a set of observable creation methods that utilize both Firebase and RxJS.\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/image-47.png)\n\n![RxFire](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/v1556308985/ajonp-ajonp-com/17-rxfire-react-cats/RxFire_3.png)\n",
    "iso8601Date": "2019-08-28T00:00:00-04:00",
    "basename": "intro"
  },
  "materialui": {
    "title": "MaterialUI",
    "date": "2019-08-28",
    "preview": "https://youtu.be/XfOaUonBTsk?t=1979\n\n> You must have …",
    "content": "\n\nhttps://youtu.be/XfOaUonBTsk?t=1979\n\n> You must have [Node](https://nodejs.org/en/download/) installed so you can leverage npm.  \n> This module is part of a series if you would like to start from here please execute\n\n```\ngit clone https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs.git && cd ajonp-ajsbooks-nextjs && git checkout 02-Setup && npm i && code .\n```\n\n> If you notice any issues please submit a [pull request](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/pulls)\n\n# Next.js with Material-UI\n\nThere are a couple of updates that you will make to your project structure in order to make using Material-UI the most performant within your Next.js project.I used the officially referenced [MaterialUI Example Next.js Project](https://github.com/mui-org/material-ui/tree/master/examples/nextjs). They have been keeping the [repo](https://github.com/mui-org/material-ui/tree/master/examples/nextjs) updated very well with the new updates coming from Next.js.\n\n## Components Directory[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-materialui#components-directory)\n\nYou will create a new folder that will be used for all of your independent components. This includes the main structure for your app in `MenuAppBar.tsx`. Later will will continue to add the rest of your React Components to this directory.\n\n```\nmkdir components \n```\n\n## Theme Directory[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-materialui#theme-directory)\n\nThis is slightly different than the layout of the official example, however I didn't like have so many folders called source. So you will add the main theme for MaterialUI into a new directory called `themes`.\n\n```\nmkdir themes \n```\n\nThere are multiple ways to theme your entire website, if you are more familiar with other methods then do what is comfortable for you! For me being brand new with [MaterialUI](https://material-ui.com/customization/themes/#themes) I decided to continue with the example repo and use this method.Now you can add a new file to the `themes` directory called `theme.tsx`.themes/theme.tsx\n\n```\nimport red from '@material-ui/core/colors/red'; import { createMuiTheme } from '@material-ui/core/styles'; // Create a theme instance. const theme = createMuiTheme({ palette: { primary: { main: '#556cd6' }, secondary: { main: '#19857b' }, error: { main: red.A400 }, background: { default: '#fff' } } }); export default theme; \n```\n\n## Custom \\_app.tsx for MaterialUI[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-materialui#custom-_apptsx-for-materialui)\n\nPer the [Next.js App docs](https://nextjs.org/docs#custom-app).\n\n> Next.js uses the App component to initialize pages. You can override it and control the page initialization. Which allows youto do amazing things like:\n> \n> To override, create the `./pages/_app.js`\n\n- Persisting layout between page changes\n- Keeping state when navigating pages\n- Custom error handling using componentDidCatch\n- Inject additional data into pages (for example by processing GraphQL queries)\n\nIt is for persisting the layout that you are going to create the `_app.tsx` file. This will allow things like your theme and `MenuAppBar` to not require rerender.\n\npages/\\_app.tsx\n\n```\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/styles';\nimport App, { Container } from 'next/app';\nimport Head from 'next/head'; import React from 'react';\nimport MenuAppBar from '../components/MenuAppBar';\nimport theme from '../themes/theme';\n\nclass MyApp extends App {\n\n    componentDidMount() {\n        // Remove the server-side injected CSS. \n        const jssStyles = document.querySelector('#jss-server-side');\n        if (jssStyles && jssStyles.parentNode) {\n            jssStyles.parentNode.removeChild(jssStyles);\n        }\n    }\n\n    render() {\n        const { Component, pageProps } = this.props;\n        return (\n            <Container>\n                <Head><title>AJ' Books</title> </Head> \n                <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <MenuAppBar />\n                <Component { ...pageProps } />\n                </ThemeProvider> \n            </Container > \n        );\n    }\n}\n\nexport default MyApp; \n```\n\n## Custom \\_document.tsx for MaterialUI[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-materialui#custom-_documenttsx-for-materialui)\n\nPer the [Next.js Document docs](https://nextjs.org/docs#custom-document).\n\n> A custom is commonly used to augment your application's `<html>` and `<body>` tags. This is necessary because Next.js pages skip the definition of the surrounding document's markup.\n> \n> This allows you to support Server-Side Rendering for CSS-in-JS libraries like styled-components or emotion. Note, styled-jsx is included in Next.js by default.\n> \n> A custom `<Document>` can also include getInitialProps for expressing asynchronous server-rendering data requirements.\n\nThis again works great while using MaterialUI, because it will allow us to pass along the styles for your themes through props, anywhere in your application.\n\npages/\\_document.tsx\n\n```\n/* https://github.com/mui-org/material-ui/blob/master/examples/nextjs/pages/_document.js */\n\nimport React from \"react\";\nimport Document, { Head, Main, NextScript } from \"next/document\";\nimport { ServerStyleSheets } from \"@material-ui/styles\";\nimport theme from \"../themes/theme\";\n\nclass MyDocument extends Document {\n  render() {\n    return (\n      <html lang=\"en\">\n        <Head>\n          {\" \"}\n          <meta charSet=\"utf-8\" />\n          {/* Use minimum-scale=1 to enable GPU rasterization */}\n          <meta\n            name=\"viewport\"\n            content=\"minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no\"\n          />\n          {/* PWA primary color */}\n          <meta name=\"theme-color\" content={theme.palette.primary.main} />\n          <link\n            rel=\"stylesheet\"\n            href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n          />\n        </Head>{\" \"}\n        <body>\n          {\" \"}\n          <Main /> <NextScript />{\" \"}\n        </body>{\" \"}\n      </html>\n    );\n  }\n}\nMyDocument.getInitialProps = async ctx => {\n  // Resolution order //\n  // On the server:\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. document.getInitialProps\n  // 4. app.render\n  // 5. page.render\n  // 6. document.render //\n  // On the server with error:\n  // 1. document.getInitialProps\n  // 2. app.render\n  // 3. page.render\n  // 4. document.render //\n  // On the client\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. app.render\n  // 4. page.render\n\n  // Render app and page and get the context of the page with collected side effects.\n  const sheets = new ServerStyleSheets();\n  const originalRenderPage = ctx.renderPage;\n  ctx.renderPage = () =>\n    originalRenderPage({\n      enhanceApp: App => props => sheets.collect(<App {...props} />)\n    });\n  const initialProps = await Document.getInitialProps(ctx);\n  return {\n    ...initialProps,\n    // Styles fragment is rendered after the app and page rendering finish.\n    styles: [\n      <React.Fragment key=\"styles\">\n        {\" \"}\n        {initialProps.styles} {sheets.getStyleElement()}{\" \"}\n      </React.Fragment>\n    ]\n  };\n};\n\nexport default MyDocument;\n\n```\n\n## Add MenuAppBar Component[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-materialui#add-menuappbar-component)\n\nThe [App Bar Component](https://material-ui.com/components/app-bar/) threw me off at first as I expected it under navigation, but it really does belong in the surfaces section. Because you are making a fairly complex version of an App Bar I broke this out into its own component. Your MenuAppBar component has several dependencies that you are going to use so it made sense to group them.\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/image-51.png)\n\n![Menu App Bar Preview](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/4-navigation/Screen_Shot_2019-08-28_at_4.54.09_PM.png)\n\n### Key MaterialUI Components[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-materialui#key-materialui-components)\n\n- App Bar: [https://material-ui.com/api/app-bar/](https://material-ui.com/api/app-bar/)\n- Button: [https://material-ui.com/api/button/](https://material-ui.com/api/button/)\n- Icon Button: [https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)\n- Menu: [https://material-ui.com/api/menu/](https://material-ui.com/api/menu/)\n- MenuItem: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)\n- Styles: [https://material-ui.com/styles/api/#api](https://material-ui.com/styles/api/#api)\n- ToolBar: [https://material-ui.com/api/toolbar/#toolbar-api](https://material-ui.com/api/toolbar/#toolbar-api)\n- Typography: [https://material-ui.com/api/typography/#typography-api](https://material-ui.com/api/typography/#typography-api)\n- Icons: [https://material-ui.com/api/icon/](https://material-ui.com/api/icon/)\n- MenuIcon: [https://material-ui.com/components/drawers/#persistent-drawer](https://material-ui.com/components/drawers/#persistent-drawer)\n\n### Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-materialui#full-code)\n\n/components/MenuAppBar.tsx\n\n```\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport React from \"react\";\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: { flexGrow: 1 },\n    menuButton: { marginRight: theme.spacing(2) },\n    title: { flexGrow: 1 }\n  })\n);\nfunction MenuAppBar() {\n  const classes = useStyles();\n  const [auth] = React.useState(false);\n  const [anchorEl, setAnchorEl] =\n    (React.useState < null) | (HTMLElement > null);\n  const open = Boolean(anchorEl);\n  function handleMenu(event: React.MouseEvent<HTMLElement>) {\n    setAnchorEl(event.currentTarget);\n  }\n  function handleClose() {\n    setAnchorEl(null);\n  }\n  return (\n    <div className={classes.root}>\n      {\" \"}\n      <AppBar position=\"static\">\n        {\" \"}\n        <Toolbar>\n          {\" \"}\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"Menu\"\n          >\n            {\" \"}\n            <MenuIcon />{\" \"}\n          </IconButton>{\" \"}\n          <Typography variant=\"h6\" className={classes.title}>\n            {\" \"}\n            Photos{\" \"}\n          </Typography>{\" \"}\n          {auth && (\n            <div>\n              {\" \"}\n              <IconButton\n                aria-owns={open ? \"menu-appbar\" : undefined}\n                aria-haspopup=\"true\"\n                onClick={handleMenu}\n                color=\"inherit\"\n              >\n                {\" \"}\n                <AccountCircle />{\" \"}\n              </IconButton>{\" \"}\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n                transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n                open={open}\n                onClose={handleClose}\n              >\n                {\" \"}\n                <MenuItem onClick={handleClose}>Profile</MenuItem>{\" \"}\n                <MenuItem onClick={handleClose}>My account</MenuItem>{\" \"}\n              </Menu>{\" \"}\n            </div>\n          )}{\" \"}\n          {!auth && (\n            <div>\n              {\" \"}\n              <Button color=\"inherit\">Sign In</Button>{\" \"}\n            </div>\n          )}{\" \"}\n        </Toolbar>{\" \"}\n      </AppBar>{\" \"}\n    </div>\n  );\n}\nexport default MenuAppBar;\n\n```\n\n## Update Index Page[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-materialui#update-index-page)\n\nYou can see in the below file that you are keeping it very simple for your initial update, you will only us the [Container](https://material-ui.com/components/container/) component.pages/index.tsx\n\n```\nimport Container from \"@material-ui/core/Container\";\nimport React from \"react\";\n\nexport default function App() {\n  return <Container maxWidth=\"lg\">Hello Next.js ????</Container>;\n}\n\n```\n\n## Use React Dev tools[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-materialui#use-react-dev-tools)\n\nIf you are new to ReactJS (like myself), I would recommend installing [React Developer Tools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en) for Chrome.Here you can inspect the layout of your full application. If you take a look\n\n![React Dev Tools](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/f8mmv34ulizhtxmknbpx.png)\n\nAs you highlight components you can see the Props that are passed through them, highlight `ThemeProvider` this is where much of the theming for MaterialUI will come from in the updates will will continue to make in your app.\n\n![MaterialUI ThemeProvider](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/cnhji8alguos2tt3rnzz.png)\n\n# Run Next.js Development server\n\n```\nnpm run dev \n```\n\nOpen your browser at [http://localhost:3000](http://localhost:3000/) (your port may differ).\n\n![Next.js Hello](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/oy53wlavfbw3efhdqrpf.png)\n\nYou should also notice the lightning bolt showing the prerender page, showing the dev server running.\n\n![Next.js Lightning Bolt](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/ri4rbjbtykjhrysscyw2.png)\n\n> If you get to the end and something is broken just grab the full branch\n\n```\ngit checkout 03-MaterialUI -f && npm i\n```\n",
    "iso8601Date": "2019-08-28T00:00:00-04:00",
    "basename": "materialui"
  },
  "microbit-intro": {
    "title": "micro:bit Intro",
    "date": "2020-09-17",
    "preview": "## What is a …",
    "content": "\n\n## What is a micro:bit[](https://codingcat.dev/courses/microbit-for-a-10-year-old/micro-bit-intro#what-is-a-microbit)\n\nIt is a pocket-sized computer 70 times smaller and 18 times faster than the original BBC Micro computers used in schools.\n\n- It has 25 red LED lights that can flash messages and be used to create games.\n- There are two programmable buttons that can be used to control games or pause and skip songs on a playlist.\n- It has an accelerometer so it can detect motion and knows when you're on the move.\n- The built-in compass knows which direction you're heading in and...\n- It can use a low energy Bluetooth connection to interact with other devices and the Internet. You can find more information on the hardware in our guide.\n\nhttps://support.microbit.org/support/solutions/articles/19000013983-what-is-a-micro-bit-\n\n## Where to Purchase[](https://codingcat.dev/courses/microbit-for-a-10-year-old/micro-bit-intro#where-to-purchase)\n\nOne of my favorite places to purchase micro:bit and accessories is adafruit.[](https://www.adafruit.com/category/932)[https://www.adafruit.com/category/932](https://www.adafruit.com/category/932)\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/image-70.png)\n\n![TODO_UPLOAD](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/uploads/ccvlk7fcb9tku967m9jz.png)\n\nFor a full list checkout the micro:bit website, make sure to sort by your country to see what is available.[](https://microbit.org/buy/)[https://microbit.org/buy/](https://microbit.org/buy/)\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/image-71.png)\n\n![TODO_UPLOAD](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/uploads/p5oqxjd06eam4a2l2lyk.png)\n\nFor this unboxing I purchased [micro:bit go kit, Pocket-Sized, programmable Computer with Cable and Battery Pack from Amazon](https://amzn.to/2ya49wq)\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/image-72.png)\n\n![TODO_UPLOAD](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/uploads/vsoxronkbjkvl49rfgeg.png)\n\nI would also recommend picking up some some alligator clips for some of the fun tutorials.[Haitronic Unique 2 in 1 Alligator Clip to Dupont Wire 10pin 20cm Male, Crocodile Clip to Jumper Wire 10pin 20cm Female for Test Lead Arduino/Raspberry pi/Orange pi/Makey Makey/BBC Micro: bit](https://amzn.to/2ZaGSFE)\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/image-73.png)\n\n![TODO_UPLOAD](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/uploads/cz9lagqgom1pkzvfnzka.png)\n\n## Unboxing[](https://codingcat.dev/courses/microbit-for-a-10-year-old/micro-bit-intro#unboxing)\n\nWhen you receive your micro:bit you will be itching to get up and running, it is really a very basic\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/image-12.jpeg)\n\n![TODO_UPLOAD](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/uploads/gpdkrapyt49n8ynh79zd.png)\n\nInside (if you purchased the BBC micro:bit go) you will find a micro:bit, usb cable, and battery pack.\n\n## Hook micro:bit to Computer[](https://codingcat.dev/courses/microbit-for-a-10-year-old/micro-bit-intro#hook-microbit-to-computer)\n\nAll you need to do is plug a usb A into your computer, then place the micro USB type B into your micro:bit\n\n![micro:bit hookup](https://res.cloudinary.com/ajonp/image/upload/v1589750069/ajonp-ajonp-com/uploads/microbit_hookup.gif)\n\n## Makecode[](https://codingcat.dev/courses/microbit-for-a-10-year-old/micro-bit-intro#makecode)\n\n[](https://microbit.org/)[https://microbit.org](https://microbit.org) is the main site but there is an area that will take you to [](https://makecode.microbit.org/)[https://makecode.microbit.org/](https://makecode.microbit.org/) which is the main site to start programming your new micro:bit.Start with something basic like the flashing heart, this will provide you with an awesome interactive guide to start learning.\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/image-74.png)\n\n![TODO_UPLOAD](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/uploads/dd5s7xlhx1hetzw8jju8.png)\n\nWith the latest update you can select which language you would like to learn and start a tutorial, for younger kids I would recommend Blocks. Since we focus a lot on web solutions at CodingCatDev I would recommend using the JavaScript tutorial as well.\n\n![](https://codingcat.dev/wp-content/uploads/2020/09/image-75.png)\n\n![TODO_UPLOAD](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/uploads/wnbfqzdhc5anpf1w74a0.png)\n",
    "iso8601Date": "2020-09-17T00:00:00-04:00",
    "basename": "microbit-intro"
  },
  "project-hosting": {
    "title": "Project Hosting",
    "date": "2020-09-16",
    "preview": "https://youtu.be/XfOaUonBTsk?t=5183\n\n> You must have …",
    "content": "\n\nhttps://youtu.be/XfOaUonBTsk?t=5183\n\n> You must have [Node](https://nodejs.org/en/download/) installed so you can leverage npm.  \n> This module is part of a series if you would like to start from here please execute\n\n```\ngit clone https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs.git && cd ajonp-ajsbooks-nextjs && git checkout 05-Firebase && npm i && code .\n```\n\n> If you notice any issues please submit a [pull request](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/pulls)\n\n# Firebase Project\n\n## Installing Firebase[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-project-hosting#installing-firebase)\n\n> If you are on a Mac, please follow [Quick tips for NPM](https://ajonp.com/lessons/npm-tips-and-tricks). It makes me cringe everytime I see a mac user doing `sudo npm`.\n\nThe complete [firebase cli reference](https://firebase.google.com/docs/cli) has instructions on how to setup firebase-tools successfully.\n\n### NPM Installing[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-project-hosting#npm-installing)\n\nInstall the Firebase CLI using npm by running:\n\n```\nnpm install -g firebase-tools \n```\n\n### Firebase Login (signin)[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-project-hosting#firebase-login-signin)\n\nSign into Firebase using your Google account by running:\n\n```\nfirebase login \n```\n\n### Firebase Signin test[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-project-hosting#firebase-signin-test)\n\nTo test that authentication worked (and to list all of your Firebase projects), run the following command:\n\n```\nfirebase list \n```\n\nThe displayed list should be the same as the Firebase projects listed in the [Firebase console](https://console.firebase.google.com/).\n\n## Initializing the project[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-project-hosting#initializing-the-project)\n\n> If this is your first time please checkout [AJonP's Firebase Project Hosting](https://ajonp.com/courses/angularmaterial/firebase-project-hosting) and [AJonP's Firebase Multisite Hosting](https://ajonp.com/lessons/firebase-multisite-hosting/) for more details.\n\nBegin by running:\n\n```\nfirebase init \n```\n\n### Selecting Products[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-project-hosting#selecting-products)\n\nYou should see a dialog like below\n\n![firebase init](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/6-firebase-project/Screen_Shot_2019-09-03_at_12.14.37_PM.png)\n\nMake sure that you move up/down using your arrow keys, then select using space bar:\n\n- Firestore\n- Functions\n- Hosting\n\nThis might seem a little confusing as we already are using Firestore, but remember you pushed all your content using an admin API\n\n### Project Selection[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-project-hosting#project-selection)\n\nAt this point you should have a project already that we used to populate Firestore. So you will need to select `Use an existing project`, then follow this up by selecting your project. In my case this is `ajonp-ajs-books`.\n\n![existing project select](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/6-firebase-project/Screen_Shot_2019-09-03_at_12.25.59_PM.png)\n\nIf you don't you will want to select\n\n![new project](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/6-firebase-project/Screen_Shot_2019-09-03_at_12.21.25_PM.png)\n\nOnce this part is complete just use all of the defaults except for `What language would you like to use to write Cloud Functions?`. For this you will select `TypeScript`.\n\n![TypeScript selection](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/6-firebase-project/Screen_Shot_2019-09-03_at_12.27.21_PM.png)\n\nThen choose\n\n- `Yes` for `Do you want to use TSLint to catch probable bugs and enforce style?`\n- `Yes` for `Do you want to install dependencies with npm now?`.\n- `Enter` for default `What do you want to use as your public directory?`.\n- `Yes` for `Configure as a single-page app (rewrite all urls to /index.html)?`\n- `Yes` for `Configure as a single-page app (rewrite all urls to /index.html)?`\n\n## Review Firebase Files[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-project-hosting#review-firebase-files)\n\n### functions/index/src/index.ts[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-project-hosting#functionsindexsrcindexts)\n\n> Please make sure you update accordingly, or it will most likely fail the build check.\n\nThe functions directory holds all of our [Cloud Functions for Firebase](https://firebase.google.com/docs/functions). In a later module we will utilize this further to create an API for our Static Site Rendering.\n\n```\nimport * as functions from 'firebase-functions'; // Start writing Firebase Functions // https://firebase.google.com/docs/functions/typescript export const helloWorld = functions.https.onRequest((_request, response) => { response.send('Hello from Firebase!'); }); \n```\n\n### public/index.html[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-project-hosting#publicindexhtml)\n\nThis file was automatically created, it is the default that firebase creates.Check it out locally buy running:\n\n```\nfirebase serve --only hosting \n```\n\nThen access your local server [http://localhost:5000/](http://localhost:5000/).\n\n### .firebaserc[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-project-hosting#firebaserc)\n\nThis file tells the Firebase CLI what project to use.\n\n```\n{ \"projects\": { \"default\": \"ajonp-ajs-books\" } } \n```\n\n### firebase.json[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-project-hosting#firebasejson)\n\nThis file tells the Firebase CLI about:\n\n- firestore rules and indexes\n- functions\n- hosting\n\nPay close attention to the hosting and rewrites, as we will configure those in our SSR Modules later. Right now the hosting is setup to direct all traffic (any path) back to our `public/index.html` page.\n\n```\n{ \"firestore\": { \"rules\": \"firestore.rules\", \"indexes\": \"firestore.indexes.json\" }, \"functions\": { \"predeploy\": [ \"npm --prefix \\\"$RESOURCE_DIR\\\" run lint\", \"npm --prefix \\\"$RESOURCE_DIR\\\" run build\" ] }, \"hosting\": { \"public\": \"public\", \"ignore\": [ \"firebase.json\", \"**/.*\", \"**/node_modules/**\" ], \"rewrites\": [ { \"source\": \"**\", \"destination\": \"/index.html\" } ] } } \n```\n\n### firestore.indexes.json[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-project-hosting#firestoreindexesjson)\n\nFor this sample project (right now) there is not a lot of need for indexes, so the rules are fairly blank. You can read more in [Firestore Query Data Indexing](https://firebase.google.com/docs/firestore/query-data/indexing).\n\n```\n{ \"indexes\": [], \"fieldOverrides\": [] } \n```\n\n### firestore.rules[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-project-hosting#firestorerules)\n\nYour Firestore rules should have been brought in by the prior project, if they have not please reference [Firestore Rules](https://ajonp.com/courses/nextjs9/nextjs-using-materialui-and-firebase-firestore-modeling/#firestore-rules)\n\n## Wrap Up[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-project-hosting#wrap-up)\n\nAlthough we have our Firebase project setup we won't be integrating the Next.js changes until the next Module. You can still run the code locally\n\n```\nnpm run dev \n```\n\nYou will be able to navigate to `books` when selecting one, it will just return you to the `index` or welcome screen.\n\n> If you get to the end and something is broken just grab the full branch\n\n```\ngit checkout 06-Firebase-Project -f && npm i\n```\n",
    "iso8601Date": "2020-09-16T00:00:00-04:00",
    "basename": "project-hosting"
  },
  "setup": {
    "title": "Setup",
    "date": "2019-08-28",
    "preview": "https://youtu.be/oUTz8JbQQww\n\n> You must have …",
    "content": "\n\nhttps://youtu.be/oUTz8JbQQww\n\n> You must have [Node](https://nodejs.org/en/download/) installed so you can leverage npm.  \n> This module is part of a series if you would like to start from here please execute\n\n```\ngit clone https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs.git && cd ajonp-ajsbooks-nextjs && git checkout 01-Intro && npm i && code .\n```\n\n> If you notice any issues please submit a [pull request](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/pulls)\n\n# Next.js Setup\n\n> If at any point in time you feel as though the course/module is moving at a pace you are not comfortable, please let me know in your [Slack Channel](http://bit.ly/ajonp-slack-invite).\n\n## Initial Setup[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-setup#initial-setup)\n\nI will be using [Visual Studio Code](https://code.visualstudio.com/download) throughout the Course for all of the coding requirements, however you can use the IDE of your choice. My recommendation is to open two tabs, one with the Youtube video, and the other with the lesson page.\n\n## Create Directory[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-setup#create-directory)\n\n```\nmkdir ajonp-ajsbooks-nextjs && cd ajonp-ajsbooks-nextjs \n```\n\n## Initialize NPM[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-setup#initialize-npm)\n\n```\nnpm init \n```\n\n## Install Initial Dependencies[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-setup#install-initial-dependencies)\n\n- [React](https://www.npmjs.com/package/react)\n- [React Dom](https://www.npmjs.com/package/react-dom)\n- [Material UI](https://www.npmjs.com/package/@material-ui/core)\n- [Next.js](https://www.npmjs.com/package/next)\n- [Firebase](https://www.npmjs.com/package/firebase)\n- [RxFire](https://www.npmjs.com/package/rxfire)\n\n```\nnpm i react react-dom next @material-ui/core @material-ui/styles firebase rxfire rxjs \n```\n\n## Create pages Directory[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-setup#create-pages-directory)\n\nPages in Next.js are where the app \"lives\"\n\n```\nmkdir pages \n```\n\n# Development\n\nAt this time I would recommend using VSCode to follow along with the tutorials. [VSCode](https://code.visualstudio.com/download)\n\n## Setup NPM scripts for development[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-setup#setup-npm-scripts-for-development)\n\nBecause next is an npm package, it is easy to use it when running much of your application, for both development and production builds. You are going to add these to `package.json` and use NPM to run each command. Just add the following below dependencies.package.json\n\n```\n \"scripts\": { \"dev\": \"next\", \"build\": \"next build\", \"start\": \"next start\", \"export\": \"next export\" } \n```\n\n## Start Next.js server[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-setup#start-nextjs-server)\n\nStart the next server.\n\n```\nnpm run dev \n```\n\nAt this time you are just verifying that the server is up and running and you don't yet have any content. So if you check [http://localhost:3000](http://localhost:3000/), you should see a `404` page which in your case is correct and it tells us that Next.js is being correctly served, but you don't yet have any pages.\n\n![404](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/svi7pymfttwcheopwtqi.png)\n\n## Hello world[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-setup#hello-world)\n\nNow for the legendary \"Hello World\" example. In your pages directory you can simple add a new file called `index.js`. If you are new to ReactJS this is considered a Functional Component, which is a very basic component that is only presenting html markup without state.pages/index.js\n\n```\nconst Index = () => ( <div> <p>Hello Next.js</p> </div> ) export default Index \n```\n\nNow that you have content make sure that your server is still running or run command `npm run dev` and refresh the browser.\n\n## Babel Config[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-setup#babel-config)\n\n.babelrc\n\n```\n{ \"presets\": [\"next/babel\"] } \n```\n\n## Typescrpt Config[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-setup#typescrpt-config)\n\nNext.js 9 is now including this for you, no need to change anything.\n\n## Include Next.js types definition[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-setup#include-nextjs-types-definition)\n\nIf you miss this your application might not break, but VSCode should start to highlight things that have not been included for it to understand where files and modules can be found.\n\n## Index Change from .js to .tsx[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-setup#index-change-from-js-to-tsx)\n\nChange the file extension, or just delete `pages/index.js`.pages/index.tsx\n\n```\nimport * as React from 'react'; const IndexPage: React.FunctionComponent = () => { return <h1>Hello Next.js ????</h1>; }; export default IndexPage; \n```\n\n# Tracking changes\n\nNow that you have a solid start to your project lets add tracking from here on out, you will be using [git](https://git-scm.com/)First lets add an ignore file so you don't pickup your unintended files that you don't want to track.\n\n- `node_modules` this is the folder where your dependencies are held.\n- `.next` contains any of your dynamically build content that the dev server is browsing.\n- `out` contains the final production static build\n\n.gitignore\n\n```\nnode_modules .next out \n```\n\nAfter this is done just run the command.\n\n```\ngit init \n```\n\n## Tracking remotely (Optional)[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-setup#tracking-remotely-optional)\n\nThis is not required to track changes locally but if you want to push your commits out to a remote repository you can do so by first creating your repository.\n\n### Removing remote (Optional)[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-setup#removing-remote-optional)\n\nIf you are using the remote repo from AJONPLLC, you need to first remove this so you can track your changes in your own remote repository.\n\n```\ngit remote remove origin \n```\n\n### Add remote github and push (Optional)[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-setup#add-remote-github-and-push-optional)\n\nAdd the remote repository and then push your changes.\n\n```\ngit remote add origin <your_repo> git push -u origin master \n```\n\n## Checkout Branch Forcibly (Optional)[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-setup#checkout-branch-forcibly-optional)\n\nThe modules are built one on top of the other, so you can always jump around if you wish by executing `git checkout <branch_name> -f`. You will not receive any warnings for overwrite but it will set you back to a nice starting point.\n\n```\ngit checkout 01-Intro -f \n```\n\n> If you get to the end and something is broken just grab the full branch\n\n```\ngit checkout 02-Setup -f && npm i\n```\n",
    "iso8601Date": "2019-08-28T00:00:00-04:00",
    "basename": "setup"
  },
  "ssr-part-1": {
    "title": "SSR Part 1",
    "date": "2020-09-16",
    "preview": "https://youtu.be/XfOaUonBTsk?t=6766\n\n> You must have …",
    "content": "\n\nhttps://youtu.be/XfOaUonBTsk?t=6766\n\n> You must have [Node](https://nodejs.org/en/download/) installed so you can leverage npm.  \n> This module is part of a series if you would like to start from here please execute\n\n```\ngit clone https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs.git && cd ajonp-ajsbooks-nextjs && git checkout 06-Firebase-Project && npm i && code .\n```\n\n> If you notice any issues please submit a [pull request](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/pulls).\n\n## Book Navigation - SSR #1\n\n> I fully admit that this is an _ADVANCED_ course, but I would love any suggestions or pull requests to make it easier!\n\nServer Side Rendering(SSR) is a popular technique for rendering a normally client-side only single page app (SPA) on the server and then sending a fully rendered page to the client. - From [alligator.io](https://alligator.io/react/server-side-rendering/)SSR is not to be confused with Static Site Generators (SSG) like [Hugo](https://gohugo.io/) or [Gatsby](https://www.gatsbyjs.org/) where it generates all of your sites pages in a build step (not dynamically on the server).Typically a React application is run only on the client side, this is where Next.js comes into play.[Next.js SSR Benefits](https://nextjs.org/features/server-side-rendering#benefits) include:\n\n- Superior Performance\n- Optimized for Discovery\n- Lightning Fast Delivery\n\nSo in this module you will start to create the correct framework required to continuously build a Next.js SSR site, then in the next module we will add several additional SSR features.\n\n## Update next.config.js[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-1#update-nextconfigjs)\n\nYou will setup this project to use [Next.js Serverless Deployment](https://nextjs.org/docs#serverless-deployment). This will allow us to create [lambdas](https://zeit.co/docs/v2/advanced/concepts/lambdas/) or in the Firebase world fully baked [Cloud Functions](https://firebase.google.com/docs/functions/get-started).\n\n### Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-1#full-code)\n\n[next.config.js](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/blob/07-Book-Navigation/next.config.js)\n\n```\nmodule.exports = { target: 'serverless', distDir: './dist/functions/_next' }; \n```\n\n## Update firebase.json[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-1#update-firebasejson)\n\nIt is very important to understand what is happening in this file. You are telling Firebase Hosting how to direct traffic:\n\n- `/book/**` path -> towards a static html file called `book`.\n- `/books` path -> towards a static html file called `books`.\n- `**/**` path -> covers every other call. It will push these calls towards our static files.\n\nThese cloud functions will be found in our `dist/functions` directory.[/firebase.json](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/blob/07-Book-Navigation/firebase.json)\n\n### Full code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-1#full-code)\n\n```\n{ \"firestore\": { \"rules\": \"firestore.rules\", \"indexes\": \"firestore.indexes.json\" }, \"functions\": { \"source\": \"dist/functions\" }, \"hosting\": [ { \"public\": \"dist/public\", \"target\": \"ajsbooks-nextjs\", \"ignore\": [\"firebase.json\", \"**/.*\", \"**/node_modules/**\"], \"rewrites\": [ { \"source\": \"/book/**\", \"function\": \"book\" }, { \"source\": \"/books\", \"function\": \"books\" }, { \"source\": \"**/**\", \"function\": \"index\" } ] } ], \"storage\": { \"rules\": \"storage.rules\" } } \n```\n\n## Update Firebase functions[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-1#update-firebase-functions)\n\n[/functions/src/index.ts](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/blob/07-Book-Navigation/functions/src/index.ts)\n\n## Update package.json[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-1#update-packagejson)\n\nThis file has gotten a little crazy in the scripts area, so let me try and break down the steps:\n\nfirebase:serve > Starts the build process\n\nfirebase:build ->\n\n- clean -> Cleans out our build folders\n- build -> calls `next build` which outputs to `.next`\n- build:functions ->\n    - build:functions:lint -> moves into the `functions` directory, lints then builds (this build is self contained) and outputs to `functions/lib`\n    - cpx -> copies all the `functions/lib/` over to `dist/functions`\n- build:public ->\n    - cpx -> copies all `static/` files to `dist/public/static`, `dist/functions/_next/static/` files to `dist/public/_next/static`\n- copy:deps -> copies `package.json,package-lock.json` to dist/functions, moves into directory and then runs `npm install`\n\nfirebase serve -> you can run everything locally to test\n\nfirebase:deploy is the same as firebase:serve but actaully deploys all of your code.If nothing else you can copy and paste and all should work ????.\n\n### Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-1#full-code)\n\n[package.json](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/blob/07-Book-Navigation/package.json)\n\n```\n{ \"name\": \"ajonp-ajsbooks-nextjs\", \"version\": \"0.0.1\", \"description\": \"Next.js Example using Firestore, Firebase Hosting\", \"main\": \"index.js\", \"repository\": { \"type\": \"git\", \"url\": \"git+https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs.git\" }, \"keywords\": [ \"nextjs\", \"firestore\", \"firebase\", \"materialui\" ], \"author\": \"Alex Patterson <alex@ajonp.com> (https://ajonp.com/)\", \"license\": \"MIT\", \"bugs\": { \"url\": \"https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/issues\" }, \"homepage\": \"https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs#readme\", \"dependencies\": { \"@material-ui/core\": \"^4.3.0\", \"@material-ui/icons\": \"^4.2.1\", \"@material-ui/styles\": \"^4.3.0\", \"firebase\": \"^6.3.4\", \"firebase-admin\": \"^8.4.0\", \"firebase-functions\": \"^3.2.0\", \"next\": \"^9.0.3\", \"react\": \"^16.8.6\", \"react-dom\": \"^16.8.6\", \"rxfire\": \"^3.6.9\", \"rxjs\": \"^6.5.2\" }, \"engines\": { \"node\": \"8\" }, \"scripts\": { \"dev\": \"npm run clean && next\", \"build\": \"next build\", \"start\": \"next start\", \"export\": \"next export\", \"analyze\": \"cross-env BUNDLE_ANALYZE=both next build\", \"analyze:server\": \"cross-env BUNDLE_ANALYZE=server next build\", \"analyze:browser\": \"cross-env BUNDLE_ANALYZE=browser next build\", \"build:functions\": \"npm run build:functions:lint && cpx \\\"functions/lib/**/*.*\\\" dist/functions\", \"build:functions:lint\": \"cd functions && npm install && npm run lint && npm run build\", \"build:public\": \"cpx \\\"static/**/*.*\\\" dist/public/static && cpx \\\"dist/functions/_next/static/**/*.*\\\" dist/public/_next/static && cpx \\\"dist/functions/_next/serverless/pages/**/*.*\\\" dist/public/\", \"clean\": \"rimraf dist && rimraf functions/lib && rimraf .next\", \"copy:deps\": \"cpx \\\"*{package.json,package-lock.json}\\\" dist/functions && cd dist/functions && npm install\", \"firebase:build\": \"npm run clean && npm run build:functions && npm run build && npm run build:public && npm run copy:deps\", \"firebase:serve\": \"npm run firebase:build && firebase serve\", \"firebase:deploy\": \"npm run firebase:build && firebase deploy\" }, \"devDependencies\": { \"cpx\": \"^1.5.0\", \"cross-env\": \"^5.2.0\", \"typescript\": \"^3.5.3\" } } \n```\n\n## Watch Next.js Build Output[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-1#watch-nextjs-build-output)\n\nLook carefully in the terminal output when you are building, right now we are only setting up the next step on our journey. Next.js is still just outputting static html files, not lambdas.\n\n![Static Only](https://res.cloudinary.com/ajonp/image/upload/f_auto,q_auto/ajonp-ajonp-com/20-lesson-nextjs/7-book-nav-ssr1/Screen_Shot_2019-09-03_at_3.39.46_PM.png)\n\n## Update Book Card[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-1#update-book-card)\n\nMain change here is just in the TypeScript updates.\n\n### Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-1#full-code)\n\n[/components/BookCard.tsx](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/blob/07-Book-Navigation/components/BookCard.tsx)\n\n```\nimport { CardActionArea } from '@material-ui/core'; import Card from '@material-ui/core/Card'; import CardActions from '@material-ui/core/CardActions'; import CardContent from '@material-ui/core/CardContent'; import CardMedia from '@material-ui/core/CardMedia'; import Collapse from '@material-ui/core/Collapse'; import IconButton from '@material-ui/core/IconButton'; import { makeStyles } from '@material-ui/core/styles'; import Typography from '@material-ui/core/Typography'; import ExpandMoreIcon from '@material-ui/icons/ExpandMore'; import clsx from 'clsx'; import NextLink from 'next/link'; import React from 'react'; import Book from '../models/Book'; const useStyles = makeStyles(theme => ({ card: { width: 400, margin: 5, display: 'flex', flexDirection: 'column' }, cardContent: { display: 'flex', flex: '1 0 auto', flexDirection: 'column', width: '375px', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis', '& h1': { fontSize: '1.4rem', textTransform: 'uppercase' } }, cardMedia: { height: 0, paddingTop: '65%', backgroundRepeat: 'no-repeat', backgroundSize: 'auto', cursor: 'pointer' }, cardDescription: { width: 368, height: 190, overflow: 'auto', whiteSpace: 'normal' }, cardActions: { display: 'flex', alignItems: 'center', justifyContent: 'space-between' }, expand: { transform: 'rotate(0deg)', marginLeft: 'auto', transition: theme.transitions.create('transform', { duration: theme.transitions.duration.shortest }) }, expandOpen: { transform: 'rotate(180deg)' } })); const BookCard = ({ book }: { book: Book }) => { const classes = useStyles(); const [expanded, setExpanded] = React.useState(false); const handleExpandClick = () => { setExpanded(!expanded); }; return ( <Card className={classes.card}> <NextLink href={/book?id=${book.id}} as={/book/${book.slug}}> <CardActionArea> <CardMedia className={classes.cardMedia} image={book.cover || '/static/images/cards/book.webp'} title={book.title} /> <CardContent className={classes.cardContent}> <Typography component=\"h1\">{book.title}</Typography> <Typography component=\"p\"> Author: { ${book.authorDisplayName}} </Typography> </CardContent> </CardActionArea> </NextLink> <CardActions className={classes.cardActions}> Summary: <IconButton className={clsx(classes.expand, { [classes.expandOpen]: expanded })} onClick={handleExpandClick} aria-expanded={expanded} aria-label=\"Show more\" > <ExpandMoreIcon /> </IconButton>{' '} </CardActions> <Collapse in={expanded} timeout=\"auto\" unmountOnExit> <CardContent className={classes.cardContent}> <Typography paragraph className={classes.cardDescription}> {book.description} </Typography> </CardContent> </Collapse> </Card> ); }; export default BookCard; \n```\n\n## Prevent Duplicate Firebase Instances[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-1#prevent-duplicate-firebase-instances)\n\nThe biggest change here is just an `if` statement `if (!firebase.apps.length)`, that doesn't allow another initialization to occur.\n\n### Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-1#full-code)\n\n[/lib/firebase.ts](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/blob/07-Book-Navigation/lib/firebase.ts)\n\n```\nconst firebaseConfig = { apiKey: 'AIzaSyCXLldoMUB_AxaLpvG4pQ9Pzg9bEqpMgTA', authDomain: 'ajonp-ajs-books.firebaseapp.com', databaseURL: 'https://ajonp-ajs-books.firebaseio.com', projectId: 'ajonp-ajs-books', storageBucket: 'ajonp-ajs-books.appspot.com', messagingSenderId: '936263241017', appId: '1:936263241017:web:5faee456c1ed2da8' }; export default async function loadFirebase() { const firebase = await import('firebase/app'); await import('firebase/firestore'); try { if (!firebase.apps.length) { const app = firebase.initializeApp(firebaseConfig); firebase.firestore(app); } } catch (err) { // we skip the \"already exists\" message which is // not an actual error when we're hot-reloading console.log(err); if (!/already exists/.test(err.message)) { console.error('Firebase initialization error', err.stack); } } return firebase; } \n```\n\n## Wrap Up[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-1#wrap-up)\n\nYou can now build a static site for all of the components and you are ready to convert them into lambdas. Navigate to `books` when selecting one it will open a template.\n\n```\nnpm run firebase:serve \n```\n\n> If you get to the end and something is broken just grab the full branch\n\n```\ngit checkout 07-Book-Navigation -f && npm i\n```\n",
    "iso8601Date": "2020-09-16T00:00:00-04:00",
    "basename": "ssr-part-1"
  },
  "ssr-part-2": {
    "title": "SSR Part 2",
    "date": "2020-09-16",
    "preview": "https://youtu.be/XfOaUonBTsk?t=5938\n\n> You must have …",
    "content": "\n\nhttps://youtu.be/XfOaUonBTsk?t=5938\n\n> You must have [Node](https://nodejs.org/en/download/) installed so you can leverage npm.  \n> This module is part of a series if you would like to start from here please execute\n\n```\ngit clone https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs.git && cd ajonp-ajsbooks-nextjs && git checkout 07-Book-Navigation && npm i && code .\n```\n\n> If you notice any issues please submit a [pull request](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/pulls).\n\n# Book Page - SSR #2\n\n> I fully admit that this is an _ADVANCED_ course, but I would love any suggestions or pull requests to make it easier!\n\n## Update firebase.json[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-2#update-firebasejson)\n\nIt is very important to understand what is happening in this file. You are telling Firebase Hosting how to direct traffic:\n\n- `/book/**` path -> towards a Cloud Function called `book`.\n- `/books` path -> towards a Cloud Function called `books`.\n\n- `**/**` Notice how we have removed the full glob path.\n\nThese cloud functions will be found in our `dist/functions` directory.[/firebase.json](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/blob/07-Book-Navigation/firebase.json)\n\n### Full code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-2#full-code)\n\n```\n{ \"firestore\": { \"rules\": \"firestore.rules\", \"indexes\": \"firestore.indexes.json\" }, \"functions\": { \"source\": \"dist/functions\" }, \"hosting\": [ { \"public\": \"dist/public\", \"target\": \"ajsbooks-nextjs\", \"ignore\": [\"firebase.json\", \"**/.*\", \"**/node_modules/**\"], \"rewrites\": [ { \"source\": \"/books\", \"function\": \"books\" }, { \"source\": \"/book{,/**}\", \"function\": \"book\" } ] } ], \"storage\": { \"rules\": \"storage.rules\" } } \n```\n\n## Firebase Functions index.ts[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-2#firebase-functions-indexts)\n\nThere are three cloud functions referenced from the main file 1. api - This allows access to our Firebase backend to read book data 2. books - Lambda for list of books from `pages/books.tsx`. 3. book - Lamba for book details from `pages/book.tsx`.\n\n## Main Firebase Cloud Function[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-2#main-firebase-cloud-function)\n\nThis allows you to tell Firebase where all of the exports are coming from to build the cloud functions from.\n\n### Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-2#full-code)\n\n[/functions/src/index.ts](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/blob/08-Book-Page/functions/src/index.ts)\n\n```\nimport * as functions from 'firebase-functions'; import * as app from './api'; const onRequest = functions.https.onRequest; // These relative paths will exist after compiling everything // const index = require('./_next/serverless/pages/index'); //Removed as Next 9 only pushes static const books = require('./_next/serverless/pages/books'); const book = require('./_next/serverless/pages/book'); // These named exports will map to Firebase Function names // exports.index = onRequest((req, res) => index.render(req, res)); //Removed as Next 9 only pushes static exports.books = onRequest((req, res) => books.render(req, res)); exports.book = onRequest((req, res) => book.render(req, res)); // API exports.api = app.listener; \n```\n\n## Add api[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-2#add-api)\n\n### Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-2#full-code)\n\n[/functions/src/api/index.ts](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/blob/08-Book-Page/functions/src/api/index.ts)\n\n```\nimport * as cors from 'cors'; import * as express from 'express'; import * as admin from 'firebase-admin'; import * as functions from 'firebase-functions'; import BookModel from '../../../models/BookModel'; // Initialize Firebase Admin admin.initializeApp(); // Create Express App const app = express(); // Use cors middleware app.use(cors({ origin: true })); app.get('/book', async (req, res) => { const id = req.query.id; if (id) { console.log(Fetching ${id}); try { const bookRef = await admin .firestore() .collection('books') .doc(id) .get(); res.json(bookRef.data()); } catch (e) { console.log(e); return; } } else { res.status(403).send('Missing id'); return; } }); app.get('/books', async (req, res) => { try { const booksSnapshot = await admin .firestore() .collection('books') .get(); const books: BookModel[] = []; booksSnapshot.forEach(doc => { books.push(doc.data()); }); res.json(books); } catch (e) { console.log(e); return; } }); app.get('/chapter', async (req, res) => { const id = req.query.id; const chapterId = req.query.chapterId; if (id) { console.log(Fetching ${id}); try { const bookRef = await admin .firestore() .collection(books/${id}/chapters) .doc(chapterId) .get(); res.json(bookRef.data()); } catch (e) { console.log(e); return; } } else { res.status(403).send('Missing id'); return; } }); app.get('/page', async (req, res) => { const id = req.query.id; const chapterId = req.query.chapterId; const pageId = req.query.pageId; if (id) { console.log(Fetching ${id}); try { const bookRef = await admin .firestore() .collection(books/${id}/chapters/${chapterId}/pages) .doc(pageId) .get(); res.json(bookRef.data()); } catch (e) { console.log(e); return; } } else { res.status(403).send('Missing id'); return; } }); export const listener = functions.https.onRequest(app); \n```\n\n## Add BookDetail[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-2#add-bookdetail)\n\n### Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-2#full-code)\n\n[/components/BookDetail.tsx](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/blob/08-Book-Page/components/BookDetail.tsx)\n\n```\nimport { Avatar, Card, CardContent, List, ListItem, ListItemAvatar, ListItemText } from '@material-ui/core'; import { makeStyles } from '@material-ui/core/styles'; import Typography from '@material-ui/core/Typography'; import NextLink from 'next/link'; import React from 'react'; import Book from '../models/BookModel'; import Chapter from '../models/ChapterModel'; const useStyles = makeStyles(theme => ({ card: { width: '100%', maxWidth: 400, margin: 5, display: 'flex', flexDirection: 'column' }, list: { width: '100%', backgroundColor: theme.palette.background.paper } })); const BookDetail = (prop: { book: Book }) => { const classes = useStyles(); let listItems: any[] = []; if (prop.book && prop.book.chapters) { prop.book.chapters.map((chapter: Chapter) => { listItems.push( <NextLink href={/book?id=${prop.book.id}&chapterId=${chapter.id}} key={chapter.id} > <ListItem button> <ListItemAvatar> <Avatar alt={chapter.title} src={chapter.photo} /> </ListItemAvatar> <ListItemText primary={${chapter.number}. ${chapter.title}} /> </ListItem> </NextLink> ); }); } return ( <Card className={classes.card}> <CardContent> <Typography variant=\"h5\" component=\"h1\"> {prop.book.title} </Typography> <List className={classes.list} component=\"nav\"> {listItems.map(item => { return item; })} </List> </CardContent> </Card> ); }; export default BookDetail; \n```\n\n## Add Chapter Detail[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-2#add-chapter-detail)\n\n### Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-2#full-code)\n\n[/components/ChapterDetail.tsx](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/blob/08-Book-Page/components/ChapterDetail.tsx)\n\n```\nimport { Button, Card, CardContent } from '@material-ui/core'; import { makeStyles } from '@material-ui/core/styles'; import Typography from '@material-ui/core/Typography'; import NextLink from 'next/link'; import React from 'react'; import BookModel from '../models/BookModel'; import Chapter from '../models/ChapterModel'; import PageModel from '../models/PageModel'; const useStyles = makeStyles(() => ({ card: { width: '100%', maxWidth: 400, margin: 5, display: 'flex', flexDirection: 'column' }, button: { margin: 2 } })); const ChapterDetail = (prop: { book: BookModel; chapter: Chapter }) => { const classes = useStyles(); let listItems: any[] = []; if (prop.chapter && prop.chapter.pages) { prop.chapter.pages.map((page: PageModel) => { listItems.push( <NextLink href={/book?id=${prop.book.id}&chapterId=${prop.chapter.id}&pageId=${ page.id }} key={page.id} > <Button variant=\"contained\" color=\"secondary\" className={classes.button} > {page.number} </Button> </NextLink> ); }); } return ( <Card className={classes.card}> <CardContent> <Typography variant=\"h5\" component=\"h1\"> {prop.chapter.title} Pages: </Typography> {listItems.map(item => { return item; })} </CardContent> </Card> ); }; export default ChapterDetail; \n```\n\n## Add Book Page[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-2#add-book-page)\n\n### Full Code[](https://codingcat.dev/courses/nextjs9/nextjs-using-materialui-and-firebase-ssr-part-2#full-code)\n\n[/components/BookPage.tsx](https://github.com/AJONPLLC/ajonp-ajsbooks-nextjs/blob/08-Book-Page/components/BookPage.tsx)\n\n```\nimport Paper from '@material-ui/core/Paper'; import { makeStyles } from '@material-ui/core/styles'; import Typography from '@material-ui/core/Typography'; import React from 'react'; import PageModel from '../models/PageModel'; const useStyles = makeStyles(theme => ({ root: { width: '100%', maxWidth: 400, margin: 5, display: 'flex', flexDirection: 'column', padding: theme.spacing(3, 2) } })); const BookPage = (prop: { page: PageModel }) => { const classes = useStyles(); let page; if (prop.page && prop.page.text) { page = <Typography component=\"p\">{prop.page.text}</Typography>; } else { page = <Typography component=\"p\">Please select a Chapter</Typography>; } return ( <div> <Paper className={classes.root}>{page}</Paper> </div> ); }; export default BookPage; \n```\n",
    "iso8601Date": "2020-09-16T00:00:00-04:00",
    "basename": "ssr-part-2"
  },
  "what-you-will-learn": {
    "title": "What You Will Learn",
    "date": "2020-09-16",
    "preview": "",
    "content": "\n\n\n",
    "iso8601Date": "2020-09-16T00:00:00-04:00",
    "basename": "what-you-will-learn"
  }
}
