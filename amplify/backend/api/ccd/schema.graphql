"""
Admin - Entire LMS
Subscriber - Anyone Logged in get Subscriber Group
siteAdmin - Anyone give rights to the site as an admin, one step below Admin
sitePostEditors - Anyone approved to edit a post, typically only given within a single site
sitePostPublishers- Anyone approved to publish posts

type User @model {
  id: ID!
  username: String
}
"""
type API
  @model(subscriptions: null)
  @key(
    name: "byPostTypePublished"
    fields: ["post_type", "post_publish_datetime"]
    queryField: "postsByPostTypePublished"
  )
  @key(
    name: "byPermalink"
    fields: ["post_permalink"]
    queryField: "postsByPermalink"
  )
  @versioned
  @aws_api_key
  @aws_cognito_user_pools
  @auth(
    rules: [
      { allow: public, provider: apiKey, operations: [read] }
      { allow: groups, groups: ["Admin"] }
      {
        allow: groups
        groupsField: "siteAdmin"
        operations: [read, create, update]
      }
      {
        allow: groups
        groupsField: "sitePostEditors"
        operations: [read, create, update]
      }
    ]
  ) {
  id: ID!
  post_type: String
  post_title: String
  post_basename: String
  post_tags: [String!]
  post_content: String
  post_excerpt: String
  post_status: String
    @auth(
      rules: [
        { allow: owner, operations: [read, create] }
        { allow: groups, groups: ["Admin"], operations: [create, update, read] }
        {
          allow: groups
          groupsField: "sitePostEditors"
          operations: [update, read]
        }
        {
          allow: groups
          groupsField: "sitePostPublishers"
          operations: [update, read]
        }
      ]
    )
  post_featured_image: String
  comment_status: Boolean
  ping_status: Boolean
  comment_count: Int
  post_permalink: String
  post_author: String
  post_thumbnail: String
  post_formats: [String!]
  post_preview: String
  post_publish_datetime: AWSDateTime

  site_title: String

  user_username: String
  user_sites: [ID!]
  user_posts: [ID!]
  user_user: [ID!]

  comment_content: String
  comment_user: ID

  category_title: String
  category_description: String
}

# type vodAsset
#   @model(subscriptions: { level: public })
#   @auth(
#     rules: [
#       {
#         allow: groups
#         groups: ["Admin"]
#         operations: [create, update, delete, read]
#       }
#       { allow: private, operations: [read] }
#     ]
#   ) {
#   id: ID!
#   title: String!
#   description: String!

#   #DO NOT EDIT
#   video: videoObject @connection
# }

# #DO NOT EDIT
# type videoObject
#   @model
#   @auth(
#     rules: [
#       {
#         allow: groups
#         groups: ["Admin"]
#         operations: [create, update, delete, read]
#       }
#       { allow: private, operations: [read] }
#     ]
#   ) {
#   id: ID!

#   token: String @function(name: "ccdvod-{env}-tokenGen")
# }
