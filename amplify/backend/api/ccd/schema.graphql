type Blog
  @model(subscriptions: null)
  @aws_api_key
  @aws_cognito_user_pools
  @auth(
    rules: [
      { allow: public, provider: apiKey }
      {
        allow: groups
        groups: ["Admin"]
        queries: null
        mutations: [create, update, delete]
      }
      {
        allow: groups
        groups: ["Subscriber"]
        queries: [get, list]
        mutations: null
      }
    ]
  ) {
  id: ID!
  title: String!
  posts: [Post] @connection(name: "BlogPosts")
}
type Post
  @model(subscriptions: null)
  @aws_api_key
  @aws_cognito_user_pools
  @searchable
  @auth(
    rules: [
      { allow: public, provider: apiKey }
      {
        allow: groups
        groups: ["Admin"]
        queries: null
        mutations: [create, update, delete]
      }
      {
        allow: groups
        groups: ["Subscriber"]
        queries: [get, list]
        mutations: null
      }
    ]
  ) {
  id: ID!
  post_type: String!
  post_title: String!
  post_name: String!
  post_tags: [String!]
  post_content: String
  post_excerpt: String
  post_status: Boolean
  comment_status: Boolean
  ping_status: Boolean
  comment_count: Int
  post_featured_image: String
  blog: Blog @connection(name: "BlogPosts")
  comments: [Comment] @connection(name: "PostComments")
  category: [Category] @connection(name: "PostCategories")
}
type Comment
  @aws_api_key
  @aws_cognito_user_pools
  @model
  @auth(
    rules: [
      { allow: owner }
      {
        allow: groups
        groups: ["Admin"]
        queries: null
        mutations: [create, update, delete]
      }
      {
        allow: groups
        groups: ["Subscriber"]
        queries: [get, list]
        mutations: null
      }
    ]
  ) {
  id: ID!
  content: String
  post: Post @connection(name: "PostComments")
}
type Category @model @auth(rules: [{ allow: groups, groups: ["Admin"] }]) {
  id: ID!
  name: String!
  post: Post @connection(name: "PostCategories")
}

type vodAsset
  @model(subscriptions: { level: public })
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [create, update, delete, read]
      }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  description: String!

  #DO NOT EDIT
  video: videoObject @connection
}

#DO NOT EDIT
type videoObject
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [create, update, delete, read]
      }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!

  token: String @function(name: "ccdvod-{env}-tokenGen")
}
