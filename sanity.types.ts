/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type Sponsor = {
  _id: string;
  _type: "sponsor";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  coverImage?: CloudinaryAsset;
  date?: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  featured?: number;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
      _key: string;
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      _type: "internalLink";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | ({
    _key: string;
  } & CloudinaryAsset) | ({
    _key: string;
  } & Code) | {
    url?: string;
    _type: "codepen";
    _key: string;
  } | {
    url?: string;
    _type: "codesandbox";
    _key: string;
  } | {
    id?: string;
    _type: "twitter";
    _key: string;
  }>;
  url?: string;
};

export type Lesson = {
  _id: string;
  _type: "lesson";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  coverImage?: CloudinaryAsset;
  date?: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  featured?: number;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
      _key: string;
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      _type: "internalLink";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | ({
    _key: string;
  } & CloudinaryAsset) | ({
    _key: string;
  } & Code) | {
    url?: string;
    _type: "codepen";
    _key: string;
  } | {
    url?: string;
    _type: "codesandbox";
    _key: string;
  } | {
    id?: string;
    _type: "twitter";
    _key: string;
  }>;
  views?: number;
  videoCloudinary?: CloudinaryAsset;
  youtube?: string;
  author?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "author";
  }>;
  devto?: string;
  hashnode?: string;
  sponsor?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "sponsor";
  }>;
  tags?: Array<{
    _key: string;
  } & Tag>;
  locked?: boolean;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  coverImage?: CloudinaryAsset;
  date?: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  featured?: number;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
      _key: string;
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      _type: "internalLink";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | ({
    _key: string;
  } & CloudinaryAsset) | ({
    _key: string;
  } & Code) | {
    url?: string;
    _type: "codepen";
    _key: string;
  } | {
    url?: string;
    _type: "codesandbox";
    _key: string;
  } | {
    id?: string;
    _type: "twitter";
    _key: string;
  }>;
  socials?: {
    codepen?: string;
    devto?: string;
    discord?: string;
    dribble?: string;
    facebook?: string;
    github?: string;
    instagram?: string;
    lastfm?: string;
    linkedin?: string;
    email?: string;
    mastodon?: string;
    medium?: string;
    polywork?: string;
    stackoverflow?: string;
    substack?: string;
    tiktok?: string;
    twitch?: string;
    twitter?: string;
    youtube?: string;
  };
  websites?: Array<{
    site?: string;
    link?: {
      href?: string;
      blank?: boolean;
    };
    _type: "site";
    _key: string;
  }>;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  coverImage?: CloudinaryAsset;
  date?: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  featured?: number;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
      _key: string;
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      _type: "internalLink";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | ({
    _key: string;
  } & CloudinaryAsset) | ({
    _key: string;
  } & Code) | {
    url?: string;
    _type: "codepen";
    _key: string;
  } | {
    url?: string;
    _type: "codesandbox";
    _key: string;
  } | {
    id?: string;
    _type: "twitter";
    _key: string;
  }>;
  views?: number;
  videoCloudinary?: CloudinaryAsset;
  youtube?: string;
  author?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "author";
  }>;
  devto?: string;
  hashnode?: string;
  sponsor?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "sponsor";
  }>;
  tags?: Array<{
    _key: string;
  } & Tag>;
};

export type Podcast = {
  _id: string;
  _type: "podcast";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  coverImage?: CloudinaryAsset;
  date?: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  featured?: number;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
      _key: string;
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      _type: "internalLink";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | ({
    _key: string;
  } & CloudinaryAsset) | ({
    _key: string;
  } & Code) | {
    url?: string;
    _type: "codepen";
    _key: string;
  } | {
    url?: string;
    _type: "codesandbox";
    _key: string;
  } | {
    id?: string;
    _type: "twitter";
    _key: string;
  }>;
  views?: number;
  videoCloudinary?: CloudinaryAsset;
  youtube?: string;
  author?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "author";
  }>;
  devto?: string;
  hashnode?: string;
  sponsor?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "sponsor";
  }>;
  tags?: Array<{
    _key: string;
  } & Tag>;
  podcastType?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "podcastType";
  };
  season?: number;
  episode?: number;
  recordingDate?: string;
  guest?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "guest";
  }>;
  pick?: Array<{
    user?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "guest";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "author";
    };
    name?: string;
    site?: string;
    _key: string;
  }>;
  spotify?: PodcastRssEpisode;
};

export type Guest = {
  _id: string;
  _type: "guest";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  coverImage?: CloudinaryAsset;
  date?: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  featured?: number;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
      _key: string;
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      _type: "internalLink";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | ({
    _key: string;
  } & CloudinaryAsset) | ({
    _key: string;
  } & Code) | {
    url?: string;
    _type: "codepen";
    _key: string;
  } | {
    url?: string;
    _type: "codesandbox";
    _key: string;
  } | {
    id?: string;
    _type: "twitter";
    _key: string;
  }>;
  socials?: {
    codepen?: string;
    devto?: string;
    discord?: string;
    dribble?: string;
    facebook?: string;
    github?: string;
    instagram?: string;
    lastfm?: string;
    linkedin?: string;
    email?: string;
    mastodon?: string;
    medium?: string;
    polywork?: string;
    stackoverflow?: string;
    substack?: string;
    tiktok?: string;
    twitch?: string;
    twitter?: string;
    youtube?: string;
  };
  websites?: Array<{
    site?: string;
    link?: {
      href?: string;
      blank?: boolean;
    };
    _type: "site";
    _key: string;
  }>;
};

export type PodcastType = {
  _id: string;
  _type: "podcastType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  coverImage?: CloudinaryAsset;
  date?: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  featured?: number;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
      _key: string;
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      _type: "internalLink";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | ({
    _key: string;
  } & CloudinaryAsset) | ({
    _key: string;
  } & Code) | {
    url?: string;
    _type: "codepen";
    _key: string;
  } | {
    url?: string;
    _type: "codesandbox";
    _key: string;
  } | {
    id?: string;
    _type: "twitter";
    _key: string;
  }>;
};

export type Course = {
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  coverImage?: CloudinaryAsset;
  date?: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  featured?: number;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
      _key: string;
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      _type: "internalLink";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | ({
    _key: string;
  } & CloudinaryAsset) | ({
    _key: string;
  } & Code) | {
    url?: string;
    _type: "codepen";
    _key: string;
  } | {
    url?: string;
    _type: "codesandbox";
    _key: string;
  } | {
    id?: string;
    _type: "twitter";
    _key: string;
  }>;
  views?: number;
  videoCloudinary?: CloudinaryAsset;
  youtube?: string;
  author?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "author";
  }>;
  devto?: string;
  hashnode?: string;
  sponsor?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "sponsor";
  }>;
  tags?: Array<{
    _key: string;
  } & Tag>;
  stripeProduct?: string;
  sections?: Array<{
    title?: string;
    lesson?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "lesson";
    }>;
    _type: "section";
    _key: string;
  }>;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  coverImage?: CloudinaryAsset;
  date?: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  featured?: number;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
      _key: string;
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      _type: "internalLink";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | ({
    _key: string;
  } & CloudinaryAsset) | ({
    _key: string;
  } & Code) | {
    url?: string;
    _type: "codepen";
    _key: string;
  } | {
    url?: string;
    _type: "codesandbox";
    _key: string;
  } | {
    id?: string;
    _type: "twitter";
    _key: string;
  }>;
  views?: number;
  videoCloudinary?: CloudinaryAsset;
  youtube?: string;
  author?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "author";
  }>;
  devto?: string;
  hashnode?: string;
  sponsor?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "sponsor";
  }>;
  tags?: Array<{
    _key: string;
  } & Tag>;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  navLinks?: Array<{
    title?: string;
    path?: string;
    sideOnly?: boolean;
    _key: string;
  }>;
  ogImage?: CloudinaryAsset;
};

export type PodcastRssEpisode = {
  _type: "podcastRssEpisode";
  title?: string;
  description?: string;
  link?: string;
  guid?: {
    id?: string;
    isPermaLink?: boolean;
  };
  pubDate?: string;
  enclosures?: Array<{
    url?: string;
    length?: number;
    type?: string;
    _type: "enclosure";
    _key: string;
  }>;
  itunes?: {
    summary?: string;
    explicit?: string;
    duration?: string;
    season?: string;
    episode?: string;
    episodeType?: string;
    image?: {
      href?: string;
    };
  };
};

export type IconPicker = {
  _type: "iconPicker";
  provider?: string;
  name?: string;
  svg?: string;
};

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type Tags = Array<{
  _key: string;
} & Tag>;

export type Tag = {
  _type: "tag";
  value?: string;
  label?: string;
};

export type CloudinaryAssetContextCustom = {
  _type: "cloudinary.assetContextCustom";
  alt?: string;
  caption?: string;
};

export type CloudinaryAssetDerived = {
  _type: "cloudinary.assetDerived";
  raw_transformation?: string;
  url?: string;
  secure_url?: string;
};

export type CloudinaryAsset = {
  _type: "cloudinary.asset";
  public_id?: string;
  resource_type?: string;
  type?: string;
  format?: string;
  version?: number;
  url?: string;
  secure_url?: string;
  width?: number;
  height?: number;
  bytes?: number;
  duration?: number;
  tags?: Array<string>;
  created_at?: string;
  derived?: Array<{
    _key: string;
  } & CloudinaryAssetDerived>;
  access_mode?: string;
  context?: CloudinaryAssetContext;
};

export type CloudinaryAssetContext = {
  _type: "cloudinary.assetContext";
  custom?: CloudinaryAssetContextCustom;
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<{
    _key: string;
  } & SanityAssistInstructionTask>;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<{
    _key: string;
  } & SanityAssistSchemaTypeField>;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message?: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  } | ({
    _key: string;
  } & SanityAssistInstructionFieldRef) | ({
    _key: string;
  } & SanityAssistInstructionContext) | ({
    _key: string;
  } & SanityAssistInstructionUserInput)>;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<({
    _key: string;
  } & SanityAssistOutputField) | ({
    _key: string;
  } & SanityAssistOutputType)>;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<{
    _key: string;
  } & SanityAssistInstruction>;
};
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: docCount
// Query: count(*[_type == $type])
export type DocCountResult = number;
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  navLinks?: Array<{
    title?: string;
    path?: string;
    sideOnly?: boolean;
    _key: string;
  }>;
  ogImage?: CloudinaryAsset;
} | null;
// Variable: homePageQuery
// Query: *[_type == "settings" ][0]{  "featuredCourse": *[_type == "course" && featured > 0]|order(featured desc)[0]{        _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),        stripeProduct,  },  "featuredCourses": *[_type == "course" && featured > 0]|order(featured desc)[0...4]{        _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),        stripeProduct,  },  "latestPodcast": *[_type == "podcast"]|order(date desc)[0]{        _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),  },  "topPodcasts": *[_type == "podcast" && views > 0]|order(views desc)[0...4]{        _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),  },  "latestPosts": *[_type == "post"]|order(date desc)[0...4]{       _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),  },  "topPosts": *[_type == "post" && views > 0]|order(views desc)[0...4]{      _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),  },}
export type HomePageQueryResult = {
  featuredCourse: {
    _id: string;
    _type: "course";
    status: "draft" | "published";
    title: string | "Untitled";
    slug: string | null;
    excerpt: string | null;
    coverImage: CloudinaryAsset | null;
    date: string;
    stripeProduct: string | null;
  } | null;
  featuredCourses: Array<{
    _id: string;
    _type: "course";
    status: "draft" | "published";
    title: string | "Untitled";
    slug: string | null;
    excerpt: string | null;
    coverImage: CloudinaryAsset | null;
    date: string;
    stripeProduct: string | null;
  }>;
  latestPodcast: {
    _id: string;
    _type: "podcast";
    status: "draft" | "published";
    title: string | "Untitled";
    slug: string | null;
    excerpt: string | null;
    coverImage: CloudinaryAsset | null;
    date: string;
  } | null;
  topPodcasts: Array<{
    _id: string;
    _type: "podcast";
    status: "draft" | "published";
    title: string | "Untitled";
    slug: string | null;
    excerpt: string | null;
    coverImage: CloudinaryAsset | null;
    date: string;
  }>;
  latestPosts: Array<{
    _id: string;
    _type: "post";
    status: "draft" | "published";
    title: string | "Untitled";
    slug: string | null;
    excerpt: string | null;
    coverImage: CloudinaryAsset | null;
    date: string;
  }>;
  topPosts: Array<{
    _id: string;
    _type: "post";
    status: "draft" | "published";
    title: string | "Untitled";
    slug: string | null;
    excerpt: string | null;
    coverImage: CloudinaryAsset | null;
    date: string;
  }>;
} | null;
// Variable: pageQuery
// Query: *[_type == "page" && slug.current == $slug] [0] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),    content[]{    ...,    markDefs[]{      ...,      _type == "internalLink" => {        @.reference->_type == "page" => {          "href": "/" + @.reference->slug.current        },        @.reference->_type != "page" => {          "href": "/" + @.reference->_type + "/" + @.reference->slug.current        }      },    }  },  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  devto,  hashnode,  sponsor[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  tags,  videoCloudinary,  youtube}
export type PageQueryResult = {
  _id: string;
  _type: "page";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
  devto: string | null;
  hashnode: string | null;
  sponsor: Array<{
    _id: string;
    _type: "sponsor";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    url?: string;
  }> | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  videoCloudinary: CloudinaryAsset | null;
  youtube: string | null;
} | null;
// Variable: blogQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) [0] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  }}
export type BlogQueryResult = {
  _id: string;
  _type: "post";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  author: Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
} | null;
// Variable: morePostQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [$offset...$limit] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  }}
export type MorePostQueryResult = Array<{
  _id: string;
  _type: "post";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  author: Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),    content[]{    ...,    markDefs[]{      ...,      _type == "internalLink" => {        @.reference->_type == "page" => {          "href": "/" + @.reference->slug.current        },        @.reference->_type != "page" => {          "href": "/" + @.reference->_type + "/" + @.reference->slug.current        }      },    }  },  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  devto,  hashnode,  sponsor[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  tags,  videoCloudinary,  youtube}
export type PostQueryResult = {
  _id: string;
  _type: "post";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
  devto: string | null;
  hashnode: string | null;
  sponsor: Array<{
    _id: string;
    _type: "sponsor";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    url?: string;
  }> | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  videoCloudinary: CloudinaryAsset | null;
  youtube: string | null;
} | null;
// Variable: podcastsQuery
// Query: *[_type == "podcast" && defined(slug.current)] | order(date desc, _updatedAt desc) [0] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  guest[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  }}
export type PodcastsQueryResult = {
  _id: string;
  _type: "podcast";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  author: Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
  guest: Array<{
    _id: string;
    _type: "guest";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
} | null;
// Variable: morePodcastQuery
// Query: *[_type == "podcast" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [$offset...$limit] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  guest[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  }}
export type MorePodcastQueryResult = Array<{
  _id: string;
  _type: "podcast";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  author: Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
  guest: Array<{
    _id: string;
    _type: "guest";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
}>;
// Variable: podcastQuery
// Query: *[_type == "podcast" && slug.current == $slug] [0] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),    content[]{    ...,    markDefs[]{      ...,      _type == "internalLink" => {        @.reference->_type == "page" => {          "href": "/" + @.reference->slug.current        },        @.reference->_type != "page" => {          "href": "/" + @.reference->_type + "/" + @.reference->slug.current        }      },    }  },  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  devto,  hashnode,  sponsor[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  tags,  videoCloudinary,  youtube,    podcastType[]->{    ...,    "title": coalesce(title, "Missing Podcast Title"),  },  season,  episode,  recordingDate,  guest[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  pick[]{    user->,    name,    site  }}
export type PodcastQueryResult = {
  _id: string;
  _type: "podcast";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
  devto: string | null;
  hashnode: string | null;
  sponsor: Array<{
    _id: string;
    _type: "sponsor";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    url?: string;
  }> | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  videoCloudinary: CloudinaryAsset | null;
  youtube: string | null;
  podcastType: null;
  season: number | null;
  episode: number | null;
  recordingDate: string | null;
  guest: Array<{
    _id: string;
    _type: "guest";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
  pick: Array<{
    user: {
      _id: string;
      _type: "author";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      coverImage?: CloudinaryAsset;
      date?: string;
      title?: string;
      slug?: Slug;
      excerpt?: string;
      featured?: number;
      content?: Array<({
        _key: string;
      } & CloudinaryAsset) | ({
        _key: string;
      } & Code) | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          blank?: boolean;
          _type: "link";
          _key: string;
        } | {
          reference?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "course";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "page";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "podcast";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          _type: "internalLink";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        id?: string;
        _type: "twitter";
        _key: string;
      } | {
        url?: string;
        _type: "codepen";
        _key: string;
      } | {
        url?: string;
        _type: "codesandbox";
        _key: string;
      }>;
      socials?: {
        codepen?: string;
        devto?: string;
        discord?: string;
        dribble?: string;
        facebook?: string;
        github?: string;
        instagram?: string;
        lastfm?: string;
        linkedin?: string;
        email?: string;
        mastodon?: string;
        medium?: string;
        polywork?: string;
        stackoverflow?: string;
        substack?: string;
        tiktok?: string;
        twitch?: string;
        twitter?: string;
        youtube?: string;
      };
      websites?: Array<{
        site?: string;
        link?: {
          href?: string;
          blank?: boolean;
        };
        _type: "site";
        _key: string;
      }>;
    } | {
      _id: string;
      _type: "guest";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      coverImage?: CloudinaryAsset;
      date?: string;
      title?: string;
      slug?: Slug;
      excerpt?: string;
      featured?: number;
      content?: Array<({
        _key: string;
      } & CloudinaryAsset) | ({
        _key: string;
      } & Code) | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          blank?: boolean;
          _type: "link";
          _key: string;
        } | {
          reference?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "course";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "page";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "podcast";
          } | {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          _type: "internalLink";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        id?: string;
        _type: "twitter";
        _key: string;
      } | {
        url?: string;
        _type: "codepen";
        _key: string;
      } | {
        url?: string;
        _type: "codesandbox";
        _key: string;
      }>;
      socials?: {
        codepen?: string;
        devto?: string;
        discord?: string;
        dribble?: string;
        facebook?: string;
        github?: string;
        instagram?: string;
        lastfm?: string;
        linkedin?: string;
        email?: string;
        mastodon?: string;
        medium?: string;
        polywork?: string;
        stackoverflow?: string;
        substack?: string;
        tiktok?: string;
        twitch?: string;
        twitter?: string;
        youtube?: string;
      };
      websites?: Array<{
        site?: string;
        link?: {
          href?: string;
          blank?: boolean;
        };
        _type: "site";
        _key: string;
      }>;
    } | null;
    name: string | null;
    site: string | null;
  }> | null;
} | null;
// Variable: coursesQuery
// Query: *[_type == "course" && defined(slug.current)] | order(date desc, _updatedAt desc) [0] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),    stripeProduct,  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  }}
export type CoursesQueryResult = {
  _id: string;
  _type: "course";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  stripeProduct: string | null;
  author: Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
} | null;
// Variable: moreCourseQuery
// Query: *[_type == "course" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [$offset...$limit] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),    stripeProduct,  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  }}
export type MoreCourseQueryResult = Array<{
  _id: string;
  _type: "course";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  stripeProduct: string | null;
  author: Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
}>;
// Variable: courseQuery
// Query: *[_type == "course" && slug.current == $courseSlug] [0] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),    stripeProduct,    content[]{    ...,    markDefs[]{      ...,      _type == "internalLink" => {        @.reference->_type == "page" => {          "href": "/" + @.reference->slug.current        },        @.reference->_type != "page" => {          "href": "/" + @.reference->_type + "/" + @.reference->slug.current        }      },    }  },  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  devto,  hashnode,  sponsor[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  tags,  videoCloudinary,  youtube,    podcastType[]->{    ...,    "title": coalesce(title, "Missing Podcast Title"),  },  season,  episode,  recordingDate,  guest[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  pick[]{    user->,    name,    site  }}
export type CourseQueryResult = {
  _id: string;
  _type: "course";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  stripeProduct: string | null;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
  devto: string | null;
  hashnode: string | null;
  sponsor: Array<{
    _id: string;
    _type: "sponsor";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    url?: string;
  }> | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  videoCloudinary: CloudinaryAsset | null;
  youtube: string | null;
  podcastType: null;
  season: null;
  episode: null;
  recordingDate: null;
  guest: null;
  pick: null;
} | null;
// Variable: lessonsInCourseQuery
// Query: *[_type == "course" && slug.current == $courseSlug] [0] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),    stripeProduct,  sections[]{    title,    lesson[]->{        _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),        locked,  videoCloudinary    }  }}
export type LessonsInCourseQueryResult = {
  _id: string;
  _type: "course";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  stripeProduct: string | null;
  sections: Array<{
    title: string | null;
    lesson: Array<{
      _id: string;
      _type: "lesson";
      status: "draft" | "published";
      title: string | "Untitled";
      slug: string | null;
      excerpt: string | null;
      coverImage: CloudinaryAsset | null;
      date: string;
      locked: boolean | null;
      videoCloudinary: CloudinaryAsset | null;
    }> | null;
  }> | null;
} | null;
// Variable: lessonQuery
// Query: *[_type == "lesson" && slug.current == $lessonSlug] [0] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),    content[]{    ...,    markDefs[]{      ...,      _type == "internalLink" => {        @.reference->_type == "page" => {          "href": "/" + @.reference->slug.current        },        @.reference->_type != "page" => {          "href": "/" + @.reference->_type + "/" + @.reference->slug.current        }      },    }  },  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  devto,  hashnode,  sponsor[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  tags,  videoCloudinary,  youtube,    locked,  videoCloudinary}
export type LessonQueryResult = {
  _id: string;
  _type: "lesson";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
  devto: string | null;
  hashnode: string | null;
  sponsor: Array<{
    _id: string;
    _type: "sponsor";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    url?: string;
  }> | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  videoCloudinary: CloudinaryAsset | null;
  youtube: string | null;
  locked: boolean | null;
} | null;
// Variable: moreAuthorQuery
// Query: *[_type == "author" && _id != $skip && defined(slug.current)] | order(title) [$offset...$limit] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt)}
export type MoreAuthorQueryResult = Array<{
  _id: string;
  _type: "author";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
}>;
// Variable: authorQuery
// Query: *[_type == "author" && slug.current == $slug] [0] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),    content[]{    ...,    markDefs[]{      ...,      _type == "internalLink" => {        @.reference->_type == "page" => {          "href": "/" + @.reference->slug.current        },        @.reference->_type != "page" => {          "href": "/" + @.reference->_type + "/" + @.reference->slug.current        }      },    }  },  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  devto,  hashnode,  sponsor[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  tags,  videoCloudinary,  youtube,    socials,  websites}
export type AuthorQueryResult = {
  _id: string;
  _type: "author";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: null;
  devto: null;
  hashnode: null;
  sponsor: null;
  tags: null;
  videoCloudinary: null;
  youtube: null;
  socials: {
    codepen?: string;
    devto?: string;
    discord?: string;
    dribble?: string;
    facebook?: string;
    github?: string;
    instagram?: string;
    lastfm?: string;
    linkedin?: string;
    email?: string;
    mastodon?: string;
    medium?: string;
    polywork?: string;
    stackoverflow?: string;
    substack?: string;
    tiktok?: string;
    twitch?: string;
    twitter?: string;
    youtube?: string;
  } | null;
  websites: Array<{
    site?: string;
    link?: {
      href?: string;
      blank?: boolean;
    };
    _type: "site";
    _key: string;
  }> | null;
} | null;
// Variable: authorQueryWithRelated
// Query: *[_type == "author" && slug.current == $slug] [0] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),    content[]{    ...,    markDefs[]{      ...,      _type == "internalLink" => {        @.reference->_type == "page" => {          "href": "/" + @.reference->slug.current        },        @.reference->_type != "page" => {          "href": "/" + @.reference->_type + "/" + @.reference->slug.current        }      },    }  },  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  devto,  hashnode,  sponsor[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  tags,  videoCloudinary,  youtube,    socials,  websites,    "related":{    "course": *[_type == "course" && (^._id in author[]._ref || ^._id in guest[]._ref)] | order(date desc) [0...4] {        _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt)    },    "podcast": *[_type == "podcast" && (^._id in author[]._ref || ^._id in guest[]._ref)] | order(date desc) [0...4] {        _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt)    },    "post": *[_type == "post" && (^._id in author[]._ref || ^._id in guest[]._ref)] | order(date desc) [0...4] {        _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt)    },  }}
export type AuthorQueryWithRelatedResult = {
  _id: string;
  _type: "author";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: null;
  devto: null;
  hashnode: null;
  sponsor: null;
  tags: null;
  videoCloudinary: null;
  youtube: null;
  socials: {
    codepen?: string;
    devto?: string;
    discord?: string;
    dribble?: string;
    facebook?: string;
    github?: string;
    instagram?: string;
    lastfm?: string;
    linkedin?: string;
    email?: string;
    mastodon?: string;
    medium?: string;
    polywork?: string;
    stackoverflow?: string;
    substack?: string;
    tiktok?: string;
    twitch?: string;
    twitter?: string;
    youtube?: string;
  } | null;
  websites: Array<{
    site?: string;
    link?: {
      href?: string;
      blank?: boolean;
    };
    _type: "site";
    _key: string;
  }> | null;
  related: {
    course: Array<never>;
    podcast: Array<never>;
    post: Array<never>;
  };
} | null;
// Variable: moreGuestQuery
// Query: *[_type == "guest" && _id != $skip && defined(slug.current)] | order(title) [$offset...$limit] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt)}
export type MoreGuestQueryResult = Array<{
  _id: string;
  _type: "guest";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
}>;
// Variable: guestQuery
// Query: *[_type == "guest" && slug.current == $slug] [0] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),    content[]{    ...,    markDefs[]{      ...,      _type == "internalLink" => {        @.reference->_type == "page" => {          "href": "/" + @.reference->slug.current        },        @.reference->_type != "page" => {          "href": "/" + @.reference->_type + "/" + @.reference->slug.current        }      },    }  },  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  devto,  hashnode,  sponsor[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  tags,  videoCloudinary,  youtube,    socials,  websites}
export type GuestQueryResult = {
  _id: string;
  _type: "guest";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: null;
  devto: null;
  hashnode: null;
  sponsor: null;
  tags: null;
  videoCloudinary: null;
  youtube: null;
  socials: {
    codepen?: string;
    devto?: string;
    discord?: string;
    dribble?: string;
    facebook?: string;
    github?: string;
    instagram?: string;
    lastfm?: string;
    linkedin?: string;
    email?: string;
    mastodon?: string;
    medium?: string;
    polywork?: string;
    stackoverflow?: string;
    substack?: string;
    tiktok?: string;
    twitch?: string;
    twitter?: string;
    youtube?: string;
  } | null;
  websites: Array<{
    site?: string;
    link?: {
      href?: string;
      blank?: boolean;
    };
    _type: "site";
    _key: string;
  }> | null;
} | null;
// Variable: guestQueryWithRelated
// Query: *[_type == "guest" && slug.current == $slug] [0] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),    content[]{    ...,    markDefs[]{      ...,      _type == "internalLink" => {        @.reference->_type == "page" => {          "href": "/" + @.reference->slug.current        },        @.reference->_type != "page" => {          "href": "/" + @.reference->_type + "/" + @.reference->slug.current        }      },    }  },  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  devto,  hashnode,  sponsor[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  tags,  videoCloudinary,  youtube,    socials,  websites,    "related":{    "course": *[_type == "course" && (^._id in author[]._ref || ^._id in guest[]._ref)] | order(date desc) [0...4] {        _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt)    },    "podcast": *[_type == "podcast" && (^._id in author[]._ref || ^._id in guest[]._ref)] | order(date desc) [0...4] {        _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt)    },    "post": *[_type == "post" && (^._id in author[]._ref || ^._id in guest[]._ref)] | order(date desc) [0...4] {        _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt)    },  }}
export type GuestQueryWithRelatedResult = {
  _id: string;
  _type: "guest";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: null;
  devto: null;
  hashnode: null;
  sponsor: null;
  tags: null;
  videoCloudinary: null;
  youtube: null;
  socials: {
    codepen?: string;
    devto?: string;
    discord?: string;
    dribble?: string;
    facebook?: string;
    github?: string;
    instagram?: string;
    lastfm?: string;
    linkedin?: string;
    email?: string;
    mastodon?: string;
    medium?: string;
    polywork?: string;
    stackoverflow?: string;
    substack?: string;
    tiktok?: string;
    twitch?: string;
    twitter?: string;
    youtube?: string;
  } | null;
  websites: Array<{
    site?: string;
    link?: {
      href?: string;
      blank?: boolean;
    };
    _type: "site";
    _key: string;
  }> | null;
  related: {
    course: Array<never>;
    podcast: Array<never>;
    post: Array<never>;
  };
} | null;
// Variable: moreSponsorQuery
// Query: *[_type == "sponsor" && _id != $skip && defined(slug.current)] | order(date desc) [$offset...$limit] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt)}
export type MoreSponsorQueryResult = Array<{
  _id: string;
  _type: "sponsor";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
}>;
// Variable: sponsorQuery
// Query: *[_type == "sponsor" && slug.current == $slug] [0] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),    content[]{    ...,    markDefs[]{      ...,      _type == "internalLink" => {        @.reference->_type == "page" => {          "href": "/" + @.reference->slug.current        },        @.reference->_type != "page" => {          "href": "/" + @.reference->_type + "/" + @.reference->slug.current        }      },    }  },  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  devto,  hashnode,  sponsor[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  tags,  videoCloudinary,  youtube,    socials,  websites}
export type SponsorQueryResult = {
  _id: string;
  _type: "sponsor";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: null;
  devto: null;
  hashnode: null;
  sponsor: null;
  tags: null;
  videoCloudinary: null;
  youtube: null;
  socials: null;
  websites: null;
} | null;
// Variable: sponsorQueryWithRelated
// Query: *[_type == "sponsor" && slug.current == $slug] [0] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),    content[]{    ...,    markDefs[]{      ...,      _type == "internalLink" => {        @.reference->_type == "page" => {          "href": "/" + @.reference->slug.current        },        @.reference->_type != "page" => {          "href": "/" + @.reference->_type + "/" + @.reference->slug.current        }      },    }  },  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  devto,  hashnode,  sponsor[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  tags,  videoCloudinary,  youtube,    socials,  websites,    "related":{    "course": *[_type == "course" && ^._id in sponsor[]._ref] | order(date desc) [] {        _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt)    },    "podcast": *[_type == "podcast" && ^._id in sponsor[]._ref] | order(date desc) [] {        _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt)    },    "post": *[_type == "post" && ^._id in sponsor[]._ref] | order(date desc) [] {        _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt)    },  }}
export type SponsorQueryWithRelatedResult = {
  _id: string;
  _type: "sponsor";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: null;
  devto: null;
  hashnode: null;
  sponsor: null;
  tags: null;
  videoCloudinary: null;
  youtube: null;
  socials: null;
  websites: null;
  related: {
    course: Array<never>;
    podcast: Array<never>;
    post: Array<never>;
  };
} | null;
// Variable: rssQuery
// Query: *[_type == $type && _id != $skip && defined(slug.current)] | order(date desc) [$offset...$limit] {    _id,  _type,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _createdAt),    content[]{    ...,    markDefs[]{      ...,      _type == "internalLink" => {        @.reference->_type == "page" => {          "href": "/" + @.reference->slug.current        },        @.reference->_type != "page" => {          "href": "/" + @.reference->_type + "/" + @.reference->slug.current        }      },    }  },  author[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  devto,  hashnode,  sponsor[]->{    ...,    "title": coalesce(title, "Anonymous"),    "slug": slug.current,  },  tags,  videoCloudinary,  youtube,}
export type RssQueryResult = Array<{
  _id: string;
  _type: "assist.instruction.context";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: null;
  excerpt: null;
  coverImage: null;
  date: null | string;
  content: null;
  author: null;
  devto: null;
  hashnode: null;
  sponsor: null;
  tags: null;
  videoCloudinary: null;
  youtube: null;
} | {
  _id: string;
  _type: "author";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: null;
  devto: null;
  hashnode: null;
  sponsor: null;
  tags: null;
  videoCloudinary: null;
  youtube: null;
} | {
  _id: string;
  _type: "course";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
  devto: string | null;
  hashnode: string | null;
  sponsor: Array<{
    _id: string;
    _type: "sponsor";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    url?: string;
  }> | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  videoCloudinary: CloudinaryAsset | null;
  youtube: string | null;
} | {
  _id: string;
  _type: "guest";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: null;
  devto: null;
  hashnode: null;
  sponsor: null;
  tags: null;
  videoCloudinary: null;
  youtube: null;
} | {
  _id: string;
  _type: "lesson";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
  devto: string | null;
  hashnode: string | null;
  sponsor: Array<{
    _id: string;
    _type: "sponsor";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    url?: string;
  }> | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  videoCloudinary: CloudinaryAsset | null;
  youtube: string | null;
} | {
  _id: string;
  _type: "page";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
  devto: string | null;
  hashnode: string | null;
  sponsor: Array<{
    _id: string;
    _type: "sponsor";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    url?: string;
  }> | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  videoCloudinary: CloudinaryAsset | null;
  youtube: string | null;
} | {
  _id: string;
  _type: "podcast";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
  devto: string | null;
  hashnode: string | null;
  sponsor: Array<{
    _id: string;
    _type: "sponsor";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    url?: string;
  }> | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  videoCloudinary: CloudinaryAsset | null;
  youtube: string | null;
} | {
  _id: string;
  _type: "podcastType";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: null;
  devto: null;
  hashnode: null;
  sponsor: null;
  tags: null;
  videoCloudinary: null;
  youtube: null;
} | {
  _id: string;
  _type: "post";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: Array<{
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    socials?: {
      codepen?: string;
      devto?: string;
      discord?: string;
      dribble?: string;
      facebook?: string;
      github?: string;
      instagram?: string;
      lastfm?: string;
      linkedin?: string;
      email?: string;
      mastodon?: string;
      medium?: string;
      polywork?: string;
      stackoverflow?: string;
      substack?: string;
      tiktok?: string;
      twitch?: string;
      twitter?: string;
      youtube?: string;
    };
    websites?: Array<{
      site?: string;
      link?: {
        href?: string;
        blank?: boolean;
      };
      _type: "site";
      _key: string;
    }>;
  }> | null;
  devto: string | null;
  hashnode: string | null;
  sponsor: Array<{
    _id: string;
    _type: "sponsor";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    coverImage?: CloudinaryAsset;
    date?: string;
    title: string | "Anonymous";
    slug: string | null;
    excerpt?: string;
    featured?: number;
    content?: Array<({
      _key: string;
    } & CloudinaryAsset) | ({
      _key: string;
    } & Code) | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        blank?: boolean;
        _type: "link";
        _key: string;
      } | {
        reference?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "course";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "podcast";
        } | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        _type: "internalLink";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      id?: string;
      _type: "twitter";
      _key: string;
    } | {
      url?: string;
      _type: "codepen";
      _key: string;
    } | {
      url?: string;
      _type: "codesandbox";
      _key: string;
    }>;
    url?: string;
  }> | null;
  tags: Array<{
    _key: string;
  } & Tag> | null;
  videoCloudinary: CloudinaryAsset | null;
  youtube: string | null;
} | {
  _id: string;
  _type: "sanity.fileAsset";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: null;
  excerpt: null;
  coverImage: null;
  date: null | string;
  content: null;
  author: null;
  devto: null;
  hashnode: null;
  sponsor: null;
  tags: null;
  videoCloudinary: null;
  youtube: null;
} | {
  _id: string;
  _type: "sanity.imageAsset";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: null;
  excerpt: null;
  coverImage: null;
  date: null | string;
  content: null;
  author: null;
  devto: null;
  hashnode: null;
  sponsor: null;
  tags: null;
  videoCloudinary: null;
  youtube: null;
} | {
  _id: string;
  _type: "settings";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: null;
  excerpt: null;
  coverImage: null;
  date: null | string;
  content: null;
  author: null;
  devto: null;
  hashnode: null;
  sponsor: null;
  tags: null;
  videoCloudinary: null;
  youtube: null;
} | {
  _id: string;
  _type: "sponsor";
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: CloudinaryAsset | null;
  date: string;
  content: Array<{
    _key: string;
    markDefs: null;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      href?: string;
      blank?: boolean;
      _type: "link";
    } | {
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "course";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "podcast";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      href: string | null;
    }> | null;
    level?: number;
    _type: "block";
  } | {
    id?: string;
    _type: "twitter";
    markDefs: null;
  } | {
    url?: string;
    _type: "codepen";
    markDefs: null;
  } | {
    url?: string;
    _type: "codesandbox";
    markDefs: null;
  }> | null;
  author: null;
  devto: null;
  hashnode: null;
  sponsor: null;
  tags: null;
  videoCloudinary: null;
  youtube: null;
}>;
// Variable: sitemapQuery
// Query: *[_type in ["author", "course", "guest", "page", "podcast", "post", "sponsor"] && defined(slug.current)] | order(_type asc) | order(_updated desc) {  _type,  _updatedAt,  "slug": slug.current,  sections[]{    lesson[]->{      _type,      _updatedAt,      "slug": slug.current,    }  }}
export type SitemapQueryResult = Array<{
  _type: "author";
  _updatedAt: string;
  slug: string | null;
  sections: null;
} | {
  _type: "course";
  _updatedAt: string;
  slug: string | null;
  sections: Array<{
    lesson: Array<{
      _type: "lesson";
      _updatedAt: string;
      slug: string | null;
    }> | null;
  }> | null;
} | {
  _type: "guest";
  _updatedAt: string;
  slug: string | null;
  sections: null;
} | {
  _type: "page";
  _updatedAt: string;
  slug: string | null;
  sections: null;
} | {
  _type: "podcast";
  _updatedAt: string;
  slug: string | null;
  sections: null;
} | {
  _type: "post";
  _updatedAt: string;
  slug: string | null;
  sections: null;
} | {
  _type: "sponsor";
  _updatedAt: string;
  slug: string | null;
  sections: null;
}>;
